{
  "id": "f67e8921-b197-40c9-9154-e95db8f27deb",
  "status": "~",
  "title": "UI Improvements",
  "description": "Various UI improvements to the app",
  "features": [
    {
      "id": "27156e19-3aeb-41de-adc2-75b1c7ca9774",
      "status": "+",
      "title": "Agents require a search-files tool",
      "description": "The agent calls the tool with a list of keywords, the whole project file system is searched and if any of them are found in a given file it will be returned in a final list.\nThe result is the list of relative file paths.",
      "plan": "",
      "context": [],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "8ed1e913-44e2-4321-a631-f1c2c9033177",
      "status": "+",
      "title": "For standard agent suppliers - discover the latest prices",
      "description": "It must be possible to view the latest prices per model and refresh them via a configurable link to the given supplier's website. Store the latest ones in a local file that is read on app start.\nRight now the costs are always 0 - the tokens are not counted anywhere, they should be.",
      "plan": "",
      "context": [
        "src/tools/factory/mainOrchestrator.js",
        "packages/factory-ts/src/orchestrator.ts"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "a480aa54-f697-409d-95a7-1b369c3da9ff",
      "status": "+",
      "title": "the word dependencies in Features and Tasks should be changed to 'blockers'",
      "description": "This change should be reflected in any file that uses 'dependencies'",
      "plan": "",
      "context": [],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "0964b90b-396a-43b0-9f4a-a60d0034360e",
      "status": "+",
      "title": "Make an Agent run chat display prettier",
      "description": "make the thoughts as a bubble, and then the tool calls as expandable rows to view the details (mainly for read_files & write_file - the rest of the tools are short enough that they can always display).\nSame goes for the responses to the LLM - apply a similar view as above.",
      "plan": "",
      "context": [
        "src/renderer/screens/AgentsView.tsx",
        "src/renderer/screens/AllAgentsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "98c76bd6-8c5c-4aaf-a778-54f5f57f679a",
      "status": "+",
      "title": "Agent run costs and times are always empty",
      "description": "It seems these are either not recorded correctly or not passed, so that they cannot be viewed properly inside @AgentsView.tsx and @AllAgentsView.tsx",
      "plan": "",
      "context": [
        "src/renderer/screens/AgentsView.tsx",
        "src/renderer/screens/AllAgentsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "c2192f2a-9151-4615-b376-986bb0540042",
      "status": "+",
      "title": "The \"Run Agent\" button should be standardised",
      "description": "The views that should have it updated are:\n@TasksListView.tsx, @TaskDetailsView.tsx.\nIt should be a round play button as is common in music players.",
      "plan": "",
      "context": [
        "src/renderer/tasks/TasksListView.tsx",
        "src/renderer/tasks/TaskDetailsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "0ce98597-907f-4bdf-a5a8-c8e8b253e612",
      "status": "+",
      "title": "Persist locally agent runs",
      "description": "Make sure the history of agent runs is persisted and read when app is started",
      "plan": "",
      "context": [
        "src/renderer/screens/AgentsView.tsx",
        "src/renderer/screens/AllAgentsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "3a11fceb-bb37-4570-a159-2f39622ca364",
      "status": "+",
      "title": "IconDelete",
      "description": "`IconDelete` inside @Icons.tsx needs to actually be a proper delete icon",
      "plan": "",
      "context": [
        "src/renderer/components/ui/Icons.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "4df75808-637f-4841-9d31-b8630b1ac8bf",
      "status": "+",
      "title": "running an agent causes an error when it tries to make a local copy of the project",
      "description": "shouldIgnoreCopy inside @orchestrator.ts should ignore all sorts of files and folders specific to typescript, node, electron.",
      "plan": "",
      "context": [
        "packages/factory-ts/src/orchestrator.ts"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "56b114e3-daee-481b-9c33-329c8eace503",
      "status": "+",
      "title": "Make the Context Files selection better",
      "description": "1) the Add chip becomes huge once there's even just 1 file (it scales in height to match it). That shouldn't be the case.\n2) when the FileSelector opens - it should auto focus into the search input box so a user can start typing right away\n3) in the FileDisplay and FileSelector - instead of showing a generic document icon, let's try to use a meaningful type extension icon - if need be, create a folder with such common icons to use.\n4) The FileDisplay - should show the icon centered to the left. The name in the middle. \nThe file size small at the bottom.\nThe last modification date at the top right.\nAnd the delete button is correct where it is now.",
      "plan": "",
      "context": [
        "src/renderer/components/ui/FileSelector.tsx",
        "src/renderer/components/ui/FileDisplay.tsx",
        "src/renderer/components/ui/FileDisplay.preview.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "ba3e0af6-3a04-4523-90c7-b90b0d37514b",
      "status": "+",
      "title": "If any of a task's features are rejected (showing the exclamation circle) so should the task",
      "description": "The way this displays should follow exactly how Features are displayed inside TaskDetailsView",
      "plan": "",
      "context": [
        "src/renderer/tasks/TaskDetailsView.tsx",
        "src/renderer/tasks/TasksListView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "b2ad0ce4-b71a-40bc-baa7-3550153bef88",
      "status": "+",
      "title": "When running the orchestrator, finding the next feature for a task should be based on the feature index",
      "description": "the Task.featureIdToDisplayIndex is the means by which the features should be sorted for this.",
      "plan": "",
      "context": [
        "packages/factory-ts/src/orchestrator.ts",
        "packages/factory-ts/src/taskUtils.ts"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "67edb097-edf3-4988-939d-30e3fc3007c1",
      "status": "+",
      "title": "Go over all the tasks in this project and update inline file references",
      "description": "in a lot of the tasks a file could've been referenced as:\n@TasksListView.tsx \nor simply\n@TasksListView.tsx\n\nMake sure that these are transformed into the format:\n@Filepath\n\nThen inside @TasksListView.tsx and @TaskDetailsView.tsx, make sure that titles and descriptions for tasks and features show a nice hoverable ui that shows a tooltip about the file. Inside all forms it should just show @Filename so it's easy to edit.",
      "plan": "",
      "context": [
        "src/renderer/tasks/TaskDetailsView.tsx",
        "src/renderer/tasks/TasksListView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "f46696d7-3eee-4f9d-8aee-9419dcee20c9",
      "status": "+",
      "title": "Standardise the Delete, Edit, Add, Create buttons",
      "description": "wherever there's a button that just says Delete we should have it use the standard `DeleteIcon`\nwherever there's a button that just says Add or Create we should have it use the standard `PlusIcon`\nwherever there's a button that just says Edit we should have it use the standard `EditIcon`",
      "plan": "",
      "context": [
        "src/renderer/components/ui/Icons.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "d8361748-2f05-4cd4-bb35-80f40db0ff32",
      "status": "+",
      "title": "Agents - run histories UI improvements",
      "description": "@src/renderer/components/agents/ChatConversation.tsx used inside @src/renderer/screens/AgentsView.tsx should have overly large message texts put in a scrollable textbox.\n\nThe currently running agents in @src/renderer/screens/AgentsView.tsx should follow a similar format as the history of agent runs.\n\n@src/renderer/screens/AllAgentsView.tsx should follow a similar style to @src/renderer/screens/AgentsView.tsx \nTo make things more manageable - a component for the agent row display should be made so it can be reused.",
      "plan": "",
      "context": [
        "src/renderer/screens/AgentsView.tsx",
        "src/renderer/tasks/TasksListView.tsx",
        "src/renderer/components/tasks/DependencyBullet.tsx",
        "src/renderer/components/ui/Icons.tsx",
        "src/renderer/components/agents/ChatConversation.tsx",
        "src/renderer/screens/AllAgentsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "6e24f575-cf4d-451f-994f-7190d45ebaaa",
      "status": "+",
      "title": "Toasts should animate",
      "description": "Toasts need to slide down with an animation when appearing and slide up when hiding.\nThey need to be snappy. It should also be possible to flick them up to make them disappear (like notifications on a mobile device).",
      "plan": "",
      "context": [
        "src/renderer/components/ui/Toast.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "bbc90ba1-4348-4a17-9921-18b6c0ece863",
      "status": "+",
      "title": "Run agent button long press",
      "description": "When the new Run Agent button is long pressed it should show an agent type selector - upon selection it runs with that selected agent. Normal click runs the 'developer' agent like now.",
      "plan": "",
      "context": [
        "src/renderer/components/tasks/RunAgentButton.tsx",
        "src/renderer/tasks/TaskDetailsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "493c32f2-94ab-4677-8cc4-a776249c91e5",
      "status": "+",
      "title": "TaskCard missing RunAgent on hover",
      "description": "@src/renderer/components/tasks/TaskCard.tsx should have the \"Run Agent\" button in the top right.\nSame as in @src/renderer/tasks/TasksListView.tsx if the task has a running agent - show the status.",
      "plan": "",
      "context": [
        "src/renderer/tasks/TasksListView.tsx",
        "src/renderer/components/tasks/TaskCard.tsx",
        "src/renderer/components/tasks/RunAgentButton.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "6a8066ee-230f-4f31-b531-3d8cadff4178",
      "status": "+",
      "title": "ChatsManager should not have any agentic tools - everything should be routed through factory-ts",
      "description": "the factory-ts package should be the one place where all agentic tools are placed - currently @src/chat/manager.js has its own functions. Those should be cleaned up and used appropriately from factory-ts - @packages/factory-ts/src/fileTools.ts or @packages/factory-ts/src/taskUtils.ts for instance.",
      "plan": "",
      "context": [
        "src/chat/manager.js",
        "packages/factory-ts/src/fileTools.ts",
        "packages/factory-ts/src/taskUtils.ts"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "abefc7ba-3098-4aee-a01b-694a5a2a9d43",
      "status": "+",
      "title": "When running an agent - all the GIT credentials are not found in the @.env",
      "description": "There is a .env file both in this project and in factory-ts.\nJust like in the python counterpart ( the files @packages/factory-ts/blueprint/run_local_agent.py and @packages/factory-ts/blueprint/git_manager.py ) the GIT credentials must be loaded from the workspaces `.env` file in the root of the project.",
      "plan": "",
      "context": [
        "packages/factory-ts/src/gitManager.ts",
        "packages/factory-ts/blueprint/run_local_agent.py",
        "packages/factory-ts/blueprint/git_manager.py"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "e9e526e8-576a-448b-9359-db97475db485",
      "status": "+",
      "title": "Agent Run - UI fix",
      "description": "When viewing an agent run inside @src/renderer/screens/AgentsView.tsx it doesn't show the whole conversation. Just the last message. This needs to be fixed to show the full conversation.",
      "plan": "",
      "context": [
        "src/renderer/screens/AllAgentsView.tsx",
        "src/renderer/screens/AgentsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "22793b7c-0bfa-4da4-8b3a-ae07fbe2a0ce",
      "status": "+",
      "title": "FileMentions should be renamed RichText",
      "description": "This component should then be used inside Chat and inside agent runs where messages are displayed.",
      "plan": "",
      "context": [
        "src/renderer/components/ui/FileMentions.tsx",
        "src/renderer/components/agents/ChatConversation.tsx",
        "src/renderer/screens/AllAgentsView.tsx",
        "src/renderer/screens/AgentsView.tsx",
        "src/renderer/screens/ChatView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "894453ef-c700-4128-b714-4ec94498498c",
      "status": "+",
      "title": "No edit button in Tasks and Features",
      "description": "In @src/renderer/tasks/TaskDetailsView.tsx Clicking a feature should open the edit feature form - the edit button shouldn't show.\nIn @src/renderer/screens/TasksView.tsx Tasks already open on click - there should just be no edit button present.",
      "plan": "",
      "context": [
        "src/renderer/components/tasks/FeatureForm.tsx",
        "src/renderer/tasks/FeatureEditView.tsx",
        "src/renderer/tasks/FeatureCreateView.tsx",
        "src/renderer/tasks/TaskDetailsView.tsx",
        "src/renderer/screens/TasksView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "0fea71a8-c0da-48a1-b4ea-c0db2196c902",
      "status": "+",
      "title": "When an agent runs - there's a duplicate history run",
      "description": "The Electron app has its own local history run, but when the agent runs on the copy of the project - it also produces a history run. This shouldn't happen - only the original app where the agent was started should create the history run. To avoid this - the agent should simply have an extra line for these files in its .gitignore file. The histories shouldn't be removed (they were as a first fix attempt).",
      "plan": "",
      "context": [
        "src/tools/factory/mainOrchestrator.js",
        "src/tools/factory/orchestratorBridge.ts",
        "packages/factory-ts/src/orchestrator.ts"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "d5b4852d-df73-4818-8db0-f7d6954c0108",
      "status": "+",
      "title": "The agent persona markdown files are too bloated.",
      "description": "These files contain the tool specs, but those are yet again repeated in the overall tool spec in the orchestrator.\nThese files shouldn't have the list of tools available, but the tool descriptions provided by the orchestrator should contain extra comments as to what each tool does (similarly to how each agent's markdown persona file has it).",
      "plan": "",
      "context": [
        "packages/factory-ts/docs/AGENT_CONTEXTER.md",
        "packages/factory-ts/docs/AGENT_DEVELOPER.md",
        "packages/factory-ts/docs/AGENT_PLANNER.md",
        "packages/factory-ts/docs/AGENT_SPECCER.md",
        "packages/factory-ts/docs/AGENT_TESTER.md",
        "packages/factory-ts/src/orchestrator.ts",
        "src/tools/factory/mainOrchestrator.js"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "b8d93d1d-5c66-4628-8a85-9da0197e97e2",
      "status": "+",
      "title": "The main FILE_ORGANISATION.md is bloated",
      "description": "This file is always included and it contains irrelevant information.\nAgents are asked to update this file, but they seem to always add extra unimportant info.\nThis needs to be tightened and made sure that the instructions for editing the file are clear, and all edits are succinct and precise.\nThe file should contain overall pointers to the project - not detailed descriptions of each file.\nIt should not be a log of changes.",
      "plan": "",
      "context": [
        "packages/factory-ts/docs/AGENT_CONTEXTER.md",
        "packages/factory-ts/docs/AGENT_DEVELOPER.md",
        "packages/factory-ts/docs/AGENT_PLANNER.md",
        "packages/factory-ts/docs/AGENT_SPECCER.md",
        "packages/factory-ts/docs/AGENT_TESTER.md"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "d05e6082-c27c-487f-bacd-837f7f5b7f73",
      "status": "+",
      "title": "Cancelled agent runs are not recorded properly",
      "description": "They don't change any files and are not recorded. They always show as in progress.",
      "plan": "",
      "context": [
        "packages/factory-ts/src/orchestrator.ts",
        "src/tools/factory/mainOrchestrator.js"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "352e49dd-37f2-428c-a85c-da7a2c1bd66a",
      "status": "+",
      "title": "Agent runs should show the model",
      "description": "Create a reusable component - a nice display chip - that shows the provider and model.",
      "plan": "",
      "context": [],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "9244467b-e3d1-475a-a1f0-bf35d8482629",
      "status": "+",
      "title": "The status display for an Agent run inside TasksView.tsx and TaskDetailsView.tsx should match the display from AgentsView.tsx",
      "description": "Reuse the StatusChip inside AgentsView.tsx",
      "plan": "",
      "context": [
        "src/renderer/tasks/TasksListView.tsx",
        "src/renderer/tasks/TaskDetailsView.tsx",
        "src/renderer/screens/AgentsView.tsx",
        "src/renderer/components/agents/StatusChip.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "37730047-f692-48c0-b6e7-9093564596a9",
      "status": "+",
      "title": "In TaskDetailsView.tsx next to the play button show the Agent Model control",
      "description": "This control should show the current active LLM configuration and allow to quickly pick a configuration from the last 5 recent ones + a last option that would take the user to the LLM Configuration settings.",
      "plan": "",
      "context": [
        "src/renderer/tasks/TaskDetailsView.tsx",
        "src/renderer/screens/SettingsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "82b9481c-7129-4bea-8029-0e41a56531fe",
      "status": "+",
      "title": "StatusChip improvements",
      "description": "@src/renderer/components/agents/StatusChip.tsx should only have the badge with an icon inside displaying. The status text should only show on hover as a small tooltip.",
      "plan": "",
      "context": [
        "src/renderer/components/agents/StatusChip.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "2d607668-7481-4d8f-89cc-5afebb89e67b",
      "status": "+",
      "title": "An active run should only show inside Active not History",
      "description": "",
      "plan": "",
      "context": [
        "src/renderer/screens/AgentsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "5fcbee8a-2734-4fa5-b404-6d9155a01053",
      "status": "+",
      "title": "Status and sort preferences are not stored",
      "description": "Whenever the user changes preferences for what to display in the TasksView.tsx in the 'list' mode - it should store that, so at the next session it can be resumed in the same exact state.",
      "plan": "",
      "context": [
        "src/renderer/screens/TasksView.tsx",
        "src/renderer/components/tasks/StatusControl.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "76ff2065-cd03-4815-b36b-8dfabd278b2b",
      "status": "+",
      "title": "Use the StatusChip inside AgentRunBullet",
      "description": "We should reuse this nice component that we have.",
      "plan": "",
      "context": [
        "src/renderer/components/agents/StatusChip.tsx",
        "src/renderer/components/agents/AgentRunBullet.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "46fbca0c-0fd5-4b92-aeae-5e8488cfd192",
      "status": "+",
      "title": "The ModelChip should be slimmer",
      "description": "Have the provider on one row and the modle name on a second row.",
      "plan": "",
      "context": [
        "src/renderer/components/agents/ModelChip.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "5f2a9d3e-dfa3-4e79-ba0b-8b2252556681",
      "status": "+",
      "title": "When editing/creating a feature allow quick file lookups",
      "description": "When a user types in the description and starts typing \"@\" a file lookup search tooltip should show above that will filter files based on what the user types. The user can then select the appropriate file. It should also automatically add this file into the Context Files list.\n\nThis feature is currently implemented seperately inside @src/renderer/screens/ChatView.tsx  and @src/renderer/components/tasks/FeatureForm.tsx \nthe files responsible are:\n@src/renderer/components/ui/FileMentionsTextarea.tsx and @src/renderer/hooks/useFilesAutocomplete.ts   \n\n@src/renderer/screens/ChatView.tsx actually also uses @src/renderer/hooks/useReferencesAutocomplete.ts which allows the text input to display references. Both of these ideas are relevant for @src/renderer/components/tasks/FeatureForm.tsx and @src/renderer/screens/ChatView.tsx . Both should allow the display of references lookup and file lookup - they simply must be able to have callbacks so that they can do extra things with them (FeatureForm needs to add/remove files to/from the context and add/remove blockers to/from the feature - this is missing right now).",
      "plan": "",
      "context": [
        "src/renderer/screens/ChatView.tsx",
        "src/renderer/components/ui/FileMentionsTextarea.tsx",
        "src/renderer/hooks/useFilesAutocomplete.ts",
        "src/renderer/hooks/useReferencesAutocomplete.ts",
        "src/renderer/components/tasks/FeatureForm.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "7dd2e06b-32aa-418b-9e32-5efc0ecd94dd",
      "status": "+",
      "title": "The search and sort bar for features should be placed at the top",
      "description": "TaskDetailsView.tsx should follow TasksView.tsx",
      "plan": "",
      "context": [
        "src/renderer/screens/TasksView.tsx",
        "src/renderer/tasks/TaskDetailsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "274eb915-a7b3-4eed-b71d-e7888f1340fb",
      "status": "+",
      "title": "ChatConversation improvements",
      "description": "@src/renderer/components/agents/ChatConversation.tsx  is currently broken - there was a new type AgentFeatureRunLog introduced inside AgentRun in the file @src/renderer/services/agentsService.ts . Adapt everything in ChatConversation to make it work. Display a list of features in an AgentRun, each Feature run showing the 'turns'. After the first initial message, each turn is a series of 2 messages - 1 from the LLM and 1 a response with tool calls. The final message is a single one from the LLM. Make sure the orchestrator works correctly too.",
      "plan": "",
      "context": [
        "src/renderer/components/agents/ChatConversation.tsx",
        "packages/factory-ts/src/types.ts",
        "src/renderer/services/agentsService.ts",
        "src/renderer/screens/ChatView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "26d01bef-ce79-498a-9cc8-7a6ada530002",
      "status": "+",
      "title": "Reference and File lookup usability improvements",
      "description": "When the user types # for references and @ for files to be looked up in the @src/renderer/components/ui/FileMentionsTextarea.tsx if the user presses space while the lookup is showing - auto pick the top result.\nAlso, for references - they should always display in the text as #{task_index}.{feature_index} - the user will most likely search for the features by these indices.",
      "plan": "",
      "context": [
        "src/renderer/components/ui/FileMentionsTextarea.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "5f13e562-bbd6-4f67-97c9-00ba79ddb138",
      "status": "+",
      "title": "After running a first agent, running any more stalls",
      "description": "Any consecutive agent after the first never starts.\nCancelling an agent from the @src/renderer/screens/AgentsView.tsx   screen doesn't help either.\n\nThe last message in the log is:\n[factory] SUBSCRIBE\n\nI can see this message in the agent run log:\n\"message\": \"Error: ENOENT: no such file or directory, open '/var/folders/25/4dns7s115_q13z992np622qw0000gn/T/factory-ts-A3L8P3/workspace/projects/main.json'\\n    at async open (node:internal/fs/promises:639:25)\\n    at async Object.readFile (node:internal/fs/promises:1243:14)\\n    at async Object.getProjectDir (file:///packages/factory-ts/dist/taskUtils.js:18:17)\\n    at async runIsolatedOrchestrator (file:///Users/cloud/Documents/Work/TheFactory/projects/overseer-local/packages/factory-ts/dist/orchestrator.js:489:24)\\n    at async file:///packages/factory-ts/dist/index.js:197:17\",\n\n\nAnd I can see a warning in the console:\nMaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 files:subscribe listeners added.",
      "plan": "",
      "context": [
        "src/renderer/screens/AgentsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "57988106-364d-4e52-8b50-94d18839c319",
      "status": "+",
      "title": "ChatConversation improvements",
      "description": "@src/renderer/components/agents/ChatConversation.tsx  doesn't update while an agent is running. I have to close the popup and open it to see the latest messages. This shouldn't be the case - it should keep on scrolling down the messages if the user is at the bottom, and if not - keep on adding them.",
      "plan": "",
      "context": [
        "src/renderer/components/agents/ChatConversation.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "dc067730-dede-40a5-affe-e04410170819",
      "status": "+",
      "title": "AgentsView and AllAgentsView improvements",
      "description": "In  @src/renderer/screens/AgentsView.tsx  the active and history runs should be sorted by date - the most recent at the top\n\nAlso, both in @src/renderer/screens/AgentsView.tsx and in @src/renderer/screens/AllAgentsView.tsx it shouldn't show the Turn column, but instead show how many features were completed out of how many.\n\nIn @src/renderer/screens/AgentsView.tsx in the active runs, there should be no Status column, but an additional Thinking column before duration that should update with the time the agent is taking to answer the last message.",
      "plan": "",
      "context": [
        "src/renderer/screens/AgentsView.tsx",
        "src/renderer/screens/AllAgentsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "fd101477-cb98-4d87-90c4-efb87f39c5e6",
      "status": "+",
      "title": "Allow moving tasks when in 'not-done'",
      "description": "Pay close attention to what the index should be (remember the display index is always +1 due to starting at 1)\n@src/renderer/screens/TasksView.tsx\n\nIt should be also possible to move features in @src/renderer/tasks/TaskDetailsView.tsx also pay attention to the indices.",
      "plan": "",
      "context": [
        "src/renderer/screens/TasksView.tsx",
        "src/renderer/tasks/TaskDetailsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "e3d6999d-3dcd-4f28-8452-77daa5b9cab2",
      "status": "+",
      "title": "After closing the app and coming back none of the agent run histories show messages properly",
      "description": "It seems there's an issue with the way the messages are serialized in @packages/factory-ts/src/orchestrator.ts , the display is in @src/renderer/components/agents/ChatConversation.tsx . Remember, the messages that are passed onto the LLM are in a strict format - they have to specify role as 'user'. For history purposes, the serialisation should add appropraite metadata information to make it easier to display later.",
      "plan": "",
      "context": [
        "packages/factory-ts/src/orchestrator.ts",
        "src/renderer/components/agents/ChatConversation.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "306733d4-26cb-49c0-a0ff-c34dc7699baa",
      "status": "+",
      "title": "Shortcuts in the app were disabled because they interfered with typing in the \"/\" character",
      "description": "A user must be able to specify which key is the modifier key in settings - @src/renderer/screens/SettingsView.tsx . Bring back the shortcuts - @src/renderer/App.tsx",
      "plan": "",
      "context": [
        "src/renderer/screens/SettingsView.tsx",
        "src/renderer/App.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "5e9f9a8e-0a8b-44d3-936d-05ca62f981f6",
      "status": "+",
      "title": "When no features are in a task - the default agent type is \"speccer\"",
      "description": "This should be true no matter where it is run from, right now it's only via @src/renderer/components/tasks/RunAgentButton.tsx",
      "plan": "",
      "context": [
        "src/renderer/components/tasks/RunAgentButton.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "f9eef18e-818e-427d-82ab-8d990bb199c4",
      "status": "+",
      "title": "This feature is index 1 - we should have a special quick command wherever in the app for adding a feature to this task only",
      "description": "",
      "plan": "",
      "context": [],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "df22d856-9aa3-4c10-9e91-04291697e0b8",
      "status": "+",
      "title": "Notifications should fire when an agent finishes work",
      "description": "Also when a feature is completed (i.e. a commit is made).\nThe @src/renderer/services/notificationsService.ts is responsible as well @src/notifications/manager.js    \n\nThese should be toggle'able in @src/renderer/screens/SettingsView.tsx",
      "plan": "",
      "context": [
        "src/renderer/screens/SettingsView.tsx",
        "src/renderer/services/notificationsService.ts",
        "src/notifications/manager.js"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "9b65af17-0a3d-42e4-bcd2-81b65277651c",
      "status": "+",
      "title": "It must be possible to remove agent runs from history",
      "description": "The agent runs in @src/renderer/screens/AgentsView.tsx or in @src/renderer/screens/AllAgentsView.tsx",
      "plan": "",
      "context": [
        "src/renderer/screens/AgentsView.tsx",
        "src/renderer/screens/AllAgentsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "583f4582-9495-46cc-bd49-19c957b9b0a3",
      "status": "+",
      "title": "There needs to be an edit button next to the button for new task",
      "description": "This is inside @src/renderer/tasks/TaskDetailsView.tsx - it must be possible to edit a task from within this view. Deleting a task here, would take the user back to Home.",
      "plan": "",
      "context": [
        "src/renderer/tasks/TaskDetailsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "065ff2fe-ac0a-4b31-b57f-8918dcb4057c",
      "status": "+",
      "title": "Show a summary of running agents per project in the sidebar",
      "description": "This should also be visible when the sidebar is minimized - it should show the project icon and this new chip that would display the number of agents.\n@src/renderer/navigation/SidebarView.tsx",
      "plan": "",
      "context": [
        "src/renderer/navigation/SidebarView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "3c0c391d-fe56-4add-a756-793dd2dc6246",
      "status": "+",
      "title": "It must be possible to select the icon for a given project",
      "description": "Create a directory of helpful icons and allow a user to pick from one when they create or edit a project @src/renderer/projects/ProjectManagerModal.tsx - this is then shown in the @src/renderer/navigation/SidebarView.tsx",
      "plan": "",
      "context": [
        "src/renderer/navigation/SidebarView.tsx",
        "src/renderer/projects/ProjectManagerModal.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "6deecb2f-1e0c-4e0c-8f4d-349a18c02e18",
      "status": "+",
      "title": "AgentsView shows the thinking time incorrectly",
      "description": "When the 'run/heartbeat' event is received from @packages/factory-ts/src/orchestrator.ts it seems to make the display reset the thinking time counter. The counter should be purely based on the time the last message was received and the time now. This is for @src/renderer/components/agents/AgentRunRow.tsx",
      "plan": "",
      "context": [
        "packages/factory-ts/src/orchestrator.ts",
        "src/renderer/components/agents/AgentRunRow.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "1e6d13dd-e154-4612-8751-7182a7d660e6",
      "status": "+",
      "title": "Lookup fix",
      "description": "When using the file lookup when typing in @ in the description of a feature, the user has to type in space twice or more for it to allow to type further. One space should be enough, and it should put the caret one space further than the filename. This logic is in @src/renderer/hooks/useFilesAutocomplete.ts and displayed in @src/renderer/components/ui/RichText.tsx",
      "plan": "",
      "context": [
        "src/renderer/hooks/useFilesAutocomplete.ts",
        "src/renderer/components/ui/RichText.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "7cd60fb3-fe0f-478f-ac17-915b824f7f65",
      "status": "+",
      "title": "Task lookup fix",
      "description": "When using task lookup, it doesn't allow the user to search by typing in \"1.1\" for instance. The moment the user types in the \".\" the dropdown disappears. The logic is in @src/renderer/hooks/useReferencesAutocomplete.ts and used inside @src/renderer/components/ui/RichText.tsx \n\nAlso, when typing in \"#8\" for instance - it incorrectly references the blocker - the user types in the reference, but the blocker should actually hold the proper id information (so reverse lookup must be done).",
      "plan": "",
      "context": [
        "src/renderer/hooks/useReferencesAutocomplete.ts",
        "src/renderer/components/ui/RichText.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "8d6c71e6-f74b-4155-bdd2-56baa2bbd40a",
      "status": "+",
      "title": "when switching views - the prefs for which view is stored in TasksView is lost",
      "description": "When switching screens from the @src/renderer/screens/TasksView.tsx to any other of the screens in the @src/renderer/navigation/SidebarView.tsx it resets the previous status selection and sorting selection. This shouldn't happen - these preferences must be kept.",
      "plan": "",
      "context": [
        "src/renderer/screens/TasksView.tsx",
        "src/renderer/navigation/SidebarView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "006bc18d-88c6-4257-9d76-69ad87c9c502",
      "status": "+",
      "title": "Typing in \"?\" shows the help menu",
      "description": "The user has to click Shift+\"?\" and it shows the help menu - it should do that for Shift+\"H\".\nAll these shortcuts, along the modifier key should be configurable in @src/renderer/screens/SettingsView.tsx",
      "plan": "",
      "context": [
        "src/renderer/screens/SettingsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "75e8b34f-8e44-4bac-9c9a-26c0dfb17224",
      "status": "+",
      "title": "when searching commands in the search input box in CommandMenu.tsx it must be possible to use arrows to go up/down and select the appropriate command",
      "description": "The input box inside @src/renderer/components/ui/CommandMenu.tsx \n should be a single line input - so the user cannot go up and down in there. Using up and down arrows selects different items in the results list below the input box.\nSo the user types in \"Go\", the results filter all the results for that and its possible to select whichever result the user wants and hit enter to activate it.\nThe first time up is pressed - the bottom result should be selected.\nThe first time down is pressed - the top result should be selected.\nOnce something is selected, but the user types more - just keep the selection within min/max of 0 and results length -1",
      "plan": "",
      "context": [
        "src/renderer/components/ui/CommandMenu.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "35d46d98-8f89-483a-9470-e2e615fd41a9",
      "status": "+",
      "title": "Tooltip accessibility and robustness improvements",
      "description": "Make Tooltip component ARIA-correct and safe for multiple instances.\n\nImplementation details (src/renderer/components/ui/Tooltip.tsx):\n- Generate a unique id per tooltip instance (e.g., useId) and assign it to the tooltip element; set anchor 'aria-describedby' to that id when open.\n- Remove hardcoded 'aria-describedby'='tooltip'.\n- Add Escape key handling to hide when focused on the anchor.\n- Ensure role=tooltip and correct z-index are preserved.\n\nAcceptance criteria:\n- Two adjacent buttons using Tooltip both show their own content and 'aria-describedby' points to their unique tooltip id when open.\n- Pressing Escape while the anchor has focus hides the tooltip.\n- No duplicate id usage across multiple tooltip instances.",
      "plan": "",
      "context": [],
      "acceptance": []
    },
    {
      "id": "e358e778-5d29-492a-8943-e67e31b45833",
      "status": "+",
      "title": "Modal accessibility: aria-labelledby/aria-describedby and scroll lock",
      "description": "Improve Modal semantics and body scroll behavior.\n\nImplementation details (src/renderer/components/ui/Modal.tsx):\n- Give the title element a unique id and wire 'aria-labelledby' on the dialog to that id when title exists.\n- Allow optional description id wiring via 'aria-describedby' (useful from AlertDialog when description is provided).\n- Lock body scrolling while a modal is open (set document.body.style.overflow='hidden') and restore on close/unmount.\n\nAcceptance criteria:\n- Screen readers announce the modal title and description upon opening.\n- While a modal is open, the page behind it cannot scroll; once closed, body scrolling returns to its previous state.\n- Existing focus trapping and Escape behavior remain intact.",
      "plan": "",
      "context": [],
      "acceptance": []
    },
    {
      "id": "27201172-7e31-4e3b-bf06-eb1737ddfadb",
      "status": "+",
      "title": "Dynamic modifier glyphs in shortcuts UI and command menu",
      "description": "Render keyboard shortcuts using the user-selected modifier (Cmd vs Ctrl) consistently.\n\nImplementation details:\n- Enhance src/renderer/hooks/useShortcuts.tsx to expose a read-only getter for the current modifier (e.g., export function getShortcutsModifier(): 'meta' | 'ctrl').\n- Update src/renderer/components/ui/ShortcutsHelp.tsx and src/renderer/components/ui/CommandMenu.tsx to format displayed shortcuts based on the current modifier, replacing hardcoded 'Cmd/Ctrl' strings (e.g., show '⌘K' on mac modifier and 'Ctrl+K' otherwise).\n\nAcceptance criteria:\n- Changing the shortcuts modifier in app settings (after reload, consistent with current provider behavior) updates the displayed shortcut glyphs in ShortcutsHelp and CommandMenu.\n- All visible shortcut hints reflect the correct modifier (no \"Cmd/Ctrl\" placeholders).",
      "plan": "",
      "context": [],
      "acceptance": []
    },
    {
      "id": "98cc6216-a675-40cb-b763-5ac3ccc98b65",
      "status": "+",
      "title": "CollapsibleSidebar semantics: use buttons for actionable items",
      "description": "Improve navigation item semantics for better accessibility.\n\nImplementation details (src/renderer/components/ui/CollapsibleSidebar.tsx):\n- Replace the inner div with role=\"button\" for each clickable nav item with an actual <button> element, preserving current classes and event handlers.\n- Keep roving tabindex behavior and keyboard activation (Enter/Space) intact, but rely on native button semantics.\n- Ensure aria-current or aria-selected is still used appropriately.\n\nAcceptance criteria:\n- Keyboard navigation (ArrowUp/ArrowDown/Home/End + Enter/Space activation) works as before.\n- Screen readers announce items as buttons within navigation; no loss of functionality.\n- No regression in compact/collapsed behavior and badges/actions rendering.",
      "plan": "",
      "context": [],
      "acceptance": []
    },
    {
      "id": "a940d772-c613-427c-9dd4-88984e9f24ec",
      "status": "+",
      "title": "TasksListView: skeletons for initial loading state",
      "description": "Replace text-only loading state with skeleton placeholders for a smoother UX.\n\nImplementation details (src/renderer/tasks/TasksListView.tsx):\n- When isAppSettingsLoaded is false, render a list of ~6 skeleton rows using src/renderer/components/ui/Skeleton.tsx to approximate task rows' layout (id/status area, title/desc lines, and actions area blocks).\n- Keep current \"Loading settings…\" live region messaging accessible (aria-live politely) in the count area.\n\nAcceptance criteria:\n- Before settings are loaded, task area shows skeleton placeholders instead of a static 'Loading...' string.\n- Once loaded, skeletons disappear and the real content renders.\n- No layout shift beyond expected content replacement.",
      "plan": "",
      "context": [],
      "acceptance": []
    },
    {
      "id": "50188f39-ce56-4087-90fb-70a107a7357f",
      "status": "+",
      "title": "Consistent focus-visible styling on interactive elements",
      "description": "Ensure keyboard users see a consistent focus outline across buttons, nav items, and inputs.\n\nImplementation details:\n- Update CSS (src/index.css) to provide a consistent :focus-visible ring/outline for .btn, .btn-secondary, .btn-icon, .nav-item, .nav-toggle, .nav-trigger, .ui-select trigger, inputs, and other clickable UI controls.\n- Do not override focus when using mouse; rely on :focus-visible.\n\nAcceptance criteria:\n- Tabbing through the UI shows clear, consistent focus outlines on all interactive controls mentioned.\n- Mouse users do not see focus outlines unless they keyboard-focus an element (focus-visible behavior).",
      "plan": "",
      "context": [],
      "acceptance": []
    },
    {
      "id": "9fb948d2-235d-4322-9462-93a9ca8ce283",
      "status": "+",
      "title": "New section in settings - configuring WebSearch Api keys for exa, serpapi and tavily",
      "description": "This must be a new options section in @src/renderer/screens/SettingsView.tsx .\nIt must be persisted and the user can put in a key for each of the tools and save it.",
      "context": [
        "src/renderer/screens/SettingsView.tsx"
      ],
      "blockers": []
    },
    {
      "id": "8acda51f-97c8-4614-8800-cb2d7607bf16",
      "status": "+",
      "title": "Use the configuration of WebSearch api keys - exa, serpapi and tavily",
      "description": "We are storing the api keys to these inside @src/renderer/screens/SettingsView.tsx - we need to use them in  'thefactory-tools' that has webSearch tooling.\nThe places where these new apiKeys can be provided is inside @src/chat/ChatsManager.js when calling 'buildChatTools' inside 'getCompletion'; and in @src/tools/factory/mainOrchestrator.js when calling 'orchestrator.startRun' .",
      "plan": "",
      "context": [
        "src/renderer/screens/SettingsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "bb3a99c3-4e37-47ae-b3df-4b6f5317faed",
      "status": "+",
      "title": "New Section in Settings - configuring github credentials",
      "description": "This must be a new options section in @src/renderer/screens/SettingsView.tsx .\nIt must be persisted and the user can put in a username and a personal token.\nIt has to be persisted across sessions.",
      "plan": "",
      "context": [],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "ada1bb79-e120-493b-b0ba-13d11951b42b",
      "status": "+",
      "title": "LiveData providers are project specific or global",
      "description": "Make it possible to configure a LiveDataProvider as global or targeting  the project it's being made in - the views are in @src/renderer/screens/LiveDataView.tsx .\nCurrently we have the Agent prices provider - this should be global, as it gets the prices that all LLM agent runs use to show the cost per token.\nThere's a 2nd provider currently configured for this project - the BTC price getter - that one should be specific to this project (Overseer Local).\nResponsible classes are:\n@src/renderer/hooks/useLiveData.tsx and @src/renderer/services/liveDataService.ts",
      "plan": "",
      "context": [
        "src/renderer/screens/LiveDataView.tsx",
        "src/renderer/hooks/useLiveData.tsx",
        "src/renderer/services/liveDataService.ts"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "270271e3-5a53-45ed-9c31-131e9bb4f36b",
      "status": "+",
      "title": "Loading screen",
      "description": "We need a loading screen that will show at the beginning of app launch, while all necessary things are being loaded. This needs to be a separate screen - placed under `src/renderer/screens` just like @src/renderer/screens/TasksView.tsx . The app entry is in @src/renderer/App.tsx .\nFor the time being - make sure the loading screen loads the user preferences and app settings - @src/renderer/hooks/useAppSettings.ts",
      "plan": "",
      "context": [
        "src/renderer/screens/TasksView.tsx",
        "src/renderer/App.tsx",
        "src/renderer/hooks/useAppSettings.ts"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "8eb99cfc-6aeb-4f17-ae04-73621bdd63ce",
      "status": "+",
      "title": "when switching projects - go to the base of a given screen",
      "description": "Right now when viewing a task and switching projects - it shows that task from the new project's perspective which isn't found.\nWe need to make sure that in such cases we go to the main sidebar screen - in the task example - @src/renderer/tasks/TasksListView.tsx .\n@src/renderer/navigation/SidebarView.tsx is where we switch projects.",
      "plan": "",
      "context": [
        "src/renderer/tasks/TasksListView.tsx",
        "src/renderer/navigation/SidebarView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "943be0ce-0c96-48ab-a820-37b919b9a150",
      "status": "+",
      "title": "AppSettings needs an AppSettingsContext",
      "description": "Same as @src/renderer/contexts/ProjectContext.tsx , created in @src/renderer/App.tsx ; and then used in @src/renderer/hooks/useProjectSettings.ts we need the same exact approach for @src/renderer/hooks/useAppSettings.ts . It essentially needs to be a singleton used across the project and this will make sure that's the case.\nAppSettings should be such a context of the first level.",
      "plan": "",
      "context": [
        "src/renderer/contexts/ProjectContext.tsx",
        "src/renderer/hooks/useProjectSettings.ts",
        "src/renderer/App.tsx",
        "src/renderer/hooks/useAppSettings.ts"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "76a35a14-e633-4f4a-827f-f7521123176d",
      "status": "+",
      "title": "useLLMConfig should be an app wide context",
      "description": "Make @src/renderer/hooks/useLLMConfig.ts follow the same pattern as @src/renderer/contexts/AppSettingsContext.tsx and @src/renderer/contexts/ProjectContext.tsx to turn it into a context initialised once in @src/renderer/App.tsx",
      "plan": "",
      "context": [
        "src/renderer/hooks/useLLMConfig.ts",
        "src/renderer/contexts/AppSettingsContext.tsx",
        "src/renderer/contexts/ProjectContext.tsx",
        "src/renderer/App.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "032e4535-7d44-4654-bc6d-811d395b0285",
      "status": "+",
      "title": "turn useAgents into a context",
      "description": "Make @src/renderer/hooks/useAgents.ts .ts follow the same pattern as @src/renderer/contexts/AppSettingsContext.tsx  and @src/renderer/contexts/ProjectContext.tsx  to turn it into a context initialised once in @src/renderer/App.tsx",
      "plan": "",
      "context": [
        "src/renderer/hooks/useAgents.ts",
        "src/renderer/contexts/AppSettingsContext.tsx",
        "src/renderer/contexts/ProjectContext.tsx",
        "src/renderer/App.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "fc49d90d-6345-4744-aa82-060d025051d0",
      "status": "?",
      "title": "chatsManager improve tool calling",
      "description": "Improve the whole completion and tool calling on thefactory-tools side.\nRight now we can pass 'tools' as an argument, but then the LLM responds in a completely different format { role, tool_calls } - no content.",
      "plan": "",
      "context": [],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "d621c45b-3c4c-4814-81bd-7f1a1e25f6f0",
      "status": "+",
      "title": "turn useFiles into context",
      "description": "Make @src/renderer/hooks/useFiles.tsx follow the same pattern as @src/renderer/contexts/AppSettingsContext.tsx   and @src/renderer/contexts/ProjectContext.tsx   to turn it into a context initialised once in @src/renderer/App.tsx .",
      "plan": "",
      "context": [
        "src/renderer/hooks/useFiles.tsx",
        "src/renderer/App.tsx",
        "src/renderer/contexts/ProjectContext.tsx",
        "src/renderer/contexts/AppSettingsContext.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "0f44a2c4-5988-4b86-94d9-38b2ade0a037",
      "status": "+",
      "title": "turn useTasks into a context",
      "description": "Make @src/renderer/hooks/useTasks.tsx follow the same pattern as @src/renderer/contexts/AppSettingsContext.tsx    and @src/renderer/contexts/ProjectContext.tsx    to turn it into a context initialised once in @src/renderer/App.tsx  .",
      "plan": "",
      "context": [
        "src/renderer/hooks/useTasks.tsx",
        "src/renderer/contexts/AppSettingsContext.tsx",
        "src/renderer/contexts/ProjectContext.tsx",
        "src/renderer/App.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "f8dbb257-f348-48ec-8af2-bbb92fc6a1e0",
      "status": "+",
      "title": "Allow rating of runs",
      "description": "In @src/renderer/screens/AgentsView.tsx there needs to be a new column 'rating' left to the actions buttons.\nIf an 'AgentRunHistory' doesn't have a rating, it shows two buttons (vertically stacked) - a thumbs up and a thumbs down - that are hollow icons. On hover, they are filled with color (green for up and red for down). When clicking, it needs to call via @src/renderer/contexts/AgentsContext.tsx the 'rateRun' functions from @src/renderer/services/factoryService.ts . Once a run has a rating (1 for up, 0 for down), it should only show the filled in button displaying the rating. If a user clicks a rating that was done - it will remove the rating.",
      "plan": "",
      "context": [
        "src/renderer/screens/AgentsView.tsx",
        "src/renderer/contexts/AgentsContext.tsx",
        "src/renderer/services/factoryService.ts"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "12e26fae-357e-44cb-b1d6-ac8b9ba2c439",
      "status": "+",
      "title": "Model statistics",
      "description": "In @src/renderer/screens/AllAgentsView.tsx we need to display statistics per model and per project. We don't need to display all the runs like it is showing right now - that's already shown in each project's individual @src/renderer/screens/AgentsView.tsx .\n\nStatistics we require - overall average costs that are shown now.\n\nOverall cheapest model on average, overall most expensive model on average, overall fastest model on average (per feature duration), overall slowest model on average (per feature duration), overall model with highest average rating, overall model with lowest average rating.\n\nJust the same as all these overall stats - we want to display the same per project.\n\nAll in a nice scrollable table similar to what's already shown right now.",
      "plan": "",
      "context": [
        "src/renderer/screens/AllAgentsView.tsx",
        "src/renderer/screens/AgentsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "60237404-0b90-4663-9ed3-de9db2d77354",
      "status": "+",
      "title": "Apply formatter on save",
      "description": "When using VSCode and saving a file the project needs to auto apply a formatter so that all code is always in the same style.\nWe also need to have a script under /scripts that can be run on all files to make sure they have the format applied.",
      "plan": "",
      "context": [],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "2c41b67b-2bd2-4a6a-b7ef-5b2bd97380cb",
      "status": "+",
      "title": "Apply formatter on git commit",
      "description": "Whenever a commit happens - it needs to have a formatter be applied before the code ends up being pushed or seen by other users.",
      "plan": "",
      "context": [],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "af06b354-ef07-4764-8be3-2f731e9aad33",
      "status": "+",
      "title": "AllAgents statistics rework",
      "description": "In @src/renderer/screens/AllAgentsView.tsx there needs to be a few improvements:\n1) the overall section should be the top row of the \"Projects statistics\" section. It should have a blueish background to make it stand out from the project ones.\n2) Move the \"Projects statistics\" above \"Model statistics\"\n3) Make the \"Model statistics\" match \"Projects statistics in terms of columns as much as possible\n4) Add a section \"Agents statistics\" that similarly to per project stats will have the same breakdown but per agentType.\n5) Replace the active runs item from the top with a total time spent by agents.",
      "plan": "",
      "context": [
        "src/renderer/screens/AllAgentsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "34c83d4f-078d-45c3-b85a-e701f1d82f3a",
      "status": "+",
      "title": "AllAgentsView rework",
      "description": "In @src/renderer/screens/AllAgentsView.tsx we need to rework the following:\n1) remove the Overall highlights\n2) the projects statistics:\n- the Overall row (the 1st one) needs to have a light blue background.\n3) all sections:\n - Fastest (per feature), Slowest (per feature) columns, should have the text on 2 lines. The second line saying \"(pre feature)\"\n- The values for columns showing a model chip + cost should have them vertically stacked, so the model chip first and below it the cost.\n4) at the top, remove the avg cost per run - add instead a total tasks/features worked on",
      "plan": "",
      "context": [
        "src/renderer/screens/AllAgentsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "05393210-77ab-4301-8243-accf0edac8d5",
      "status": "+",
      "title": "Make the app icon work",
      "description": "There's an icon included 'icon.jpeg' in the root of this project.\nMake it work as the app's icon.",
      "plan": "",
      "context": [],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "ea8dc9a0-203e-42c6-ab4d-70db372c0003",
      "status": "+",
      "title": "Cleanup the SettingsView",
      "description": "The @src/renderer/screens/SettingsView.tsx is currently overloaded by its sub views.\nEach subview should be in its own separate folder as it serves as a separate main view. Refactor it cleanly.",
      "plan": "",
      "context": [
        "src/renderer/screens/SettingsView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "85914410-3864-43fa-8317-b90dedc12ce0",
      "status": "+",
      "title": "Managers.js could be typed",
      "description": "@src/managers.js could be turned into a typescript file so that we can use all the typing niceties also in all of the managers:\n@src/chat/ChatsManager.js , @src/db/DatabaseManager.js , @src/document_ingestion/DocumentIngestionManager.js , @src/factory-tools/FactoryToolsManager.js , @src/files/FilesManager.js , @src/git-monitor/GitMonitorManager.js , @src/live-data/liveDataManager.js , @src/notifications/NotificationsManager.js , @src/tasks/TasksManager.js  , @src/projects/ProjectsManager.js  , @src/settings/SettingsManager.js",
      "plan": "",
      "context": [
        "src/managers.js",
        "src/chat/ChatsManager.js",
        "src/db/DatabaseManager.js",
        "src/document_ingestion/DocumentIngestionManager.js",
        "src/factory-tools/FactoryToolsManager.js",
        "src/files/FilesManager.js",
        "src/git-monitor/GitMonitorManager.js",
        "src/live-data/liveDataManager.js",
        "src/notifications/NotificationsManager.js",
        "src/settings/SettingsManager.js",
        "src/tasks/TasksManager.js",
        "src/projects/ProjectsManager.js"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "74d5f63b-8797-43f5-b571-fd5bebf56550",
      "status": "-",
      "title": "Replace all the emoji icons in the Sidebar with icons specific to this project",
      "description": "They should all reside alongside other icons in @src/renderer/components/ui/Icons.tsx .\nUpdate @src/renderer/components/ui/CollapsibleSidebar.tsx and @src/renderer/navigation/SidebarView.tsx .\nKeep it according to style defined in @docs/styleguide/README.md  and @docs/design/DESIGN_SYSTEM.md , @docs/design/DESIGN_TOKENS.md , @docs/design/MONDAY_PALETTE_REFERENCE.md  and @docs/ux/LINEAR_UX_GUIDELINES.md",
      "plan": "",
      "context": [
        "src/renderer/components/ui/Icons.tsx",
        "docs/styleguide/README.md",
        "docs/design/DESIGN_SYSTEM.md",
        "docs/design/DESIGN_TOKENS.md",
        "docs/design/MONDAY_PALETTE_REFERENCE.md",
        "docs/ux/LINEAR_UX_GUIDELINES.md",
        "src/renderer/components/ui/CollapsibleSidebar.tsx",
        "src/renderer/navigation/SidebarView.tsx"
      ],
      "acceptance": [],
      "blockers": []
    },
    {
      "id": "53ab6181-9034-47f0-a6a9-a8b8eca0e504",
      "status": "-",
      "title": "All the domain managers could be typed",
      "description": "All of the managers could be typed and extend the base defined in @src/managers.ts . The managers:\n@src/chat/ChatsManager.js  , @src/db/DatabaseManager.js  , @src/document_ingestion/DocumentIngestionManager.js  , @src/factory-tools/FactoryToolsManager.js  , @src/files/FilesManager.js  , @src/git-monitor/GitMonitorManager.js  , @src/live-data/liveDataManager.js  , @src/notifications/NotificationsManager.js  , @src/tasks/TasksManager.js   , @src/projects/ProjectsManager.js   , @src/settings/SettingsManager.js",
      "plan": "",
      "context": [
        "src/managers.ts",
        "src/chat/ChatsManager.js",
        "src/db/DatabaseManager.js",
        "src/document_ingestion/DocumentIngestionManager.js",
        "src/factory-tools/FactoryToolsManager.js",
        "src/files/FilesManager.js",
        "src/git-monitor/GitMonitorManager.js",
        "src/live-data/liveDataManager.js",
        "src/notifications/NotificationsManager.js",
        "src/tasks/TasksManager.js",
        "src/projects/ProjectsManager.js",
        "src/settings/SettingsManager.js"
      ],
      "acceptance": [],
      "blockers": []
    }
  ],
  "featureIdToDisplayIndex": {
    "0964b90b-396a-43b0-9f4a-a60d0034360e": 1,
    "56b114e3-daee-481b-9c33-329c8eace503": 2,
    "ba3e0af6-3a04-4523-90c7-b90b0d37514b": 3,
    "98c76bd6-8c5c-4aaf-a778-54f5f57f679a": 4,
    "4df75808-637f-4841-9d31-b8630b1ac8bf": 5,
    "8ed1e913-44e2-4321-a631-f1c2c9033177": 6,
    "a480aa54-f697-409d-95a7-1b369c3da9ff": 7,
    "b2ad0ce4-b71a-40bc-baa7-3550153bef88": 8,
    "0ce98597-907f-4bdf-a5a8-c8e8b253e612": 9,
    "3a11fceb-bb37-4570-a159-2f39622ca364": 10,
    "c2192f2a-9151-4615-b376-986bb0540042": 11,
    "f46696d7-3eee-4f9d-8aee-9419dcee20c9": 12,
    "67edb097-edf3-4988-939d-30e3fc3007c1": 13,
    "493c32f2-94ab-4677-8cc4-a776249c91e5": 14,
    "e9e526e8-576a-448b-9359-db97475db485": 15,
    "abefc7ba-3098-4aee-a01b-694a5a2a9d43": 16,
    "22793b7c-0bfa-4da4-8b3a-ae07fbe2a0ce": 17,
    "d8361748-2f05-4cd4-bb35-80f40db0ff32": 18,
    "bbc90ba1-4348-4a17-9921-18b6c0ece863": 19,
    "6e24f575-cf4d-451f-994f-7190d45ebaaa": 20,
    "894453ef-c700-4128-b714-4ec94498498c": 21,
    "d5b4852d-df73-4818-8db0-f7d6954c0108": 22,
    "b8d93d1d-5c66-4628-8a85-9da0197e97e2": 23,
    "9244467b-e3d1-475a-a1f0-bf35d8482629": 24,
    "352e49dd-37f2-428c-a85c-da7a2c1bd66a": 25,
    "37730047-f692-48c0-b6e7-9093564596a9": 26,
    "0fea71a8-c0da-48a1-b4ea-c0db2196c902": 27,
    "d05e6082-c27c-487f-bacd-837f7f5b7f73": 28,
    "2d607668-7481-4d8f-89cc-5afebb89e67b": 29,
    "5fcbee8a-2734-4fa5-b404-6d9155a01053": 30,
    "76ff2065-cd03-4815-b36b-8dfabd278b2b": 31,
    "7dd2e06b-32aa-418b-9e32-5efc0ecd94dd": 32,
    "46fbca0c-0fd5-4b92-aeae-5e8488cfd192": 33,
    "5f2a9d3e-dfa3-4e79-ba0b-8b2252556681": 34,
    "274eb915-a7b3-4eed-b71d-e7888f1340fb": 35,
    "26d01bef-ce79-498a-9cc8-7a6ada530002": 36,
    "6a8066ee-230f-4f31-b531-3d8cadff4178": 37,
    "57988106-364d-4e52-8b50-94d18839c319": 38,
    "82b9481c-7129-4bea-8029-0e41a56531fe": 39,
    "dc067730-dede-40a5-affe-e04410170819": 40,
    "5f13e562-bbd6-4f67-97c9-00ba79ddb138": 41,
    "fd101477-cb98-4d87-90c4-efb87f39c5e6": 42,
    "306733d4-26cb-49c0-a0ff-c34dc7699baa": 43,
    "5e9f9a8e-0a8b-44d3-936d-05ca62f981f6": 44,
    "f9eef18e-818e-427d-82ab-8d990bb199c4": 45,
    "df22d856-9aa3-4c10-9e91-04291697e0b8": 46,
    "9b65af17-0a3d-42e4-bcd2-81b65277651c": 47,
    "583f4582-9495-46cc-bd49-19c957b9b0a3": 48,
    "065ff2fe-ac0a-4b31-b57f-8918dcb4057c": 49,
    "3c0c391d-fe56-4add-a756-793dd2dc6246": 50,
    "6deecb2f-1e0c-4e0c-8f4d-349a18c02e18": 51,
    "1e6d13dd-e154-4612-8751-7182a7d660e6": 52,
    "7cd60fb3-fe0f-478f-ac17-915b824f7f65": 53,
    "8d6c71e6-f74b-4155-bdd2-56baa2bbd40a": 54,
    "006bc18d-88c6-4257-9d76-69ad87c9c502": 55,
    "75e8b34f-8e44-4bac-9c9a-26c0dfb17224": 56,
    "e3d6999d-3dcd-4f28-8452-77daa5b9cab2": 57,
    "50188f39-ce56-4087-90fb-70a107a7357f": 58,
    "35d46d98-8f89-483a-9470-e2e615fd41a9": 59,
    "e358e778-5d29-492a-8943-e67e31b45833": 60,
    "27201172-7e31-4e3b-bf06-eb1737ddfadb": 61,
    "98cc6216-a675-40cb-b763-5ac3ccc98b65": 62,
    "a940d772-c613-427c-9dd4-88984e9f24ec": 63,
    "bb3a99c3-4e37-47ae-b3df-4b6f5317faed": 64,
    "9fb948d2-235d-4322-9462-93a9ca8ce283": 65,
    "8acda51f-97c8-4614-8800-cb2d7607bf16": 66,
    "ada1bb79-e120-493b-b0ba-13d11951b42b": 67,
    "8eb99cfc-6aeb-4f17-ae04-73621bdd63ce": 68,
    "270271e3-5a53-45ed-9c31-131e9bb4f36b": 69,
    "943be0ce-0c96-48ab-a820-37b919b9a150": 70,
    "76a35a14-e633-4f4a-827f-f7521123176d": 71,
    "032e4535-7d44-4654-bc6d-811d395b0285": 72,
    "d621c45b-3c4c-4814-81bd-7f1a1e25f6f0": 73,
    "0f44a2c4-5988-4b86-94d9-38b2ade0a037": 74,
    "f8dbb257-f348-48ec-8af2-bbb92fc6a1e0": 75,
    "12e26fae-357e-44cb-b1d6-ac8b9ba2c439": 76,
    "af06b354-ef07-4764-8be3-2f731e9aad33": 77,
    "60237404-0b90-4663-9ed3-de9db2d77354": 78,
    "34c83d4f-078d-45c3-b85a-e701f1d82f3a": 79,
    "2c41b67b-2bd2-4a6a-b7ef-5b2bd97380cb": 80,
    "fc49d90d-6345-4744-aa82-060d025051d0": 81,
    "05393210-77ab-4301-8243-accf0edac8d5": 82,
    "ea8dc9a0-203e-42c6-ab4d-70db372c0003": 83,
    "85914410-3864-43fa-8317-b90dedc12ce0": 84,
    "74d5f63b-8797-43f5-b571-fd5bebf56550": 85,
    "27156e19-3aeb-41de-adc2-75b1c7ca9774": 86,
    "53ab6181-9034-47f0-a6a9-a8b8eca0e504": 87
  }
}