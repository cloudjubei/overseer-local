{
  "id": 2,
  "status": "-",
  "title": "Task handling",
  "description": "Implement all features that allow proper handling of tasks. docs/tasks/task_format.py is the source of truth for the interfaces for a Task, Feature, ProjectSpec & ProjectRequirement. docs/tasks/task_example.json holds an example task json file.",
  "features": [
    {
      "id": "2.1",
      "status": "+",
      "title": "Task schema definition",
      "description": "Generate TypeScript interfaces from the schema into `src/types/tasks.ts`",
      "plan": "",
      "context": [
        "src/",
        "src/types/tasks.ts",
        "docs/tasks/task_format.py",
        "tests/tasks/test_task_schema.py"
      ],
      "acceptance": []
    },
    {
      "id": "2.2",
      "status": "+",
      "title": "Logical Tasks indexer and file watcher",
      "description": "Scan tasks/{id}/ directories under the selected project root to build an in-memory index of tasks and features. Implement a file watcher to refresh the index on changes (create/modify/delete). Acceptance: Indexing handles 100+ tasks; watcher reliably updates on file changes; performance measured and documented;.",
      "plan": "",
      "context": [
        "src/",
        "src/types/tasks.ts",
        "docs/tasks/task_format.py",
        "tests/tasks/test_task_schema.py"
      ],
      "acceptance": [],
      "dependencies": [
        "2.1"
      ]
    },
    {
      "id": "2.3",
      "status": "+",
      "title": "Tasks list UI with filtering and search - view only",
      "description": "Build a React view listing tasks with id, title, status, and counts of features (done/total). Provide text search and filters (e.g., status). Filtering/search applied client-side; empty states handled; accessibility basics (labels, keyboard nav) covered.",
      "plan": "",
      "context": [
        "src/",
        "docs/tasks/task_format.py",
        "tests/tasks/test_task_schema.py"
      ],
      "acceptance": [],
      "dependencies": [
        "2.2"
      ]
    },
    {
      "id": "2.4",
      "status": "+",
      "title": "Task details view with feature list - view only",
      "description": "Create a detail page showing the task metadata and its features with statuses.",
      "plan": "",
      "context": [
        "src/",
        "docs/tasks/task_format.py",
        "tests/tasks/test_task_schema.py"
      ],
      "acceptance": [],
      "dependencies": [
        "2.3"
      ]
    },
    {
      "id": "2.5",
      "status": "+",
      "title": "Edit mode - feature details",
      "description": "Allow editing of a feature's parameters. The status dropdown defaults to the current status. The string list edits show rows of editable strings. Dependencies allow matching features by name and working out the id from it.",
      "plan": "",
      "context": [
        "src/",
        "docs/tasks/task_format.py",
        "tests/tasks/test_task_schema.py"
      ],
      "acceptance": [],
      "dependencies": [
        "2.4"
      ]
    },
    {
      "id": "2.6",
      "status": "+",
      "title": "Create mode - new feature",
      "description": "Allow adding a new feature to a task in a new popup window - make this the same pattern as edit mode.",
      "plan": "",
      "context": [
        "src/",
        "docs/tasks/task_format.py",
        "tests/tasks/test_task_schema.py"
      ],
      "acceptance": [],
      "dependencies": [
        "2.5"
      ]
    },
    {
      "id": "2.7",
      "status": "+",
      "title": "Edit mode - task details",
      "description": "Allow editing of a task's title and description.",
      "plan": "",
      "context": [
        "src/",
        "docs/tasks/task_format.py",
        "tests/tasks/test_task_schema.py"
      ],
      "acceptance": [],
      "dependencies": [
        "2.4"
      ]
    },
    {
      "id": "2.8",
      "status": "+",
      "title": "Create mode - new task",
      "description": "Allow adding a new task in a new popup window - make this the same pattern as task edit mode and create feature.",
      "plan": "",
      "context": [
        "src/",
        "docs/tasks/task_format.py",
        "tests/tasks/test_task_schema.py"
      ],
      "acceptance": [],
      "dependencies": [
        "2.7"
      ]
    },
    {
      "id": "2.9",
      "status": "+",
      "title": "The task view is the main home view.",
      "description": "Glow up the whole appearance so that it looks like a production ready app.",
      "plan": "",
      "context": [
        "src/",
        "docs/tasks/task_format.py",
        "tests/tasks/test_task_schema.py"
      ],
      "acceptance": [],
      "dependencies": [
        "2.4",
        "2.5",
        "2.6",
        "2.7",
        "2.8"
      ]
    },
    {
      "id": "2.10",
      "status": "+",
      "title": "Refactor",
      "description": "The code was meant to use React for UI - make sure it does.",
      "plan": "",
      "context": [
        "src/",
        "docs/tasks/task_format.py",
        "tests/tasks/test_task_schema.py"
      ],
      "acceptance": [],
      "dependencies": [
        "2.9"
      ],
      "rejection": " Cannot launch the app - getting this error: An unhandled rejection has occurred inside Forge: Error: 'config.renderer' must be an Array at ViteConfigGenerator.getRendererConfig (/Users/cloud/Documents/Work/TheFactory/projects/overseer-local/node_modules/@electron-forge/plugin-vite/dist/ViteConfig.js:61:19)"
    },
    {
      "id": "2.11",
      "status": "-",
      "title": "Cleanup",
      "description": "Cleanup the repository so there's reusable utils for tasks/features and ui code is structured well.",
      "plan": "",
      "context": [
        "src/",
        "docs/tasks/task_format.py",
        "tests/tasks/test_task_schema.py"
      ],
      "acceptance": [],
      "dependencies": [
        "2.10"
      ]
    },
    {
      "id": "2.12",
      "status": "-",
      "title": "Common functions and libraries",
      "description": "We need to have common components for popups, alerts, toasts etc. It would be great to introduce a library like `shadcn` and use it with tailwind as much as possible. This way we can control theming and color schemes easily.",
      "plan": "",
      "context": [
        "src/",
        "docs/tasks/task_format.py",
        "tests/tasks/test_task_schema.py"
      ],
      "acceptance": [],
      "dependencies": [
        "2.11"
      ]
    },
    {
      "id": "2.13",
      "status": "-",
      "title": "Edit mode - moving features around",
      "description": "Allow editing the order of features for a task - thus changing the underlying id everywhere where it's referenced.",
      "plan": "",
      "context": [
        "src/",
        "docs/tasks/task_format.py",
        "tests/tasks/test_task_schema.py"
      ],
      "acceptance": [],
      "dependencies": [
        "2.4",
        "2.12"
      ]
    },
    {
      "id": "2.14",
      "status": "-",
      "title": "Edit mode - moving tasks around",
      "description": "Allow editing the order of tasks - thus changing the underlying id everywhere where it's referenced.",
      "plan": "",
      "context": [
        "src/",
        "docs/tasks/task_format.py",
        "tests/tasks/test_task_schema.py"
      ],
      "acceptance": [],
      "dependencies": [
        "2.4",
        "2.13"
      ]
    },
    {
      "id": "2.15",
      "status": "-",
      "title": "Improve UI to match best task applications in the world",
      "description": "Look at the competitor landscape (search online the latest best similar apps) and look at how their design is. Propose 3 designs in a document DESIGN_PROPOSALS.md. If you can include image references that would be ideals.",
      "plan": "",
      "context": [
        "src/",
        "docs/tasks/task_format.py",
        "tests/tasks/test_task_schema.py"
      ],
      "acceptance": [],
      "dependencies": [
        "2.14"
      ]
    }
  ]
}