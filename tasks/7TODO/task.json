{
  "id": 6,
  "status": "-",
  "title": "Read-only Git status panel",
  "description": "Expose project Git status via IPC by invoking the git CLI or a lightweight library. Show current branch, ahead/behind, changed files, and submodule summary. No write operations from this panel. Acceptance: Works across platforms; handles repositories with submodules; performance acceptable; unit tests stub git outputs; UI displays clear status indicators.",
  "features": [
    {
      "id": "2.10",
      "status": "-",
      "title": "Agent process manager (start/stop/list, logs)",
      "description": "Implement process orchestration to run local agents via scripts/run_local_agent.py (or equivalent). Configurable Python interpreter path. Provide UI to start/stop agents, view running processes, and stream stdout/stderr logs with persistence. Acceptance: Start/stop works with sample agent; logs stream and are saved to file; broken interpreter path yields clear error; protected from multiple accidental starts; IPC: agents:list/start/stop/logs implemented.",
      "plan": "Agent Process Manager (start/stop/list, logs) - Implementation Plan\n\n1) Define agent model and discovery\n- Create config/agents.json describing available local agents (id, name, scriptPath, defaultArgs). Example:\n  [\n    { \"id\": \"sample\", \"name\": \"Sample Agent\", \"scriptPath\": \"scripts/run_local_agent.py\", \"defaultArgs\": [] }\n  ]\n- Future: add discovery by scanning a directory, but start with static file for deterministic behavior.\n\n2) Add dependencies and project structure\n- Dependencies (main): electron-store (persistent settings), fs-extra, nanoid, zod (for validating IPC args), readline (for line-by-line logs), node:events.\n- Optional: electron-log OR implement custom rotating logs later; for now, per-session file write streams are enough.\n- File structure additions:\n  - electron/main/config/store.ts\n  - electron/main/agents/processManager.ts\n  - electron/main/ipc/agents.ts\n  - electron/preload/index.ts (expose agents API)\n  - shared/types/agents.ts (TypeScript interfaces for IPC payloads)\n  - renderer/src/services/agents.ts\n  - renderer/src/hooks/useAgents.ts and useAgentLogs.ts\n  - renderer/src/components/AgentManager/{AgentList.tsx,AgentItem.tsx,AgentLogs.tsx,InterpreterSettings.tsx}\n  - config/agents.json\n  - scripts/run_local_agent.py (sample agent)\n\n3) Settings: Python interpreter path with validation\n- electron/main/config/store.ts: Use electron-store to persist settings under key app: { pythonPath: string }.\n- Implement resolvePythonPath(): precedence: stored path -> auto-detect candidates [\"python3\", \"python\", \"py\", \"py -3\"] using spawnSync to test -V.\n- Implement validatePythonPath(path): spawnSync(path, [\"-V\"]) and return either ok or descriptive error message (include stderr output).\n- Renderer UI: InterpreterSettings.tsx component to view/edit the Python interpreter path with buttons [Test], [Auto-detect], [Save]. Show clear errors when invalid.\n\n4) Main process: AgentProcessManager\n- electron/main/agents/processManager.ts exports a singleton AgentProcessManager with:\n  - Types: AgentId = string; Status = 'idle'|'starting'|'running'|'stopping'|'exited'|'error';\n  - ProcessInfo: { agentId, status, pid?, startedAt?, exitedAt?, exitCode?, signal?, proc?: ChildProcessWithoutNullStreams, logFilePath?: string, logStream?: fs.WriteStream, subscribers: Set<webContentsId>, sessionId: string }.\n  - Registry: Map<AgentId, ProcessInfo> and a set of locks to prevent duplicate starts.\n  - loadAgents(): read and cache agents.json, validate paths (script exists). Expose getAgents() returning {id,name,scriptPath,status,pid}.\n  - startAgent(agentId, extraArgs?):\n    - Guard: if status is 'starting'|'running' return AlreadyRunning error.\n    - Resolve and validate python path (from store). If invalid, throw error \"Python interpreter invalid\" with details.\n    - Build args: [scriptPath, ...defaultArgs, ...extraArgs]. Use spawn(pythonPath, args, { cwd: projectRoot, env: process.env, stdio: ['ignore','pipe','pipe'] }). Avoid shell to prevent injection.\n    - Update registry status to 'starting' then 'running' on 'spawn' event. Save pid.\n    - Logging: Create log directory: path.join(app.getPath('userData'), 'logs', 'agents', agentId). Create session file: ${Date.now()}-${pid}.log. Create fs.WriteStream with flags 'a'.\n    - Attach stdout/stderr with readline.createInterface to split lines; for each line:\n      - Append to log file with prefix: `[ts][stdout] line` or `[stderr]`.\n      - Emit IPC event to subscribers: 'agents:logs:data' with { agentId, ts, stream: 'stdout'|'stderr', line }.\n      - Keep in-memory ring buffer per agent of last N lines (e.g., 2000) for fast history.\n    - Handle errors: 'error' event -> set status 'error' and expose message; close streams safely; emit status update.\n    - Handle exit: 'close' -> set status 'exited', record code/signal, close log stream, notify subscribers.\n  - stopAgent(agentId, opts?):\n    - Guard: if not running -> return no-op or error.\n    - Set status 'stopping'. Try graceful termination:\n      - On POSIX: proc.kill('SIGINT'), wait up to 5s; if still alive, proc.kill('SIGTERM'), wait 3s; then force kill('SIGKILL').\n      - On Windows: try proc.kill(); if not exited, fallback to spawn('taskkill', ['/PID', pid, '/T', '/F']).\n    - Ensure registry updated on exit; ensure streams closed.\n  - subscribeLogs(agentId, webContentsId): add subscriber id to ProcessInfo.subscribers.\n  - unsubscribeLogs(agentId, webContentsId)\n  - getLogHistory(agentId, tail?: number, sinceTs?: number): return lines from in-memory ring buffer; optional: also read from latest session file if buffer empty.\n  - app lifecycle: on app.will-quit, stop all running agents gracefully; close all log streams.\n\n5) IPC and preload bridge (secure)\n- electron/preload/index.ts: expose window.api.agents with typed methods using contextBridge:\n  - list(): Promise<AgentSummary[]>  // id, name, status, pid\n  - start(agentId: string, extraArgs?: string[]): Promise<{ ok: true, pid: number } | { ok: false, error: string }>\n  - stop(agentId: string): Promise<{ ok: true } | { ok: false, error: string }>\n  - subscribeLogs(agentId: string, callback: (evt: LogEvent) => void): () => void  // returns unsubscribe\n  - getLogHistory(agentId: string, tail?: number): Promise<LogEvent[]>\n  - getSettings(): Promise<{ pythonPath?: string }>\n  - setPythonPath(path: string): Promise<{ ok: true } | { ok: false, error: string }>\n  - testPythonPath(path?: string): Promise<{ ok: true, version: string } | { ok: false, error: string }>\n- electron/main/ipc/agents.ts:\n  - Register ipcMain.handle('agents:list', ...) to return AgentSummary[].\n  - ipcMain.handle('agents:start', (evt, {agentId, extraArgs}))\n  - ipcMain.handle('agents:stop', ...)\n  - ipcMain.on('agents:logs:subscribe', (evt, {agentId})) -> store evt.sender.id as subscriber and immediately send history via evt.sender.send('agents:logs:history', ...)\n  - ipcMain.on('agents:logs:unsubscribe', ...)\n  - ipcMain.handle('agents:logs:getHistory', ...)\n  - Settings handlers: 'agents:settings:get', 'agents:settings:setPythonPath', 'agents:settings:testPythonPath'.\n- Security: Validate inputs with zod; whitelist channels in preload; no eval or shell.\n\n6) Renderer services and hooks\n- services/agents.ts: Thin wrapper around window.api.agents with TS types from shared/types/agents.\n- hooks/useAgents.ts: manage list, poll status every 2-3s or react to push notifications (optional add 'agents:status:update' events). Provide start/stop actions and loading/error states.\n- hooks/useAgentLogs.ts: given agentId, subscribe to logs on mount, expose logs[], methods: clearView(), fetchHistory(tail), autoScroll flag.\n\n7) UI components\n- AgentList.tsx: Displays agents from useAgents; for each agent show name, status pill (idle/running etc), PID if running, Start/Stop button. Disable start when running; show tooltip \"Already running\".\n- AgentItem.tsx: Single row; on Start -> call start(); on Stop -> call stop(). Show errors as toasts/snackbars.\n- AgentLogs.tsx: Text area or virtualized list to render log lines; color-code stdout (default) vs stderr (red). Controls: filter stderr/stdout, tail size, search, copy, auto-scroll toggle. On mount, fetch tail history (e.g., last 500 lines) and then stream.\n- InterpreterSettings.tsx: Input for Python path; buttons: Test, Auto-detect, Save. Show interpreter version if valid; show clear error if invalid.\n- Place these into a page: AgentManagerPage with 2-panel layout: list on left, logs on right.\n\n8) Sample agent for acceptance testing\n- scripts/run_local_agent.py:\n  - Prints a heartbeat line every second: \"[sample] working... {timestamp}\"; flush stdout.\n  - Writes occasional stderr lines for testing.\n  - Handles SIGINT/SIGTERM: print(\"Shutting down\"), sleep(0.5), exit 0.\n  - Cross-platform line buffering: use flush=True in print or sys.stdout.reconfigure(line_buffering=True).\n\n9) Error handling and UX\n- Broken interpreter path: startAgent should reject with error code 'INTERPRETER_NOT_FOUND' and a clear user-facing message: \"Python interpreter not found or invalid at '<path>'. Configure a valid path in Settings. Details: <stderr>\". In UI, show call-to-action linking to InterpreterSettings.\n- Multiple accidental starts: start button disabled when status running; backend also enforces idempotency and returns 'ALREADY_RUNNING' if race occurs; UI shows non-blocking toast.\n- Process crash: Detect 'exit' with non-zero code; update status to 'error' and display notice with exitCode/signal; keep logs available.\n\n10) Log persistence details\n- Directory: app.getPath('userData')/logs/agents/<agentId>/\n- File: <YYYYMMDD-HHMMSS>-<pid>.log. Metadata: first line writes session header with ISO timestamp, pid, version info.\n- Write each line with timestamp ISO and stream label. Example: \"2025-08-23T12:34:56.789Z [stdout] message\".\n- Keep an in-memory ring buffer (e.g., circular-array) per agent capped at N lines to serve history quickly.\n\n11) Cross-platform considerations\n- Use spawn without shell; pass arguments array.\n- On Windows stopping: if proc.kill() fails to terminate, fallback to taskkill as mentioned with /T /F.\n- Ensure paths normalized; use quotes only when needed (but since we avoid shell, not needed).\n\n12) Wiring and lifecycle\n- Initialize AgentProcessManager during app ready; load agents.json and initialize registry with 'idle' statuses.\n- On app quit (before-quit/will-quit): iterate running agents and attempt graceful stop; wait up to a few seconds with Promise.allSettled; ensure log streams flushed/closed.\n\n13) Testing and acceptance checklist\n- Manual tests:\n  - Set invalid python path; attempt start -> clear error shown; agents not started.\n  - Set valid python path; start 'sample' agent -> process spawns, status transitions to running, PID shown.\n  - Logs stream in real-time; both stdout and stderr visible and color-coded; history persists to file; restart app and fetch history.\n  - Stop agent -> receives graceful signal, exits with code 0; status updates to exited; Start enabled again.\n  - Double-click Start rapidly -> only one process launches; UI shows Already running.\n  - IPC verified: agents:list returns agents with statuses; agents:start/stop work; logs subscribe delivers lines; getHistory returns recent lines.\n- Programmatic smoke: add a minimal test script or dev command to call ipcMain handlers directly (optional).\n\n14) Documentation\n- Add README section 'Agent Process Manager' with setup instructions: configure Python path, start sample agent, where logs are stored, troubleshooting notes (Windows signals, antivirus), and IPC contract.\n\n15) Future enhancements (out of scope now, but plan-friendly)\n- Multiple instances support with instanceId; advanced log rotation; per-agent environment variables; attach to existing processes; richer discovery of agents.\n",
      "context": [],
      "acceptance": [],
      "dependencies":["2.9"]
    },
    {
      "id": "2.11",
      "status": "-",
      "title": "Agent activity detection and completion notifications",
      "description": "Detect agent progress by monitoring process lifecycle and file changes in tasks/ (e.g., updated task.json or tests). When an agent finishes or triggers notable changes, show OS notifications and add to an in-app notifications center. Acceptance: File watcher identifies relevant changes; notification includes agent name and summary; user can mute/disable; tested with simulated runs; no duplicate spam.",
      "plan": "Implementation Plan: Agent activity detection and completion notifications (Feature 5.12)\n\n0) Assumptions / prerequisites\n- App structure: Electron main process + React renderer with preload (contextIsolation). Project has a known root directory; tasks live under <projectRoot>/tasks/.\n- Agents can be launched by the app (child_process) or run independently; we must detect both via file changes and via process lifecycle when launched by the app.\n- Tech stack: chokidar for file watching, Electron Notification API for OS notifications, Zustand (or Redux) for renderer store, IPC for messaging, vitest for unit tests.\n\n1) Define types and settings schema\n- Create shared types in packages/shared or src/common/types/\n  - NotificationType = 'agent-complete' | 'file-change' | 'tests-updated' | 'error'\n  - NotificationSource = 'process' | 'filewatcher'\n  - Notification = { id, type, source, timestamp, summary, agentId?, agentName?, taskId?, path?, read }\n  - ActivityEvent = { type: 'spawn'|'exit'|'stderr'|'stdout'|'error', agentId, agentName?, pid?, code?, message?, timestamp }\n- Settings schema (persisted in userData/notifications.settings.json):\n  notifications: {\n    enabled: true,\n    osNotifications: true,\n    fileChange: true,\n    agentComplete: true,\n    mutedAgents: string[],\n    doNotDisturb: { enabled: false, start: '22:00', end: '08:00' },\n    debounceMs: 2000,\n    watcherEnabled: true\n  }\n\n2) Main process: SettingsStore\n- Implement SettingsStore (src/main/settings/SettingsStore.ts)\n  - Load defaults; read/write JSON to app.getPath('userData')/notifications.settings.json\n  - validate on load; migrate if needed\n  - Expose get(), update(partial), onChange(cb)\n- Expose IPC handlers: notifications-settings:get, notifications-settings:update\n\n3) Main process: NotificationService\n- Implement NotificationService (src/main/notifications/NotificationService.ts)\n  - addNotification(event: Notification) => applies DND and settings filters, deduplicates, persists to in-memory list, emits to renderer via ipcMain\n  - Deduping/spam control: maintain LRU Map<string, number> recentKeys with TTL 60s; key = `${type}:${agentId||''}:${taskId||''}:${hash(summary)}`; if called within debounce window (settings.debounceMs), drop\n  - OS notifications: if settings.osNotifications && settings.enabled && not DND => new Notification({ title, body, icon }). On click: focus main window, send ipcMain.emit('notifications:open', { id, taskId, agentId })\n  - Provide clear(), markRead(id), muteAgent(agentId)\n  - Respect per-agent mute: if agentId in mutedAgents => no OS notif, still store in center unless global disabled\n\n4) Main process: FileChangeWatcher\n- Implement FileChangeWatcher (src/main/watchers/FileChangeWatcher.ts)\n  - Precondition: settings.watcherEnabled\n  - chokidar.watch(<projectRoot>/tasks, { ignoreInitial: true, depth: 5, awaitWriteFinish: { stabilityThreshold: 300, pollInterval: 100 }, ignored: ['**/node_modules/**', '**/.git/**'] })\n  - On events 'add'|'change'|'unlink': classify(filePath, event)\n    - If path ends with '/task.json':\n      - Read current JSON safely; compare with cached previous snapshot (Map<taskDir, prevTaskJson>)\n      - Detect status change: e.g., in_progress -> done; notes changed; title changed\n      - Build summary: \"Task {taskId} status: {old} → {new}\", or \"Task {taskId} notes updated\"\n      - Determine taskId from dir name or JSON; agentId/agentName from task.json.assignedAgent or previous cache\n    - If path includes '/tests/' or filename matches *.test.*|*.spec.*: summary: \"Tests updated for task {taskId}\" (find nearest task dir up the path)\n    - For other relevant files (e.g., result.md, output.json): create summary: \"Outputs updated for task {taskId}\"\n  - Emit NotificationService.addNotification with type 'file-change' or 'tests-updated' and source 'filewatcher'\n  - Keep snapshot cache updated (only for task.json); handle JSON read failures gracefully\n\n5) Main process: ProcessActivityTracker\n- Implement ProcessActivityTracker (src/main/agents/ProcessActivityTracker.ts)\n  - registerAgent({ agentId, agentName, childProcess, taskId? }) attaches listeners: 'spawn', 'exit', 'error', 'close'\n  - On 'spawn': track activeAgents Map<agentId, { pid, name, taskId }>, send ipcMain 'agent:status' updates\n  - On 'exit': remove from activeAgents; create Notification with type 'agent-complete', summary based on code/signal: \"{agentName} finished successfully\" or \"{agentName} exited with code {code}\"\n  - On 'error': create 'error' notification with message\n  - Provide manual API reportExit(agentId, result) for externally-run agents (optional)\n\n6) Main process: IPC wiring\n- Channels to renderer:\n  - 'notifications:new' (payload: Notification)\n  - 'notifications:seed' (on renderer init, send current list)\n  - 'notifications:open' (from OS click) => renderer routes to details\n  - 'agent:status' (payload: { agentId, name, pid?, status: 'running'|'stopped'|'error', taskId? })\n- Channels from renderer:\n  - 'notifications:markRead', 'notifications:clear', 'notifications:muteAgent', 'notifications:unmuteAgent'\n\n7) Renderer preload bridge\n- Expose safe APIs: window.api.notifications.onNew(cb), getAll(), markRead(id), clear(), muteAgent(id), settings.get(), settings.update()\n\n8) Renderer state store\n- Implement notifications store (Zustand) with state: items: Notification[], unreadCount, mutedAgents; actions sync with IPC\n- Implement agents store to reflect 'agent:status' for activity overview badges (optional, but helpful)\n\n9) UI: Notifications Center\n- Add a bell icon with badge to the app header\n- Clicking opens a drawer/panel listing notifications (newest first)\n  - Each item shows: icon by type, summary, agentName (if any), time ago, buttons: Mark read, Mute agent (if applicable), Open\n  - Controls: Mark all as read, Clear all\n- Ensure accessibility and virtualization if list grows\n\n10) UI: Settings\n- Settings > Notifications section\n  - Master toggle: Enable notifications\n  - OS notifications toggle\n  - Show file change notifications toggle\n  - Show agent completion notifications toggle\n  - Do Not Disturb toggle + time pickers (start/end)\n  - Per-agent mute management (list with remove)\n  - Debounce window (ms) numeric input\n\n11) Navigation on notification click\n- Renderer listens to 'notifications:open' and navigates to the appropriate route:\n  - If taskId exists: go to TaskDetails(taskId)\n  - Else if agentId exists: go to AgentDetails(agentId)\n  - Else go to Notifications center\n\n12) Spam/duplicate prevention\n- In NotificationService, implement LRU dedupe as above with TTL and debounce window\n- In FileChangeWatcher, coalesce bursts with awaitWriteFinish and an additional per-path throttle Map<path, lastTs>\n- Ensure process exit generates a single 'agent-complete' even if multiple events fire\n\n13) Persistence (optional for MVP)\n- Store notifications for the current session in memory; optionally persist last N (e.g., 200) to userData/notifications.log.json on exit and reload on start\n\n14) Testing: unit tests (vitest)\n- NotificationService.spec.ts: dedupe logic, DND time window, muted agent behavior, settings gates\n- FileChangeWatcher.spec.ts: classification of task.json status change, notes change, tests-updated; snapshot cache update; error handling\n- ProcessActivityTracker.spec.ts: exit event creates proper notification, status updates\n- Mock Electron Notification in tests to assert calls without showing OS notifications\n\n15) Testing: integration/simulation\n- Create test/simulateAgentRun.ts script:\n  - Prepares temp project with tasks/task-123/\n  - Writes task.json with { id: 'task-123', title, status: 'in_progress', assignedAgent: { id: 'agentA', name: 'Agent A' } }\n  - After 500ms, writes tests/sample.test.ts\n  - After 500ms, updates task.json status to 'done'\n  - Exits with code 0\n- Add an in-app dev command in Debug menu: \"Simulate Agent Run\" that runs the above and registers a fake agent with ProcessActivityTracker\n- Manual acceptance checklist uses this to verify notifications\n\n16) Documentation\n- docs/notifications.md: how detection works, what triggers notifications, settings, mute per agent, DND, deduping, limitations\n- docs/dev/testing-notifications.md: how to run unit tests and simulation script\n\n17) Acceptance criteria mapping\n- File watcher identifies relevant changes: implemented via FileChangeWatcher with classification and tests\n- Notification includes agent name and summary: notifications include agentName from task.json or process registry; summaries crafted per change/exit\n- User can mute/disable: settings toggles and per-agent mute implemented\n- Tested with simulated runs: simulation script and dev menu entry\n- No duplicate spam: dedupe and throttling implemented and unit-tested\n\n18) Implementation order\n2. Types and SettingsStore\n2. NotificationService with dedupe and OS notifications\n3. IPC channels and preload bridge\n4. FileChangeWatcher (with snapshots)\n5. ProcessActivityTracker and integration with agent launcher\n6. Renderer state + Notifications UI\n7. Settings UI\n8. Navigation on click\n9. Unit tests\n10. Simulation script + manual verification\n\n19) Risks and mitigations\n- Linux OS notifications variability: rely on Electron Notification; document requirement; fallback to in-app toast if OS notifications not available\n- High-frequency file writes: awaitWriteFinish + per-path throttle and service-level dedupe\n- Ambiguous task/agent mapping when agents run externally: fall back to task-derived names; if unavailable, show path and generic summary\n",
      "context": [],
      "acceptance": [],
      "dependencies":["2.10"]
    },
    {
      "id": "2.12",
      "status": "-",
      "title": "Notifications center UI and preferences",
      "description": "Add a notifications panel listing recent events (agent started/stopped, edits saved, git changes). Provide settings to enable/disable OS notifications and categories. Acceptance: Notifications persist across reloads; can be marked as read; preferences stored in settings; OS notifications use Electron Notification with fallbacks.",
      "plan": "Notifications Center UI and Preferences — Implementation Plan\n\nGoal\n- Add a notifications panel that lists recent events (agent started/stopped, edits saved, git changes), with persistence across reloads, read/unread states, and preferences to enable/disable OS notifications and per-category toggles. Use Electron Notification for OS alerts with in-app fallback.\n\nTech choices\n- Persistence: electron-store (main process) for both notifications and notification preferences.\n- IPC: contextBridge + ipcMain/ipcRenderer channels for notifications and preferences.\n- Renderer state: Zustand (simple state store) to manage notifications list, unread count, and preferences.\n- UI: React components for bell icon + panel, list, filters, and preferences UI. Optional lightweight toast lib (or custom) for in-app fallback.\n\nData model\n1) Notification\n- id: string (uuid)\n- title: string\n- body: string\n- category: 'agent' | 'task' | 'git' | 'doc' | 'system'\n- level: 'info' | 'success' | 'warning' | 'error'\n- timestamp: number (ms)\n- read: boolean\n- meta?: { entityId?: string; action?: string; [k:string]: any }\n- source?: 'system' | 'user' | 'agent'\n\n2) Preferences (NotificationSettings)\n- osEnabled: boolean (default true)\n- categories: { agent: boolean; task: boolean; git: boolean; doc: boolean; system: boolean } (default all true)\n- inAppFallbackEnabled: boolean (default true)\n- retention: { maxItems: number (default 500); maxDays: number (default 30) }\n\nStorage keys in electron-store (main process)\n- storeName: 'notifications'\n  - notifications: Notification[]\n- storeName: 'notificationPreferences'\n  - preferences: NotificationSettings\n\nFile structure (proposed)\n- electron/main/notifications/notificationStore.ts\n- electron/main/notifications/preferencesStore.ts\n- electron/main/notifications/service.ts\n- electron/main/ipc/notifications.ts\n- electron/preload/notifications.ts\n- renderer/src/state/notifications.ts\n- renderer/src/components/Notifications/Bell.tsx\n- renderer/src/components/Notifications/Panel.tsx\n- renderer/src/components/Notifications/NotificationItem.tsx\n- renderer/src/components/Notifications/Preferences.tsx\n- renderer/src/components/Notifications/index.ts (barrel)\n- renderer/src/lib/toast.ts (optional if using react-hot-toast)\n- types/shared/notifications.ts (shared TS types via tsconfig path alias)\n\nStep-by-step\n1) Main process: add stores and service\n2.1) electron/main/notifications/notificationStore.ts\n- Implement NotificationStore using electron-store.\n  - Methods:\n    - getAll(): Notification[] (sorted desc by timestamp)\n    - add(n: Notification): Notification[] (push, prune by retention, persist)\n    - markRead(id: string): void\n    - markAllRead(): void\n    - clear(): void\n    - getUnreadCount(): number\n    - prune(retention: { maxItems; maxDays }): void\n\n2.2) electron/main/notifications/preferencesStore.ts\n- Implement PreferencesStore using electron-store with defaults.\n  - Methods: get(), set(patch), toggleCategory(category, enabled), setOsEnabled(bool), getRetention(), etc.\n\n2.3) electron/main/notifications/service.ts\n- Export setupNotificationService(mainWindow: BrowserWindow) with:\n  - function emitAppNotification(partial: Omit<Notification, 'id' | 'timestamp' | 'read'>)\n    - Build full Notification object (uuid, timestamp, read=false)\n    - Save to NotificationStore\n    - Read preferences; if osEnabled && preferences.categories[category] is true -> new Notification({ title, body, silent: true })\n      - On click: focus mainWindow, send 'notifications:clicked' with id to renderer\n      - Handle Windows: ensure app.setAppUserModelId set in app init (if not already)\n    - Always send to renderer via mainWindow.webContents.send('notifications:push', notification)\n    - If osEnabled is false or OS notifications not supported, renderer will show in-app toast when it receives push (controlled by inAppFallbackEnabled)\n  - Expose accessors for IPC handlers (list, mark, clear)\n- Export helper functions: notifyAgentStarted/Stopped, notifyEditSaved, notifyGitChange for use by other modules.\n\n2.4) electron/main/ipc/notifications.ts\n- Register ipcMain handlers:\n  - 'notifications:list' -> return NotificationStore.getAll()\n  - 'notifications:markRead' (id: string)\n  - 'notifications:markAllRead'\n  - 'notifications:clear'\n  - 'notifications:getPreferences' -> PreferencesStore.get()\n  - 'notifications:updatePreferences' (partial: Partial<NotificationSettings>) -> merge and persist, return updated\n- Validate inputs (category in enum, strings length) to harden IPC boundary.\n\n2.5) Integrate service\n- In main entry (electron/main/index.ts), import and call setupNotificationService(mainWindow)\n- Ensure app.setAppUserModelId('com.yourorg.localapp') on Windows before creating notifications.\n\n2) Preload bridge\n2.1) electron/preload/notifications.ts\n- contextBridge.exposeInMainWorld('notifications', {\n    list: () => ipcRenderer.invoke('notifications:list'),\n    markRead: (id) => ipcRenderer.invoke('notifications:markRead', id),\n    markAllRead: () => ipcRenderer.invoke('notifications:markAllRead'),\n    clear: () => ipcRenderer.invoke('notifications:clear'),\n    getPreferences: () => ipcRenderer.invoke('notifications:getPreferences'),\n    updatePreferences: (partial) => ipcRenderer.invoke('notifications:updatePreferences', partial),\n    onPush: (callback) => ipcRenderer.on('notifications:push', (_, n) => callback(n)),\n    onClicked: (callback) => ipcRenderer.on('notifications:clicked', (_, id) => callback(id))\n  })\n- Wire this preload in BrowserWindow creation if not already.\n\n3) Renderer state (Zustand)\n3.1) renderer/src/state/notifications.ts\n- Create useNotificationsStore with:\n  - notifications: Notification[]\n  - unreadCount: number\n  - preferences: NotificationSettings | null\n  - actions: init(), push(n), markRead(id), markAllRead(), clear(), setPreferences(p)\n- init():\n  - fetch list and preferences via window.notifications\n  - subscribe to onPush to push into state\n  - when pushing, optionally show toast if preferences.inAppFallbackEnabled && (!preferences.osEnabled || !preferences.categories[n.category])\n\n4) Renderer UI components\n4.1) Bell icon\n- renderer/src/components/Notifications/Bell.tsx\n  - Bell icon in top bar with badge for unreadCount\n  - Clicking toggles Panel visibility\n\n4.2) Panel\n- renderer/src/components/Notifications/Panel.tsx\n  - A right-side Drawer/Popover\n  - Header with: Filters by category (All, Agent, Task, Git, Docs, System)\n  - Actions: Mark all as read; Clear all; Link to Preferences\n  - List of NotificationItem components\n  - Infinite scroll or simple list; empty state message\n\n4.3) NotificationItem\n- renderer/src/components/Notifications/NotificationItem.tsx\n  - Displays icon by category, title, timestamp, body snippet\n  - Unread indicator; click toggles read or opens target\n  - Optional CTA button \"View\" based on meta (e.g., open agent detail, open file, open git diff)\n\n4.4) Preferences UI\n- renderer/src/components/Notifications/Preferences.tsx\n  - Toggles: Enable OS notifications; per-category toggles; retention maxItems and maxDays; in-app fallback enabled\n  - Save applies via updatePreferences and updates local state\n\n4.5) Toast fallback\n- renderer/src/lib/toast.ts or react-hot-toast\n  - Show small in-app notification when push arrives and OS notification is disabled or category disabled for OS\n\n5) Integration: emit notifications for events\n5.1) Agent lifecycle\n- Where agent start/stop events are emitted, call notifyAgentStarted/Stopped({ agentId, name }) in main process (or via another IPC to main service which then calls emitAppNotification). If these events come from renderer, send IPC to main 'notifications:add' or utilize existing event bus to call service.\n- Example payloads:\n  - title: \"Agent started\"; body: `${agentName} is running`; category: 'agent'; level: 'info'; meta: { agentId }\n  - title: \"Agent finished\"; body: `${agentName} completed` ; level: 'success'\n\n5.2) Edits saved\n- When a document/task edit is saved successfully, emit notification:\n  - title: \"Changes saved\"; body: `Saved ${docName}`; category: 'doc'; level: 'success'; meta: { path }\n\n5.3) Git changes\n- On repo watcher or post-commit hook: title: \"Git updated\"; body: `Committed ${shortHash}` or \"Unstaged changes detected\"; category: 'git'; level: 'info'|'warning'\n\n6) Read/unread and persistence\n- Mark single as read via item click (calls window.notifications.markRead)\n- Mark all read via header action -> window.notifications.markAllRead\n- Clear uses window.notifications.clear\n- State updates after IPC resolves; store persists immediately, so reload restarts with saved list\n\n7) OS notification behavior and fallbacks\n- Electron Notification is created in main process only if preferences.osEnabled && category enabled\n- Always send renderer push; renderer shows toast only if inAppFallbackEnabled && (OS disabled or no OS support)\n- Add minimal rate limiting in service (e.g., ignore duplicate same title/body within 1s) to avoid floods\n\n8) OS-specific details\n- Ensure Windows: app.setAppUserModelId is configured or OS notifications won’t appear\n- macOS: Notifications work by default; add click focus behavior\n- Linux: Respect desktop environment availability; fallback to in-app toasts when not supported\n\n9) Security and validation\n- In ipcMain handlers, validate:\n  - IDs are strings\n  - Categories belong to known enum\n  - Title/body size limits (truncate > 512 chars body)\n- Sanitize strings before rendering (escape HTML) in NotificationItem\n\n10) Testing\n- Unit tests (if test infra present):\n  - notificationStore add/markRead/markAllRead/clear/prune\n  - preferencesStore get/set/toggleCategory\n  - service: category filter for OS notifications, emits renderer push\n- Manual QA checklist:\n  - New notifications appear in panel and survive reload\n  - Mark read updates badge, persists after reload\n  - Preferences toggles OS notifications; per-category OS on/off works; in-app fallback works\n  - Electron OS notifications appear with proper titles on macOS/Windows\n  - Clicking OS notification focuses app and highlights item\n\n11) Documentation\n- docs/notifications.md:\n  - Data model, IPC API, how to emit notifications from other modules\n  - Preferences schema, defaults, and examples\n\n12) Implementation notes\n- Types: Define shared types in types/shared/notifications.ts and use via path alias to avoid duplication\n- Retention pruning: on add and on app launch\n- Performance: Keep list capped by maxItems and virtualize list if very long (optional)\n- Accessibility: Aria roles for list and buttons; keyboard navigation; readable contrast for unread indicators\n\nAcceptance alignment\n- Persistence across reloads: electron-store in main; initial load and push ensures state is restored\n- Can be marked as read: item action and mark-all; stored in main\n- Preferences stored in settings: electron-store preferences; UI to toggle OS and categories\n- OS notifications use Electron Notification with fallbacks: main process dispatch, renderer toast fallback when disabled or unsupported\n",
      "context": [],
      "acceptance": [],
      "dependencies":["2.11"]
    },
    {
      "id": "2.13",
      "status": "-",
      "title": "Chat interface UI (sessions, messages, basic send/receive)",
      "description": "Create a chat UI with session list, message view, composer with multiline input, and send action. Persist conversation locally. Pluggable model selector. Acceptance: New session, rename session, message history persists; keyboard shortcuts (Shift+Enter for newline, Enter to send configurable); empty/error states handled; uses llm:chat IPC stub.",
      "plan": "Chat Interface UI (sessions, messages, basic send/receive) - Implementation Plan\n\nGoal: Build a chat interface for the local Electron+React app with session management, persistent history, a pluggable model selector, and basic send/receive via an llm:chat IPC stub. Include keyboard shortcuts, empty/error states, and settings for Enter/Shift+Enter behavior.\n\n1) Define IPC Contracts and Preload Bridges\n   - In main/preload:\n     - Expose window.api.llm.chat(payload) -> Promise<ChatResponse> using IPC channel 'llm:chat'.\n       - payload: { sessionId?: string; messages: Array<{role: 'system'|'user'|'assistant'; content: string}>; model: string; options?: Record<string, any> }\n       - response: { id: string; role: 'assistant'; content: string; usage?: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number } }\n     - Expose window.api.llm.listModels() -> Promise<Array<{ id: string; label?: string; provider?: string }>> via 'llm:listModels'. Return at least a stub array if not configured.\n     - Expose window.api.settings.get(key, defaultValue?) and .set(key, value) via 'settings:get' and 'settings:set'. We will use key 'chat.enterToSend' (boolean, default: true) and possibly 'chat.defaultModel'.\n   - Ensure the preload provides type-safe wrappers and guards for undefined channels (graceful fallback with errors).\n\n2) Data Models and Types (renderer)\n   - Define types in src/types/chat.ts:\n     - ChatRole = 'system' | 'user' | 'assistant'\n     - ChatMessage = { id: string; sessionId: string; role: ChatRole; content: string; createdAt: number; error?: string | null }\n     - ChatSession = { id: string; name: string; modelId: string | null; createdAt: number; updatedAt: number }\n     - ChatModel = { id: string; label?: string; provider?: string }\n     - ChatSendOptions = { sessionId: string; input: string; modelId?: string }\n\n3) Persistence Layer\n   - Use IndexedDB via Dexie in renderer for local persistence (no Node context required):\n     - db.sessions: id (string primary key), name, modelId, createdAt, updatedAt\n     - db.messages: id (string primary key), sessionId (indexed), role, content, createdAt, error\n   - Create src/data/chatDb.ts using Dexie:\n     - export functions: loadSessions(), createSession(name, modelId?), updateSessionName(id, name), updateSessionModel(id, modelId), deleteSession(id)\n     - message ops: loadMessages(sessionId), appendMessage(msg), deleteMessagesBySession(sessionId)\n   - Ensure all writes update updatedAt on session.\n\n4) State Management\n   - Use Zustand for simplicity: src/state/chatStore.ts\n     - state: { sessions: ChatSession[]; selectedSessionId: string | null; messagesBySession: Record<sessionId, ChatMessage[]>; enterToSend: boolean; models: ChatModel[]; sending: boolean; sendError: string | null }\n     - actions:\n       - init(): load models via window.api.llm.listModels, load sessions and the latest session selection from localStorage (e.g., 'chat.lastSessionId'), load messages for selected session.\n       - createSession(name?: string, modelId?: string): creates, persists, selects session; default name: 'New Chat'.\n       - renameSession(id, name)\n       - deleteSession(id): deletes session and its messages; if deleting selected, auto-select most recent, else null.\n       - selectSession(id)\n       - setSessionModel(id, modelId)\n       - sendMessage(input: string): orchestrates sending (see step 7), updates 'sending' state, error handling.\n       - setEnterToSend(boolean) and persist to settings via window.api.settings.set.\n     - Keep messagesBySession hydrated lazily: load messages for selected session if not in cache.\n\n5) UI Layout and Components\n   - Page Shell: src/views/ChatPage.tsx\n     - Two-column layout (Sidebar 280px, Main flex). Use CSS modules or Tailwind (depending on project convention). Keep accessible and responsive.\n   - Left Sidebar: SessionList\n     - Component: src/components/chat/SessionList.tsx\n       - Renders a searchable list of sessions sorted by updatedAt desc.\n       - Actions:\n         - New Session button at top.\n         - Click to select session; selected highlighted.\n         - Context menu or inline three-dots: Rename, Delete.\n         - Inline rename: click or F2 to toggle an input; on blur/Enter commits; Esc cancels.\n       - Empty state: 'No chats yet. Create your first conversation.' with a button to create.\n   - Main Header: ChatHeader\n     - Component: src/components/chat/ChatHeader.tsx\n       - Editable Session Title (inline edit, same behavior as Sidebar)\n       - ModelSelector (pluggable) aligned right\n   - ModelSelector (pluggable)\n     - Component: src/components/chat/ModelSelector.tsx\n       - Fetches models from store (populated via IPC). Shows a dropdown with model labels.\n       - On change, updates session's modelId via store.\n       - Handles missing models state: shows 'No models configured' with tooltip and disabled state.\n     - Design pluggability: Model list comes from window.api.llm.listModels; future providers can populate this without UI changes.\n   - Message List: src/components/chat/MessageList.tsx\n     - Displays messages for selected session.\n     - Auto-scroll to bottom on new message append.\n     - Different styling for user vs assistant; render error-style bubble if message.error present.\n     - Empty state when no messages: 'Start a conversation' prompt.\n   - Composer: src/components/chat/Composer.tsx\n     - Multiline textarea with auto-resize; placeholder 'Type a message'.\n     - Keyboard shortcuts:\n       - Enter sends if enterToSend is true and not Shift.\n       - Shift+Enter inserts newline always.\n       - If enterToSend is false, Ctrl/Cmd+Enter sends.\n     - Send button with loading state when sending; disabled if input empty or sending.\n     - A small gear icon to toggle 'Press Enter to send' (updates store + settings).\n     - Error banner under composer if store.sendError is set.\n\n6) Session Lifecycle\n   - New Session: Clicking 'New Chat' creates a session with default name and default model (from settings 'chat.defaultModel' or first available model). Select it and focus composer.\n   - Rename Session: Inline edit in either Sidebar or Header; updates persisted session name.\n   - Delete Session: Confirmation dialog: 'Delete this chat and its messages? This cannot be undone.'; if confirmed, delete and update selection; if no sessions remain, show empty state.\n\n7) Sending / Receiving Messages (IPC integration)\n   - In chatStore.sendMessage(input):\n     - Guard: if no selected session, create one or show error.\n     - Build message objects:\n       - userMsg = { id: uuid(), sessionId, role: 'user', content: input, createdAt: now }\n       - assistantMsg placeholder: { id: uuid(), sessionId, role: 'assistant', content: '', createdAt: now }\n     - Persist and push userMsg to state+DB.\n     - Set sending=true; clear sendError.\n     - Resolve model to use: session.modelId or fallback default; if none, set error 'No model selected' and return.\n     - Call await window.api.llm.chat({ sessionId, model, messages: [...existing session messages (user+assistant only)], options: {} })\n       - Note: For performance, send only necessary recent messages if needed later; for now, send all.\n     - On success: update assistantMsg.content to response.content; persist assistantMsg; push to state.\n     - On failure: set assistantMsg.error = error.message; persist; set store.sendError with a short description; keep sending=false.\n     - Finally: sending=false; clear composer input; scroll to bottom.\n   - Handle re-send on failed assistant message via context menu 'Retry last assistant response', which re-invokes chat with the same context.\n\n8) Keyboard Shortcuts and Settings\n   - On Composer mount, read enterToSend from settings via window.api.settings.get('chat.enterToSend', true) and set in store.\n   - Behavior mapping:\n     - enterToSend=true: Enter sends; Shift+Enter newline.\n     - enterToSend=false: Enter newline; Ctrl/Cmd+Enter sends.\n   - Provide tooltip/help text near the gear icon explaining the current behavior.\n\n9) Empty and Error States\n   - No sessions: Sidebar shows 'No chats' with a primary action button. Main area shows onboarding message.\n   - No session selected: Show message 'Select a chat or create a new one'.\n   - No models available: ModelSelector shows disabled state; composer send disabled with inline notice 'No model configured'.\n   - IPC error (llm:chat rejected): show error toast/banner and mark assistant message with error styling and retry control.\n\n10) Persistence Guarantees\n   - Sessions and messages live in IndexedDB (Dexie). On each store mutation, write-through to Dexie.\n   - On app launch, load sessions; auto-select last used session id from localStorage ('chat.lastSessionId') if exists.\n   - Save selected session id on selection change.\n   - Ensure all message and session writes are awaited to prevent data loss on quit.\n\n11) Minimal Styling and Accessibility\n   - Use existing design system if present; otherwise, neutral styling:\n     - High-contrast bubbles, clear focus states, ARIA labels for buttons (Send, New Chat, Rename).\n     - Ensure screen reader text for role labels (User/Assistant).\n     - Maintain 44px tap targets.\n\n12) Tests and QA (lightweight)\n   - Unit tests for store actions (create/rename/delete session; sendMessage success and error paths) using Jest/RTL if available.\n   - Manual acceptance test checklist:\n     - Create a new session; rename session; persists after reload.\n     - Type multi-line message with Shift+Enter; Enter sends (default). Toggle setting and verify new behavior.\n     - Messages persist across reload; selecting sessions loads history.\n     - Model selector lists models; selecting updates session model; used by send.\n     - Send succeeds; assistant message appears. Simulate failure (mock IPC reject) and verify error rendering and retry.\n     - Empty states: no sessions, no selected session, no models.\n\n13) Extensibility Hooks (non-functional now, design in place)\n   - ModelSelector decoupled from provider; window.api.llm.listModels is the sole source for model list.\n   - sendMessage structured to later support streaming (onProgress callback) without UI changes.\n   - Sessions may later include system prompt and metadata; keep type extensible.\n\n14) Implementation Order\n   2. IPC preload stubs and types for llm:chat, llm:listModels, settings.\n   2. Dexie DB setup and data access functions.\n   3. Zustand store with init/load, session CRUD, settings integration.\n   4. Sidebar (SessionList) + create/rename/delete/select.\n   5. Header (title edit + ModelSelector).\n   6. MessageList (empty state, autoscroll).\n   7. Composer (input, shortcuts, send button, settings toggle).\n   8. Wire sendMessage to IPC and persistence; handle error states.\n   9. Polish: disabled states, toasts/banners, accessibility, persistence of selected session.\n   10. Light tests + manual acceptance run.\n\n15) Deliverables\n   - Components: ChatPage, SessionList, ChatHeader, ModelSelector, MessageList, Composer.\n   - State: chatStore with full session/message lifecycle and settings.\n   - Persistence: Dexie database for sessions/messages.\n   - IPC: usage of 'llm:chat' and 'llm:listModels' stubs; settings get/set.\n   - Configurable keyboard behavior; empty/error states.\n",
      "context": [],
      "acceptance": [],
      "dependencies":["2.12"]
    },
    {
      "id": "2.14",
      "status": "-",
      "title": "LLM connector abstraction and providers (LiteLLM, OpenAI-compatible)",
      "description": "Design an abstraction for chat providers. Implement connectors for: (1) LiteLLM-compatible HTTP endpoint, (2) OpenAI-compatible custom base URL to support LM Studio / Ollama. Configurable API key, base URL, model name, timeouts. Acceptance: Provider interface documented; connectors unit-tested with mocked servers; UI to add/edit providers; failing requests produce actionable errors.",
      "plan": "Feature: LLM connector abstraction and providers (LiteLLM, OpenAI-compatible)\n\nGoal\n- Provide a clean provider interface for chat.\n- Implement two connectors:\n  1) LiteLLM-compatible HTTP endpoint\n  2) OpenAI-compatible with custom base URL (supports LM Studio, Ollama in OpenAI-compat mode)\n- Configurable API key, base URL, model name, timeouts.\n- UI to add/edit/test providers and select default.\n- Unit tests with mocked servers; actionable errors on failure.\n\nAssumptions\n- Electron + React app with main (Node) and renderer (React). We keep secrets (API keys) in main process and communicate via IPC.\n- HTTP requests from main process to avoid CORS and protect keys.\n- For Ollama, we rely on OpenAI-compatible endpoint (e.g., LM Studio / Ollama openai-compat servers exposing /v1/chat/completions).\n\nHigh-level Architecture\n- src/common: shared types and zod schemas.\n- src/main/llm: provider abstractions, connectors, registry, HTTP client, error mapper, service.\n- src/main/config: provider config store (encrypted storage for secrets when possible).\n- src/main/ipc: IPC channels for provider CRUD, test, and chat execute.\n- src/renderer/modules/providers: React UI for list/add/edit/test, validation, error display.\n- tests/main/llm: unit tests for connectors using mocked servers (nock or msw/node).\n\nDeliverables\n- Provider interface documented in code and docs.\n- LiteLLM and OpenAI-compatible connectors.\n- Config persistence with validation and masking of secrets in UI.\n- IPC endpoints for CRUD/test/execute.\n- UI for add/edit/test providers and set default provider.\n- Unit tests with mocked servers; actionable errors.\n\nStep-by-step Plan\n\n1) Define Types and Schemas (src/common)\n- Chat types:\n  - ChatMessage: { role: 'system' | 'user' | 'assistant' | 'tool', content: string }\n  - ChatOptions: { model: string; temperature?: number; maxTokens?: number; stop?: string[]; timeoutMs?: number; stream?: boolean }\n  - ChatResponse: { id: string; content: string; usage?: { promptTokens?: number; completionTokens?: number; totalTokens?: number }; raw?: unknown }\n- Provider identity/types:\n  - ProviderId: string\n  - ProviderKind: 'litellm' | 'openai_compat'\n- Config schemas (zod):\n  - Base provider config: { id: string; name: string; kind: ProviderKind; baseUrl: string; apiKey?: string; model: string; timeoutMs?: number; extraHeaders?: Record<string,string> }\n  - Validation ensures baseUrl is URL, model non-empty, timeout reasonable (1s-120s), headers safe keys.\n- AppError shape and error codes:\n  - AppError: { code: 'NETWORK'|'TIMEOUT'|'AUTH'|'RATE_LIMIT'|'NOT_FOUND'|'BAD_REQUEST'|'SERVER'|'UNSUPPORTED'|'UNKNOWN', httpStatus?: number, hint?: string, details?: unknown }\n\n2) Provider Interface (src/main/llm/IChatProvider.ts)\n- export interface IChatProvider {\n  - readonly id: string\n  - readonly kind: ProviderKind\n  - configure(cfg: ProviderConfig): void // validates\n  - testConnection(): Promise<{ ok: true } | { ok: false; error: AppError }>\n  - chat(messages: ChatMessage[], options?: ChatOptions): Promise<ChatResponse>\n  - supportsStreaming(): boolean // may return false initially\n}\n- Provide a helper type for ProviderConfig.\n- Document expectations: chat should map errors to AppError; all connectors must honor timeoutMs and abort requests.\n\n3) HTTP Client Helper (src/main/llm/http.ts)\n- buildFetch(baseUrl, path, method, headers, body, timeoutMs): Promise<Response>\n  - Uses node-fetch or undici; supports AbortController for timeout.\n  - Merges default headers + extraHeaders; inject Authorization: Bearer <apiKey> when apiKey present.\n  - Converts network/timeout errors into AppError.\n- parseJSON(response): safe JSON parse with AppError on invalid JSON.\n\n4) Error Mapping Utility (src/main/llm/errorMapper.ts)\n- fromHttpResponse(resp: Response, payload: any): AppError\n  - 401/403 -> AUTH with hint: 'Check API key and base URL.'\n  - 404 -> NOT_FOUND with hint: 'Verify model name and endpoint path.'\n  - 429 -> RATE_LIMIT with hint: 'Reduce request rate or increase model quota.'\n  - 400 -> BAD_REQUEST with hint: 'Verify request fields, model supports options.'\n  - 5xx -> SERVER with hint: 'Server error; retry later or check provider.'\n  - else -> UNKNOWN.\n- fromException(err: unknown): AppError\n  - ECONNREFUSED/ENOTFOUND -> NETWORK with hint to check server reachable.\n  - Timeout -> TIMEOUT with hint to increase timeout or ensure server responsiveness.\n\n5) Provider Registry (src/main/llm/registry.ts)\n- In-memory registry mapping providerId -> instance implementing IChatProvider.\n- loadProvidersFromStore() builds instances and configures them.\n- getDefaultProviderId()/setDefaultProviderId().\n- CRUD operations update store and registry.\n\n6) Config Persistence (src/main/config/providersStore.ts)\n- Use electron-store or lowdb. Prefer electron-store for simplicity.\n- Store schema: { providers: ProviderConfig[]; defaultProviderId?: string }\n- Secrets handling:\n  - Use keytar to store apiKey per providerId when available; Store only a placeholder or empty in electron-store; On load, hydrate config with apiKey from keytar.\n  - Fallback: Electron safeStorage encrypt; else plaintext with a warning flag.\n- Provide functions: list(), get(id), upsert(cfg), remove(id), setDefault(id), getSecret(id)/setSecret(id, apiKey).\n\n7) Implement LiteLLMConnector (src/main/llm/connectors/LiteLLMProvider.ts)\n- Endpoint: baseUrl + '/v1/chat/completions'\n- Request body follows OpenAI chat format: { model, messages: [{role, content}], temperature, max_tokens, stop, stream: false }\n- chat():\n  - Validate config and messages.\n  - Call HTTP helper with timeout.\n  - On non-2xx, map error via errorMapper.\n  - On 2xx, parse JSON and map to ChatResponse (content from choices[0].message.content, usage if available).\n- testConnection():\n  - Strategy A: Make a lightweight POST with a short prompt 'ping' and max_tokens: 2.\n  - Or Strategy B: GET baseUrl + '/v1/models' if LiteLLM supports; If 200, ok. Prefer Strategy B if available; fallback to A.\n- supportsStreaming(): false for now (can be extended later).\n\n8) Implement OpenAICompatibleProvider (src/main/llm/connectors/OpenAICompatProvider.ts)\n- Same request/response shape as LiteLLM (OpenAI-spec).\n- Endpoint: baseUrl + '/v1/chat/completions'\n- testConnection():\n  - Try GET baseUrl + '/v1/models' (LM Studio supports; Ollama openai-compat generally supports too). Fallback to tiny chat as above.\n\n9) Unit Tests with Mocked Servers (tests/main/llm)\n- Testing framework: vitest.\n- Mock HTTP: nock or msw/node. Use nock for simplicity.\n- Test cases common to both providers:\n  - chat success: returns expected content and usage.\n  - 401/403 -> AUTH error with hint.\n  - 404 -> NOT_FOUND with hint.\n  - 429 -> RATE_LIMIT with hint.\n  - 400 -> BAD_REQUEST.\n  - 500 -> SERVER.\n  - malformed JSON -> UNKNOWN with details.\n  - network error (ECONNREFUSED) -> NETWORK.\n  - timeout -> TIMEOUT when exceeding timeoutMs.\n- testConnection paths:\n  - models endpoint success.\n  - models endpoint missing -> fallback tiny chat.\n  - tiny chat failure -> returns error.\n- Config validation tests:\n  - Reject invalid baseUrl, missing model, unreasonable timeout.\n\n10) IPC Layer (src/main/ipc/llm.ts)\n- Channels and payload schemas (zod on both ends):\n  - llm.providers.list -> returns array of provider configs with apiKey status masked.\n  - llm.providers.get(id)\n  - llm.providers.upsert(cfg, secret?) -> validates; stores cfg and secret via keytar; loads into registry.\n  - llm.providers.remove(id)\n  - llm.providers.setDefault(id)\n  - llm.providers.test(id) -> calls provider.testConnection()\n  - llm.chat.execute({ providerId?, messages, options }) -> resolves with ChatResponse or AppError.\n- Ensure errors are serialized using AppError shape for renderer.\n\n11) Renderer UI (src/renderer/modules/providers)\n- ProvidersPage: list providers with name, kind, baseUrl, model, default badge.\n- Add/Edit Provider Modal/Form:\n  - Fields: name, kind (select), baseUrl, model, apiKey (password field, masked; show \"stored\" indicator), timeoutMs, extra headers JSON (optional advanced section).\n  - Client-side validation mirrors zod schema; server-side validation via IPC on save.\n  - Buttons: Save, Test Connection, Cancel.\n  - Test Connection triggers IPC test; display status (success with checkmark; error shows code, message, hint).\n- Set Default: action on list row to set default provider.\n- Error presentation:\n  - Use a reusable Alert component to display AppError code, human-readable message, and hint.\n\n12) Actionable Error Strategy\n- Standardize human-readable messages for each AppError.code plus context, e.g.:\n  - AUTH: \"Authentication failed. Check API key and permissions.\"\n  - NETWORK: \"Cannot reach server. Verify base URL and that the server is running.\"\n  - TIMEOUT: \"The request timed out. Try increasing timeout or ensuring the server responds promptly.\"\n  - RATE_LIMIT: \"Rate limit exceeded. Slow down requests or increase quota.\"\n  - NOT_FOUND: \"Resource not found. Check model name or endpoint path.\"\n  - BAD_REQUEST: \"Request was invalid. Review options like temperature, max tokens, and message formatting.\"\n  - SERVER: \"Provider server error. Try again later.\"\n- Include any response error.message in details dropdown for debugging.\n\n13) Documentation\n- docs/llm_providers.md\n  - Overview of Provider interface, method contracts, error mapping, and configuration.\n  - How to add a new provider connector (template/boilerplate).\n  - Examples for LiteLLM, LM Studio, Ollama (OpenAI-compat): sample baseUrl and typical models.\n  - Security notes about API key storage (keytar) and fallbacks.\n\n14) Developer Experience\n- Add scripts:\n  - test:unit: llm connectors tests.\n  - typecheck.\n- TypeDoc or JSDoc for IChatProvider and connectors.\n\n15) Manual QA Matrix\n- LiteLLM on localhost:\n  - Valid key and baseUrl -> chat works.\n  - Wrong key -> AUTH error.\n  - Wrong path/baseUrl -> NETWORK/NOT_FOUND.\n- LM Studio:\n  - baseUrl http://localhost:1234; model name available; chat works.\n  - Missing model -> NOT_FOUND or BAD_REQUEST with hint.\n- Ollama (openai-compat mode):\n  - baseUrl http://localhost:11434/v1; known model; chat works.\n  - Stop server -> NETWORK error in UI.\n- UI: add, edit, test, set default; masked apiKey display.\n\n16) Future-proofing (optional, behind flags)\n- Streaming support (Server-Sent Events) in providers and IPC if needed later.\n- List models endpoint to assist UI selection when available.\n\n17) Definition of Done\n- Provider interface defined and documented.\n- LiteLLM and OpenAI-compatible connectors implemented.\n- Unit tests passing with mocked servers covering success and common failure modes.\n- UI flows to add/edit/test providers and set default provider.\n- Actionable error messages surfaced in UI.\n- Minimal documentation committed.\n\nImplementation Notes\n- Use undici for HTTP in main process for performance.\n- Use zod for config validation and IPC payload validation.\n- Use keytar for secure secret storage; provide graceful fallback with warning if unavailable.\n- Ensure no API keys are ever sent to renderer or persisted in plaintext configs.\n- Keep connectors small and leverage shared HTTP + error mapping utilities to avoid duplication.\n",
      "context": [],
      "acceptance": [],
      "dependencies":["2.13"]
    },
    {
      "id": "2.15",
      "status": "-",
      "title": "Read-only tool adapters for chat",
      "description": "Implement tools accessible from chat with strict read-only capabilities: read_file, list_dir (scoped to project root), docs_index, read_doc, tasks_index, get_task, git_status, list_agents, agent_log_tail. Enforce allowlists and path sandboxing. Acceptance: Tools cannot write to disk; attempts to escape sandbox blocked; usage audited/logged; tool registry exposes metadata; covered by security unit tests.",
      "plan": "Implementation Plan: Read-only tool adapters for chat (Feature 5.16)\n\n1) Define scope, constraints, and foundations\n   2.2. Tech stack: Node.js/TypeScript backend in Electron main process (or a local service), React for UI. Use zod for runtime schema validation and type inference. Use child_process.execFile for git (no shell) and fs/promises for file I/O.\n   2.2. Project root: Determine a single projectRoot directory at app startup (configurable via settings, defaults to the app workspace directory). All file-based tools must operate strictly within this root or an allowlisted subset of it.\n   2.3. Read-only enforcement: Registry will only expose tools flagged readOnly=true to the chat layer. Do not register any mutating tools here. Ensure all implementations avoid write operations.\n\n2) Core security utilities\n   2.2. Path sandboxing helper: create util pathSafe.ts with functions:\n       - resolveInsideRoot(root: string, input: string): string\n         • Uses path.resolve(root, input) and fs.realpath on the final path.\n         • Reject if resolved path does not start with root + path.sep.\n         • Reject NUL bytes, drive letter tricks, and normalize to POSIX-like expectations while supporting Windows.\n       - assertInsideRoot(root: string, target: string): void throws on violation.\n       - sanitizeRelPath(input: string): remove trailing slashes, collapse .., prohibit absolute and UNC.\n   2.2. Symlink handling: Always fs.realpath the target; reject if it resolves outside projectRoot.\n   2.3. Rate limiting middleware for tools (basic): per-session and per-tool token bucket, e.g., 10 calls/min default; overridable per tool metadata.\n   2.4. Size limits: impose maximum read sizes (e.g., read_file: 512 KB cap; agent_log_tail: 10 KB cap; list_dir: 500 entries cap) to prevent resource abuse.\n\n3) Tool Registry and metadata\n   3.2. Define Tool interface:\n       - name: string\n       - description: string\n       - readOnly: true\n       - paramsSchema: zod schema\n       - execute(ctx: { projectRoot: string; sessionId: string; userId?: string }, params: unknown): Promise<JSON-serializable>\n       - allowedRoots?: string[] (relative to projectRoot) for extra scoping (e.g., docs/*).\n       - rateLimit?: { callsPerMinute?: number }\n   3.2. Implement ToolRegistry:\n       - register(tool: Tool)\n       - list(): metadata only (no execute)\n       - get(name): returns tool instance\n       - Only expose readOnly tools to chat integration.\n   3.3. Tool metadata endpoint for UI: return list of tools with name, description, paramsSchema (JSON representation), readOnly flag, limits, and allowedRoots.\n\n4) Audit logging\n   4.2. Implement AuditLogger writing JSONL to logs/chat-tools.log and in-memory buffer for quick UI display.\n       - Fields: ts, sessionId, userId, tool, allowed (bool), paramsRedacted (apply simple redaction for paths), resultMeta { bytes?, items? }, error?\n   4.2. Hook audit logs in a middleware:\n       - Before execution: validate and check allowlists/sandbox; if fail, log denied and throw.\n       - After execution: log summary (sizes, counts), but never raw file contents.\n\n5) Implement tools (all readOnly=true)\n   Common: validate params via zod; enforce allowedRoots by pre-resolving base root = projectRoot or projectRoot/allowedRoot; use resolveInsideRoot; apply size limits; audit.\n   5.2. read_file\n       - Params: { path: string; encoding?: 'utf8'|'base64'='utf8'; maxBytes?: number }\n       - Resolve path within projectRoot; fs.stat; cap size to min(requested, 512KB default); read and return { content, bytes, truncated }.\n   5.2. list_dir\n       - Params: { path?: string; depth?: 1|2=1; includeFiles?: boolean=true; includeDirs?: boolean=true; maxEntries?: number=500 }\n       - Base is projectRoot if path missing. Use fs.readdir({ withFileTypes: true }); depth-limited recursion; return entries with { name, type, size?, mtime } for first level; enforce caps.\n   5.3. docs_index\n       - AllowedRoots: [\"docs\", \"README.md\", \"CONTRIBUTING.md\"]\n       - Walk projectRoot/docs and selected top-level README*.md; extract top-level headings (# ...); return tree of docs with relative paths, titles, size, mtime.\n   5.4. read_doc\n       - Params: { path: string }\n       - Only within docs and top-level *.md allowlist; reuse read_file with stricter allowedRoots; return content and front-matter (if present) parsed read-only.\n   5.5. tasks_index\n       - Assumption: tasks stored via TaskStore (existing or to be created) reading from a JSON/db in project data dir. Implement a read-only adapter: TaskStore.listPublic() returning id, title, status, assignee, updatedAt, tags (no sensitive notes by default).\n       - Params: { status?: string[]; limit?: number=200; q?: string }\n       - Server-side filter and return lightweight list.\n   5.6. get_task\n       - Params: { id: string; includeNotes?: boolean=false }\n       - Read from TaskStore; if includeNotes is true, still read-only; optionally redact private fields via configuration.\n   5.7. git_status\n       - Params: { porcelain?: boolean=true; branch?: boolean=true }\n       - Use execFile('git', ['status','--porcelain=v2','--branch']) with cwd=projectRoot; no shell; timeout 5s; return stdout parsed into structured fields (branch, ahead/behind, changes[]), plus raw for display.\n   5.8. list_agents\n       - Params: none\n       - Read from AgentManager registry: return [{ id, name, status: 'idle'|'running'|'error', currentTask?, pid?, startedAt?, lastHeartbeatAt? }]. Ensure only metadata, no control actions.\n   5.9. agent_log_tail\n       - Params: { agentId: string; lines?: number=200; maxBytes?: number=10240 }\n       - Source from in-memory ring buffer maintained by AgentManager; fallback to a per-agent log file under projectRoot/.logs/agents/<id>.log (ensure allowedRoots to .logs/agents only); return last lines up to limits.\n\n6) Chat integration (read-only)\n   6.2. In the chat tool-calling layer, fetch ToolRegistry.list() and expose only readOnly tools. Bind invocation to the execute method with session context.\n   6.2. Validate all incoming tool calls against the registry (no dynamic tool names). Deny any tool not in allowlist or with params failing schema; audit as denied.\n   6.3. Add UI affordance: In the chat panel, show an \"Available tools\" dropdown with metadata and parameter hints; show audit log sidebar for recent tool calls in-session.\n\n7) Configuration\n   7.2. Add settings keys: projectRoot (string), toolRateLimits (per tool), docsRoots (override), taskStoreConfig (path/driver), logDir (default projectRoot/.logs), maxReadBytes defaults.\n   7.2. Ensure settings changes require restart for projectRoot and logDir to avoid TOCTOU issues.\n\n8) Testing: security and functionality\n   8.2. Unit tests (Jest):\n       - Path sandbox: attempts to use '../', absolute paths, UNC, null bytes → rejected.\n       - Symlink outside root: create tmp structure with symlink to /etc or outside temp dir → rejected by resolveInsideRoot.\n       - read_file truncation: large file truncated at cap with truncated=true.\n       - list_dir caps: excessive entries trimmed; depth respected.\n       - docs_index restricts to docs + top-level allowlist only.\n       - git_status uses execFile without shell; malicious args not possible; timeout enforced.\n       - ToolRegistry exposes readOnly only; non-existent tool invocation rejected.\n       - Audit logging: allowed and denied calls recorded; no content leaked in logs.\n       - Rate limiting: exceed limit → 429-like error; audit recorded.\n   8.2. Integration tests:\n       - Chat tool invocation flow: call each tool with valid params; verify outputs and audit entries.\n       - Attempt escape via path traversal in chat → denied and audited.\n\n9) Documentation\n   9.2. docs/dev/chat-tools.md: architecture, registry API, metadata schema (JSON), security model, limits, examples.\n   9.2. docs/user/chat-tools-usage.md: how the chat uses tools, visible metadata, privacy notes.\n\n10) Delivery\n   10.2. Wire up CI to run security/unit tests on PR.\n   10.2. Add a feature flag or version tag: tools.readOnly.v2.\n   10.3. Open a follow-up ticket for write-capable tools with separate explicit opt-in and stricter security review.\n",
      "context": [],
      "acceptance": [],
      "dependencies":["2.14"]
    },
    {
      "id": "2.16",
      "status": "-",
      "title": "Chat tool permissions and admin gating",
      "description": "Add UI and backend enforcement for enabling/disabling tools per session. Provide a clear indicator in the chat UI of which tools are enabled. Acceptance: Disabled tools are not invocable; permissions persist; attempting to call a disabled tool returns a controlled error; tests verify enforcement at IPC and provider levels.",
      "plan": "Feature 5.17: Chat tool permissions and admin gating\n\nGoal\n- Add UI and backend enforcement for enabling/disabling tools per chat session.\n- Provide a clear indicator in the chat UI of which tools are enabled.\n- Disabled tools are not invocable; permissions persist across app restarts.\n- Attempting to call a disabled tool returns a controlled error.\n- Tests verify enforcement at both IPC and provider levels.\n\nAssumptions and Repo Layout\n- Electron + React app with:\n  - main/ (Electron main process, IPC, persistence)\n  - renderer/ (React/TS UI)\n  - common/ (shared types, constants)\n  - providers/ (LLM providers and tool execution layer)\n  - tools/ (tool registry and implementations)\n- Chat sessions already exist with IDs; LLM tool calling is centralized via a tool registry and provider wrappers.\n\n1) Data Model and Types\n2.1 Create shared types in common/types/tools.ts:\n- export type ToolId = string\n- export type ToolCapability = 'read' | 'write'\n- export interface ToolDescriptor {\n    id: ToolId\n    name: string\n    description: string\n    capability: ToolCapability\n    scope: 'chat' | 'agent' | 'both'\n    defaultEnabledInChat?: boolean // default true only for read-only tools\n  }\n- export interface SessionToolPermissions {\n    sessionId: string\n    allowedToolIds: ToolId[]\n    updatedAt: string\n  }\n- export interface ToolPermissionErrorPayload {\n    code: 'TOOL_DISABLED'\n    message: string\n    toolId: ToolId\n  }\n\n2.2 Define admin gating types in common/types/admin.ts:\n- export interface AdminSettings { enabled: boolean; pinHash?: string }\n- export interface AdminState { active: boolean; activatedAt?: string }\n\n2) Tool Registry Updates\n2.1 In tools/registry.ts, ensure each tool has a ToolDescriptor including capability and scope.\n- Mark read-only tools with capability: 'read' (e.g., git.status, fs.readFile, search.index).\n- Write tools flagged as 'write' (e.g., fs.writeFile, git.commit).\n- Set defaultEnabledInChat true only for read-only tools.\n\n2.2 Export helper functions:\n- listAllTools(): ToolDescriptor[]\n- listChatTools(): ToolDescriptor[] // scope chat/both\n- listReadOnlyChatTools(): ToolDescriptor[] // capability read\n\n3) Persistence Layer\n3.1 Add a new file main/persistence/permissionsStore.ts using electron-store or simple JSON in appData:\n- Methods:\n  - getSessionPermissions(sessionId): SessionToolPermissions | null\n  - setSessionPermissions(perm: SessionToolPermissions): void\n  - migrateIfNeeded(): void\n- On migrateIfNeeded, for sessions lacking permissions, set allowedToolIds to listReadOnlyChatTools().map(t => t.id).\n\n3.2 Admin settings persistence main/persistence/adminStore.ts:\n- getAdminSettings(): AdminSettings\n- setAdminSettings(settings: AdminSettings): void\n- getAdminState(): AdminState (in-memory)\n- setAdminState(state: AdminState): void\n\n4) Permission Manager (Backend Enforcement)\n4.1 Create main/security/permissionManager.ts:\n- class PermissionManager {\n    constructor(permissionsStore, adminStore, toolRegistry)\n    getAllowedTools(sessionId): ToolDescriptor[]\n    isToolAllowed(sessionId, toolId): boolean\n    requireAdmin(): void // throws if AdminState.active=false and AdminSettings.enabled=true\n    updateSessionPermissions(sessionId, allowedToolIds: ToolId[]): void // validates toolIds belong to listChatTools; if AdminSettings.enabled, requireAdmin\n    ensureDefaults(sessionId): void // set defaults if missing\n  }\n- Validate that only tools with scope chat/both can be enabled for chat sessions.\n- Extra guard: if a tool capability is 'write', allow it only if explicitly enabled via UI (no default).\n\n4.2 Define a specific error class in common/errors.ts:\n- export class ToolPermissionError extends Error { code='TOOL_DISABLED'; toolId: ToolId; }\n\n5) IPC API\n5.1 Define IPC channels in common/ipc.ts:\n- 'chat.getPermissions' -> (sessionId) => SessionToolPermissions\n- 'chat.updatePermissions' -> (sessionId, allowedToolIds) => SessionToolPermissions (admin gated)\n- 'tools.list' -> ({scope?: 'chat'|'agent'|'both'}) => ToolDescriptor[]\n- 'chat.invokeTool' -> ({sessionId, toolId, args}) => ToolResult | ToolPermissionErrorPayload\n- 'admin.enableMode' -> ({pin}) => {active: boolean}\n- 'admin.disableMode' -> () => {active: boolean}\n- 'admin.status' -> () => AdminState\n- 'admin.updateSettings' -> ({enabled, pin}) => AdminSettings (admin gated or if no PIN set yet)\n\n5.2 Implement handlers in main/ipc/chatTools.ts:\n- chat.getPermissions: permissionManager.ensureDefaults(sessionId); return permissionsStore.getSessionPermissions(sessionId)\n- chat.updatePermissions: permissionManager.requireAdmin(); validate IDs; save; return updated\n- tools.list: filter by scope\n- chat.invokeTool:\n  - if !permissionManager.isToolAllowed(sessionId, toolId) -> return { code: 'TOOL_DISABLED', message: 'Tool is disabled for this session', toolId }\n  - else forward to tool execution pipeline\n\n5.3 Implement admin handlers in main/ipc/admin.ts:\n- admin.enableMode: verify pin by comparing hash (use bcrypt/scrypt); set AdminState.active=true; return state\n- admin.disableMode: set active=false\n- admin.status: return AdminState\n- admin.updateSettings: if settings.pinHash not set, allow setting; else requireAdmin; store enabled flag and new pinHash if provided\n\n6) Provider-Level Enforcement\n6.1 When constructing tool/function list for the LLM provider (providers/*):\n- Add a function buildAllowedToolDefs(sessionId): returns only tools allowed by PermissionManager.\n- Ensure provider.request() for a chat session passes only these tool definitions to the model.\n\n6.2 In the tool execution layer (tools/executor.ts):\n- Before executing any tool invocation, call permissionManager.isToolAllowed(sessionId, toolId). If false, throw ToolPermissionError so backend catches and returns controlled error payload via IPC.\n\n7) UI: Permissions Indicator and Admin Gating\n7.1 Add a ChatHeaderTools component in renderer/components/chat/ChatHeaderTools.tsx:\n- Button \"Tools\" showing a badge with count of enabled tools (e.g., 5).\n- Clicking opens a side drawer or modal listing chat-scope tools grouped by capability:\n  - Enabled tools: toggle on\n  - Disabled tools: toggle off\n  - Non-interactive when not in Admin Mode and AdminSettings.enabled (show lock icon tooltip \"Admin mode required\")\n- Controls:\n  - Search/filter tools\n  - Reset to defaults\n  - Apply/save (disabled unless changes + admin if required)\n\n7.2 Admin Mode UI in renderer/components/admin/AdminMode.tsx:\n- Status indicator in app header (shield icon): Active/Inactive\n- Button to Enable Admin Mode -> opens PIN prompt modal\n- Button to Disable Admin Mode\n- Preferences page to enable/disable admin gating and set/change PIN (if gating enabled). If PIN not yet set, allow set without admin mode; otherwise require admin mode.\n\n7.3 Chat Input area indicator:\n- Under the text input, display a pill row: \"Tools enabled:\" followed by chips for enabled tool names (truncated + tooltip). When zero enabled, show warning chip \"No tools enabled\".\n\n7.4 Error surfacing:\n- If chat.invokeTool returns TOOL_DISABLED, append a system message bubble: \"Tool <name> is disabled for this session. Ask an admin to enable it.\" with a shortcut button opening the Tools drawer.\n\n7.5 State management:\n- Redux/Zustand slice: permissionsSlice with state per session { allowedToolIds, loading, error }\n- Effects to load on chat mount: fetch tools.list(scope='chat') and chat.getPermissions(sessionId)\n- Actions to update: chat.updatePermissions -> refresh state and toast success\n- Admin slice: adminState and adminSettings with IPC bindings\n\n8) Security and Validation\n- Renderer never trusted: IPC handlers enforce permissions and admin gating\n- Validate allowedToolIds against registry; drop unknown IDs\n- If AdminSettings.enabled=false, allow toggles without Admin Mode (backward compatible dev mode)\n- Admin mode times out after 15 minutes of inactivity: implement in AdminState using timestamp + periodic check; auto-disable and notify UI\n\n9) Migrations\n- On app startup, permissionsStore.migrateIfNeeded() creates allowedToolIds for each existing chat session with defaults (read-only chat tools)\n- Maintain backup of previous sessions file: sessions.json.bak\n\n10) Error Codes and Mapping\n- Standardize error payload for disabled tools: { code:'TOOL_DISABLED', message, toolId }\n- Map ToolPermissionError to this payload in IPC and provider error paths\n- Ensure renderer gracefully handles this in chat stream or single-shot calls\n\n11) Tests\n12.1 Unit tests (jest) for PermissionManager:\n- Defaults applied for new sessions\n- isToolAllowed true/false logic across read/write tools\n- updateSessionPermissions rejects non-chat tools or unknown IDs\n- requireAdmin throws when admin gating enabled and not active\n\n12.2 IPC integration tests (using spectron/electron-mocha or electron-playwright):\n- chat.invokeTool on disabled tool returns TOOL_DISABLED\n- chat.updatePermissions blocked without admin when gating enabled; succeeds when admin active\n- tools.list returns proper scope filtering\n\n12.3 Provider tests:\n- buildAllowedToolDefs excludes disabled tools\n- Tool executor throws ToolPermissionError when a tool invocation arrives for a disabled tool (simulate function_call from model)\n\n12.4 UI tests (Playwright):\n- Tools drawer shows enabled/disabled states and count badge updates when toggled\n- With Admin gating on and admin inactive, toggles are disabled and lock icon shown\n- Enabling Admin Mode allows toggling and persists after reload\n- Attempt to use disabled tool shows system message and disabled state persists after app restart\n\n12) Documentation\n- Update README/User Guide: Managing chat tool permissions, Admin Mode, defaults, and error messages\n- Admin Guide: How to set/change PIN, enable gating, session defaults, and timeout behavior\n- Security note: renderer not trusted; all checks in main process\n\n13) Rollout and Acceptance Checklist\n- Feature flag: Admin gating enabled by default = true; PIN required; initial PIN must be set on first attempt to enable Admin Mode\n- Acceptance criteria mapping:\n  - Disabled tools not invocable -> Verified by IPC and provider tests and manual QA\n  - Permissions persist -> Restart app and verify allowedToolIds saved and reloaded\n  - Attempt to call disabled tool returns controlled error -> TOOL_DISABLED payload shown in UI\n  - Tests at IPC and provider levels -> Implemented as above\n\n14) Implementation Order\n2. Types and registry updates\n2. Persistence stores\n3. PermissionManager and error class\n4. IPC handlers (chat + admin)\n5. Provider enforcement (tool list filtering and executor checks)\n6. UI components and state slices\n7. Migrations and defaults\n8. Tests (unit -> integration -> UI)\n9. Documentation\n\n15) Notes\n- Keep the tool IDs stable and human-readable (e.g., 'git.status', 'fs.readFile')\n- For hashing PINs, use bcrypt with salt; store only hash\n- Ensure no tool invocation path bypasses PermissionManager (audit calls)\n- Consider telemetry/logging for permission denials (local-only)\n",
      "context": [],
      "acceptance": [],
      "dependencies":["2.15"]
    },
    {
      "id": "2.17",
      "status": "-",
      "title": "Context retrieval for chat (RAG-lite)",
      "description": "Implement simple keyword-based search over project docs and tasks. Allow user to attach retrieved snippets into context before sending. Optionally auto-attach top-k snippets with a toggle. Acceptance: Search returns ranked results quickly; selected snippets previewed; tokens limited by model configuration; unit tests confirm deterministic retrieval on fixed corpora.",
      "plan": "Feature: Context retrieval for chat (RAG-lite)\n\nGoal\n- Implement fast, deterministic keyword-based search over project docs and tasks.\n- Let users preview and select snippets to attach to chat context.\n- Optional auto-attach top-k snippets with token-budget enforcement.\n- Provide unit tests ensuring deterministic retrieval ordering on a fixed corpus.\n\nHigh-level architecture\n- Main process (Electron): File scanning, indexing, search service (read-only), exposed via IPC.\n- Common package: Tokenizer, BM25 scoring, types, token counting.\n- Renderer (React): UI for search, selection, preview, token budget display, auto-attach toggle; integration with chat send pipeline.\n\n1) Data sources and scope\n2.1 Define corpus roots from current project settings: projectRoot/docs/**/*.md, projectRoot/tasks/**/*.(md|json|yaml), and future adapters (extensible).\n2.2 Exclude large/binary/unwanted paths: node_modules, .git, .env*, build artifacts, images, >2MB files by default.\n2.3 Add a simple adapter interface: CorpusAdapter { id, name, globPatterns, parse(file) -> {doc: Document | chunkedDocs[]} } to support docs and tasks uniformly.\n\n2) Common library (packages/common)\n2.1 Types (src/common/rag/types.ts)\n- RawDocument: { id, source: 'docs'|'tasks'|'other', path, title, content, meta? }\n- Chunk: { id, docId, chunkIndex, text, tokensApprox, title, path, source, meta }\n- SearchResult: { chunkId, docId, score, highlights: { start, end }[], preview: string, title, path, source }\n- RagConfig: { chunkSizeChars: number, chunkOverlapChars: number, stopwords: string[], bm25: { k1: number, b: number }, maxFileSizeBytes: number }\n2.2 Deterministic tokenizer (src/common/rag/tokenizer.ts)\n- Lowercase, Unicode NFKD normalize, strip diacritics, remove punctuation, split on non-letter/digit, stopword removal.\n- Expose tokenize(text): string[] and matchOffsets(text, terms) -> [{start,end,term}].\n- Keep deterministic ordering for ties by stable sort rules.\n2.3 BM25 scorer (src/common/rag/bm25.ts)\n- Build index from chunks: DF per term, avg doc length, per-chunk term frequencies.\n- Implement BM25 with k1=2.2, b=0.75 defaults; deterministic score + tie-break rule: higher score, then higher sum of IDF, then path lexicographically, then chunkIndex asc.\n2.4 Token counting (src/common/rag/tokens.ts)\n- Provide two methods: approxCharsToTokens(chars/4) and optional tiktoken via dynamic import if available (documented opt-in). Default to approx for zero-dependency.\n\n3) Main process: index and search (packages/main)\n3.1 File discovery and watching (src/main/rag/fileWatcher.ts)\n- Use chokidar to watch configured glob patterns for adapters.\n- On add/change/unlink: schedule incremental reindex for affected file (debounced).\n3.2 Adapters (src/main/rag/adapters)\n- docsAdapter.ts: read markdown, extract title (first H1 or filename), split into chunks by heading or fixed window (config.chunkSizeChars with overlap).\n- tasksAdapter.ts: parse md/json/yaml; extract task fields (id, title, description, notes) and emit chunks from description/notes.\n3.3 Index builder (src/main/rag/indexer.ts)\n- Build/maintain in-memory index: { chunks[], lexicon, df, avgLen }.\n- Persist snapshot to disk (appData/rag/index.json) with corpus hash to accelerate startup.\n- Deterministic ordering guaranteed by sorting and stable data structures.\n3.4 Search service (src/main/rag/search.ts)\n- search(query: string, k: number): tokenize query, compute BM25 scores, select top-k, generate previews (first N chars around highlight), and highlight offsets.\n- Enforce max results and timeouts; results returned in under ~100ms for medium corpora via precomputed structures.\n3.5 IPC API (src/main/rag/ipc.ts)\n- rag:buildIndex(): force rebuild; rag:getStatus(): { docs, chunks, lastBuildAt, ready }.\n- rag:search({ query, k }): return SearchResult[].\n- rag:getConfig()/rag:setConfig(partial): allow tuning chunk size, stopwords, k1, b.\n- Rate-limit search requests and ensure read-only operations.\n\n4) Renderer: state and hooks (packages/renderer)\n4.1 Global state (Zustand or Redux) (src/renderer/store/ragSlice.ts)\n- query, results, selectedChunkIds, autoAttachEnabled, topK, tokenBudget, modelMaxTokens, attachmentTokensUsed.\n- Actions: setQuery, search, toggleSelect(chunkId), clearSelection, setAutoAttach, setTopK, setTokenBudget, setModelMaxTokens.\n4.2 Hook (src/renderer/hooks/useRag.ts)\n- Debounced search tied to query changes (250ms debounce).\n- Calculates per-snippet tokens via tokens.approx; computes total selection tokens; prevents exceeding budget.\n\n5) Renderer: UI components\n5.1 Chat context panel (src/renderer/components/chat/ChatContextPanel.tsx)\n- Search input, auto-attach toggle, top-k selector, results list.\n- Each result shows title, source badge (Docs/Tasks), path, score bar (subtle), highlighted terms, and a 3-5 line preview.\n- Checkbox to select snippets; footer shows Selected N, Tokens total/limit; Attach Selected button.\n5.2 Selected attachments bar (src/renderer/components/chat/ContextAttachmentsBar.tsx)\n- Lists selected snippets as chips with token count and remove button; open-in-viewer action.\n5.3 Settings modal (src/renderer/components/settings/RagSettings.tsx)\n- Configure: chunk size/overlap, k1/b, default topK, token budget strategy, model max tokens, stopwords list.\n\n6) Chat send integration\n6.1 Message pipeline middleware (src/renderer/chat/sendMiddleware/ragContext.ts)\n- On send: if auto-attach enabled and no manual selection, perform a search using current composer text as query; pick topK within remaining token budget (modelMaxTokens - safety margin - current prompt tokens - system tokens - existing attachments).\n- Merge manual selections with auto-attach (deduplicate).\n- Construct a context block message preceding user message (e.g., role: \"system\" or a structured \"context\" metadata) with a header and the selected snippets with sources.\n- Enforce token budget: drop tail snippets if budget exceeded; show a toast when truncation occurs.\n\n7) Determinism and performance guarantees\n7.1 Deterministic sort: implement explicit tiebreak strategy and stable sorting; pin config defaults; pin stopwords list.\n7.2 Cache index snapshot and warm it on startup; show small status in UI (Indexing..., Ready).\n7.3 Debounced search in UI and IPC result streaming to keep interactions snappy.\n\n8) Unit tests (Vitest)\n8.1 Tokenizer tests (tests/rag/tokenizer.spec.ts)\n- Normalization, stopwords removal, punctuation handling, non-ASCII diacritics.\n8.2 BM25 tests (tests/rag/bm25.spec.ts)\n- Known corpus with 5-10 chunks; verify exact ordered results for fixed queries; tie-break rules verified.\n8.3 Indexer/search integration (tests/rag/search.spec.ts)\n- Build small in-memory index; run queries; verify preview generation and highlight offsets; ensure same order across runs.\n8.4 Token budget tests (tests/rag/tokens.spec.ts)\n- Approximate token counts and enforcement logic.\n\n9) Developer experience\n9.1 Dev commands\n- yarn rag:rebuild to trigger IPC buildIndex; yarn test:rag to run unit tests.\n9.2 Logging\n- Scoped logs: RAG:Indexer, RAG:Search, RAG:UI; disable in production.\n\n10) Documentation\n10.1 README-RAG.md\n- Overview, design choices, determinism guarantees, configuration, performance tips, privacy (local-only), and how to extend adapters.\n10.2 Third-party considerations\n- Default implementation is dependency-light. Optionally allow swapping to lunr/minisearch via an adapter in future; document trade-offs.\n\n11) Acceptance criteria mapping\n- Fast ranked results: Debounced UI + BM25 index with precomputed stats; verified via manual test and logs.\n- Selected snippets previewed: UI components show preview and highlights; attachments bar confirms selection.\n- Tokens limited by model configuration: Settings define modelMaxTokens; middleware enforces budget, shows live totals.\n- Deterministic retrieval: Unit tests validate order on fixed corpus; deterministic tokenizer + explicit tie-breakers.\n\n12) Implementation order\n1) Common lib (tokenizer, bm25, tokens, types).\n2) Main indexer + adapters + search + IPC.\n3) Renderer store + hook + basic UI with manual selection and attachment.\n4) Send middleware with token budget and auto-attach toggle.\n5) Unit tests.\n6) Docs and polish (highlights, file watcher, settings UI).\n\n13) Validation checklist\n- [ ] Index builds on startup; status \"Ready\" visible.\n- [ ] Query returns ranked results within ~100ms on typical corpora.\n- [ ] Selecting results updates token totals; cannot exceed budget.\n- [ ] Auto-attach top-k adds context when sending with toggle on.\n- [ ] Unit tests pass and confirm deterministic ordering.\n- [ ] No write operations exposed; read-only search only.",
      "context": [],
      "acceptance": [],
      "dependencies":["2.16"]
    },
    {
      "id": "2.18",
      "status": "-",
      "title": "Child projects overview (submodules browser)",
      "description": "List submodules under projects/ with name, URL, current commit, and dirty status. Provide quick links to open in file explorer or terminal. Acceptance: Handles absent submodules gracefully; data sourced via git plumbing; UI updates when submodule pointers change; read-only operations only.",
      "plan": "Child projects overview (submodules browser) — Implementation Plan\n\nGoal\nList submodules under projects/ with name, URL, current commit, and dirty status. Provide quick links to open in file explorer or terminal. Read-only operations only. Handle absence of submodules gracefully. UI updates when submodule pointers change.\n\nAssumptions\n- The app knows the workspace root path of the repository (via settings or initial app configuration). Call it repoRoot.\n- The submodules are expected under repoRoot/projects/.\n- All git operations must be read-only and use git plumbing where possible.\n\nHigh-level Design\n- Main (Electron) provides a GitSubmodulesService that parses .gitmodules and uses plumbing commands to compute submodule info.\n- Preload exposes a safe API to the renderer: listSubmodules() and onSubmodulesUpdated(cb).\n- Renderer shows a table of submodules with actions (open explorer, open terminal, copy path/URL).\n- A background timer (or FS watcher + debounced polling) in the main process will periodically refresh submodule data and push updates when changes are detected.\n\nData Model\nType SubmoduleInfo {\n  name: string               // submodule name from .gitmodules (fallback to path basename)\n  path: string               // e.g., projects/foo\n  url?: string               // from .gitmodules; undefined if not present\n  pointerCommit?: string     // 40-char SHA from index (gitlink) for this path\n  headCommit?: string        // submodule worktree HEAD if initialized (rev-parse), else undefined\n  initialized: boolean\n  dirty: boolean             // true if worktreeDirty || untracked || pointerMismatch\n  status: {\n    pointerMismatch: boolean // headCommit != pointerCommit (when initialized)\n    worktreeDirty: boolean   // changes relative to HEAD in submodule\n    untracked: boolean       // untracked files in submodule\n    notInitialized: boolean\n  }\n}\n\nPlumbing Sources\n- List submodule definitions (name, path, url):\n  - git config -f .gitmodules --get-regexp ^submodule\\..*\\.path\n  - git config -f .gitmodules --get-regexp ^submodule\\..*\\.url\n- List current submodule pointers (index):\n  - git ls-files -s -- projects (parse entries with mode 160000)\n  - Fallback: if projects/ missing or no entries, treat as empty list\n- HEAD pointer for comparison (optional; not strictly needed to display but useful for richer status):\n  - git ls-tree -z HEAD projects (parse 160000 entries)\n- For each submodule path subPath:\n  - Detect initialized: fs.existsSync(join(repoRoot, subPath, '.git'))\n  - headCommit: git -C subPath rev-parse HEAD (if initialized)\n  - worktreeDirty: git -C subPath diff-index --quiet HEAD -- -> exitCode === 1 => dirty; 0 => clean\n  - untracked: git -C subPath ls-files --others --exclude-standard -> any output => untracked\n\nStep-by-step\n1) Main service: filesystem and process utilities\n   - Create main/services/git/submodules.ts with:\n     - execGit(args: string[], opts?): Promise<{stdout, stderr, code}>\n     - safeGit(root, args, opts?) that sets cwd to repoRoot.\n     - helper to exec in submodule: execGitInSub(path, args).\n     - parseGitmodules(repoRoot): returns Map<path, { name, url }>\n       - Use: git config -f .gitmodules --get-regexp ^submodule\\..*\\.path and ^submodule\\..*\\.url\n       - Build mapping between path -> name (from the section key) and url\n       - Handle no .gitmodules file gracefully (return empty map)\n     - listGitlinksFromIndex(repoRoot): returns Map<path, sha>\n       - Use: git ls-files -s -- projects\n       - Parse lines like: \"160000 <sha> 0\\tprojects/foo\"\n     - listGitlinksFromHead(repoRoot): optional for diagnostics; use git ls-tree -z HEAD projects and parse 160000\n     - getSubmoduleWorktreeState(repoRoot, subPath):\n       - initialized: existsSync(join(repoRoot, subPath, '.git'))\n       - if not initialized: return { initialized: false }\n       - headCommit: git -C subPath rev-parse HEAD\n       - worktreeDirty: run git -C subPath diff-index --quiet HEAD --; code 1 => true; 0 => false\n       - untracked: run git -C subPath ls-files --others --exclude-standard; length > 0 => true\n       - Return state\n     - buildSubmoduleList(repoRoot): Promise<SubmoduleInfo[]>:\n       - gm = parseGitmodules\n       - indexLinks = listGitlinksFromIndex\n       - candidatePaths = union of gm.paths and indexLinks.paths that start with 'projects/'\n       - For each path p in candidatePaths:\n         - meta = gm.get(p) or { name: basename(p), url: undefined }\n         - pointerCommit = indexLinks.get(p) (may be undefined if only in .gitmodules)\n         - state = getSubmoduleWorktreeState(repoRoot, p)\n         - headCommit = state.headCommit\n         - pointerMismatch = state.initialized && pointerCommit && headCommit && pointerCommit !== headCommit\n         - dirty = Boolean(pointerMismatch || state.worktreeDirty || state.untracked)\n         - Assemble SubmoduleInfo\n       - Sort list by path\n       - Return\n     - compareSubmoduleLists(a, b): boolean (deep comparison for change detection)\n\n2) Main service: IPC API and polling\n   - In main/ipc/submodules.ts:\n     - ipcMain.handle('git:listSubmodules', async () => buildSubmoduleList(repoRoot))\n     - Start a poller in main process: setInterval every 5000 ms (configurable), compute new list and if changed from last snapshot (using compare), send to all windows: webContents.send('git:submodulesUpdated', list)\n     - Also watch for immediate triggers with chokidar on:\n       - repoRoot/.gitmodules\n       - repoRoot/projects/**/.git/HEAD (and/or repoRoot/.git/modules/**/HEAD)\n       - repoRoot/.git/index\n       - On change, debounce (e.g., 300ms) and trigger a refresh\n     - Ensure cleanup on app quit\n   - Ensure all operations are read-only; avoid any commands that mutate state\n\n3) Main service: utility actions for UI\n   - openInExplorer(path): use shell.openPath(absPath) or shell.showItemInFolder depending on platform reliability\n   - openInTerminal(dir): implement platform-specific behavior:\n     - macOS: spawn('open', ['-a', 'Terminal', dir])\n     - Windows: spawn('cmd', ['/c', 'start', 'cmd.exe', '/K', `cd /d \"${dir}\"`])\n       - If Windows Terminal is preferred and available: spawn('wt.exe', ['-d', dir])\n     - Linux: try sequentially until success:\n       - x-terminal-emulator -e bash -lc \"cd '<dir>'; exec bash\"\n       - gnome-terminal -- bash -lc \"cd '<dir>'; exec bash\"\n       - konsole --workdir \"<dir>\"\n       - xfce4-terminal --working-directory=\"<dir>\"\n       - If none found, return an error so UI can show fallback (copy path)\n   - Wire IPC handlers:\n     - ipcMain.handle('system:openInExplorer', (_, relPath) => openInExplorer(join(repoRoot, relPath)))\n     - ipcMain.handle('system:openInTerminal', (_, relPath) => openInTerminal(join(repoRoot, relPath)))\n\n4) Preload bridge\n   - In preload/index.ts, expose via contextBridge:\n     - git.listSubmodules(): ipcRenderer.invoke('git:listSubmodules')\n     - git.onSubmodulesUpdated(cb): add listener to 'git:submodulesUpdated'\n     - system.openInExplorer(path): invoke('system:openInExplorer', path)\n     - system.openInTerminal(path): invoke('system:openInTerminal', path)\n\n5) Renderer UI\n   - Create a page/view: views/ChildProjects/SubmodulesView.tsx\n     - On mount: fetch initial list via git.listSubmodules()\n     - Subscribe to git.onSubmodulesUpdated to update state live\n     - Handle empty state: \"No child projects found under projects/\" with subtle guidance\n   - Table columns:\n     - Name (fallback to basename if missing); clickable to copy path\n     - Path (projects/foo); copy button\n     - URL (if present); hyperlink icon opens in default browser if http(s)\n     - Pointer commit (short 7 chars) with copy; tooltip shows full SHA\n     - HEAD commit (short; only if initialized); tooltip full SHA; if uninitialized show \"—\"\n     - Status chip: values: Clean, Uninitialized, Dirty, Pointer mismatch; with tooltip showing:\n       - initialized, pointerMismatch, worktreeDirty, untracked booleans\n     - Actions:\n       - Open in Explorer\n       - Open in Terminal\n       - Copy URL (if present)\n   - Visual cues:\n     - If not initialized: show a warning icon and tooltip \"Submodule not initialized\"\n     - If pointerMismatch: highlight pointer/HEAD cells with subtle color\n   - Ensure read-only: no buttons to update/init submodules\n\n6) Graceful handling and errors\n   - If repoRoot is not a git repo or git not available:\n     - listSubmodules returns [] and an additional warning string; renderer shows banner: \"Git not available or not a repository\"\n   - If .gitmodules missing and no gitlinks: show empty state\n   - If parsing errors occur, log in main (debug) and return partial results where possible\n\n7) Performance and debouncing\n   - Poll every 5s; also trigger on chokidar events; debounce refresh by 300ms to coalesce bursts\n   - Limit submodule per-path checks to discovered paths; run worktree checks in parallel with Promise.all but cap concurrency (e.g., p-limit 5) to avoid overwhelming system\n\n8) Types and structure\n   - Shared types (SubmoduleInfo) placed in a common shared module imported by both main and renderer (or duplicate TypeScript declaration in both with care)\n\n9) Testing and validation\n   - Unit tests (node environment) for:\n     - parseGitmodules mapping (with sample .gitmodules content via temp files)\n     - listGitlinksFromIndex parser using mocked git output\n     - getSubmoduleWorktreeState logic with mocked exec results\n   - Manual QA scenarios:\n     - Repo with no projects/ directory\n     - Repo with projects/ but no .gitmodules\n     - Repo with properly initialized submodules (clean)\n     - Submodule with untracked files\n     - Submodule with modified files\n     - Submodule not initialized (missing .git)\n     - Submodule HEAD at different commit than superproject pointer (pointerMismatch)\n     - Switching branches to update submodule pointers; confirm UI updates automatically within ~5s or immediately on FS event\n     - Open in Explorer/Terminal actions on macOS, Windows, Linux (verify fallbacks)\n\n10) Documentation\n   - Add a README section \"Child Projects (Submodules)\" explaining:\n     - What is shown\n     - Data sources and read-only behavior\n     - How to troubleshoot if nothing appears\n     - Notes on platform-specific terminal opening behavior\n\nCommand references (plumbing-centric)\n- git config -f .gitmodules --get-regexp '^submodule\\..*\\.path'\n- git config -f .gitmodules --get-regexp '^submodule\\..*\\.url'\n- git ls-files -s -- projects\n- git ls-tree -z HEAD projects (optional)\n- git -C projects/<name> rev-parse HEAD\n- git -C projects/<name> diff-index --quiet HEAD --\n- git -C projects/<name> ls-files --others --exclude-standard\n\nAcceptance alignment\n- Handles absent submodules gracefully: empty list + informative UI\n- Data sourced via git plumbing: commands listed above; no porcelain reliance\n- UI updates when submodule pointers change: poll + chokidar-triggered refresh and IPC push\n- Read-only operations only: only rev-parse, ls-files, ls-tree, diff-index, and ls-files (others) used; no mutations\n- Quick links to open in file explorer or terminal provided via Electron shell/spawn",
      "context": [],
      "acceptance": [],
      "dependencies":["2.11"]
    },
    {
      "id": "2.19",
      "status": "-",
      "title": "Cross-platform packaging configuration",
      "description": "Configure electron-builder to produce distributables for macOS (dmg), Windows (nsis), and Linux (AppImage). Include app icons and code signing placeholders. Acceptance: CI-local builds produce artifacts; metadata correct (name, version, copyright); app auto-updates disabled initially.",
      "plan": "Implementation Plan: Cross-platform packaging with electron-builder\n\n1) Preconditions: confirm build outputs\n- Decide your main and renderer output locations (examples below):\n  - Main (Electron): dist-electron/main.js (or similar)\n  - Renderer (React build): dist/ (or build/ from CRA)\n- You will reference these in the electron-builder config under `files`.\n\n2) Install packaging tooling\n- Add electron-builder as a dev dependency:\n  - npm: npm i -D electron-builder\n  - yarn: yarn add -D electron-builder\n\n3) Prepare icons\n- Create a base icon at assets/icon.png (recommend 1024x1024, square, no transparency issues).\n- Create resources/icons folder structure:\n  - resources/icons/icon.icns (macOS)\n  - resources/icons/icon.ico (Windows)\n  - resources/icons/png/ (Linux) with 512x512, 256x256, 128x128, 64x64, 48x48, 32x32, 24x24, 16x16\n- If you prefer auto-generation, add a dev script (choose one approach you like):\n  - Option A (electron-icon-builder):\n    - npm i -D electron-icon-builder\n    - Add script: \"icons:generate\": \"electron-icon-builder --input=assets/icon.png --output=resources/icons\"\n  - Option B (icon-gen):\n    - npm i -D icon-gen\n    - Add script: \"icons:generate\": \"icon-gen -i assets/icon.png -o resources/icons -m -w -l\"\n- Run: npm run icons:generate (or place your prepared icons manually).\n\n4) Add electron-builder config (disable auto-updates; include signing placeholders)\n- Create electron-builder.yml at repo root with this starter config. Adjust `files` to match your build outputs and update metadata fields to your org.\n\n--- electron-builder.yml ---\nappId: com.yourorg.localapp\nproductName: Factory Local App\ndirectories:\n  output: dist\n  buildResources: resources\nfiles:\n  # Adjust these patterns to include your built main and renderer bundles\n  - \"dist/**\"           # renderer output (e.g., React build)\n  - \"dist-electron/**\"  # main process output/bundle\n  - \"!**/*.map\"\nasar: true\npublish: \"never\"  # ensures auto-updates disabled by default\nextraMetadata:\n  # These override/augment package.json fields at build-time\n  # You can remove or change as needed\n  author: \"Your Org\"\n  # Update explicitly in package.json[version] for releases\n\nmac:\n  category: public.app-category.developer-tools\n  target:\n    - target: dmg\n      arch:\n        - x64\n        - arm64\n  icon: resources/icons/icon.icns\n  identity: null  # code signing disabled by default\n\ndmg:\n  artifactName: \"${productName}-${version}-mac-${arch}.${ext}\"\n\nwin:\n  target:\n    - target: nsis\n      arch:\n        - x64\n  icon: resources/icons/icon.ico\n  signAndEditExecutable: false\n  verifyUpdateCodeSignature: false\n\nnsis:\n  oneClick: true\n  perMachine: false\n  allowElevation: true\n  artifactName: \"${productName}-${version}-win-${arch}.exe\"\n\nlinux:\n  category: Development\n  target:\n    - AppImage\n  icon: resources/icons/png\n  maintainer: \"Your Name <you@example.com>\"\n  synopsis: \"Local project manager\"\n  description: \"Electron+React app to manage local agents, tasks, and project assets\"\n  artifactName: \"${productName}-${version}-linux-${arch}.${ext}\"\n--- end ---\n\n5) Package scripts in package.json\n- Add (or update) the following scripts. Keep the prepack step aligned with your project’s build commands (ensure your main+renderer are built before packaging):\n\n\"scripts\": {\n  \"build\": \"<your existing full build that outputs dist and dist-electron>\",\n  \"prepack\": \"npm run build\",  \n  \"pack\": \"electron-builder --dir -c.mac.identity=null -c.win.sign=false\",\n  \"dist\": \"electron-builder -mwl\",\n  \"dist:mac\": \"electron-builder --mac -c.mac.identity=null\",\n  \"dist:win\": \"electron-builder --win --x64 -c.win.sign=false\",\n  \"dist:linux\": \"electron-builder --linux AppImage\",\n  \"clean:dist\": \"rimraf dist\"\n}\n\nNotes:\n- `prepack` triggers before `pack` and `dist`, ensuring the build artifacts exist.\n- The explicit `-c.*` flags keep signing disabled when running these commands locally/CI.\n\n6) Ensure metadata correctness\n- In package.json, set:\n  - name: a lowercase, hyphenated package name (e.g., \"factory-local-app\")\n  - version: a valid semver (e.g., \"0.2.0\")\n- In electron-builder.yml, set:\n  - productName: the human-readable app name\n  - appId: reverse-DNS unique ID (keep stable across releases)\n- Optional: Update copyright.\n\n7) Disable auto-updates in application code (if present)\n- If you already import/use electron-updater, gate it behind an env flag and default to off:\n\nconst enableAutoUpdate = process.env.AUTO_UPDATE === 'true';\nif (enableAutoUpdate) {\n  // init electron-updater here\n}\n\n- With the config’s publish: \"never\", no update provider is configured by default.\n\n8) CI: cross-platform builds producing artifacts\n- Create .github/workflows/build.yml:\n\n--- .github/workflows/build.yml ---\nname: build\non:\n  push:\n    branches: [ main ]\n  pull_request:\n\njobs:\n  mac:\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n      - run: npm ci\n      - run: npm run dist:mac\n        env:\n          CSC_IDENTITY_AUTO_DISCOVERY: false\n      - uses: actions/upload-artifact@v4\n        with:\n          name: mac-dist\n          path: dist/**\n\n  windows:\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n      - run: npm ci\n      - run: npm run dist:win\n        env:\n          CSC_IDENTITY_AUTO_DISCOVERY: false\n      - uses: actions/upload-artifact@v4\n        with:\n          name: windows-dist\n          path: dist/**\n\n  linux:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n      - run: npm ci\n      - run: npm run dist:linux\n      - uses: actions/upload-artifact@v4\n        with:\n          name: linux-dist\n          path: dist/**\n--- end ---\n\n9) Code signing placeholders and documentation\n- Keep signing disabled by default (mac.identity: null; win.sign=false) so CI/local builds work without certs.\n- Add docs/packaging.md explaining how to enable signing later:\n  - macOS notarized signing: set env CSC_LINK (base64 .p12 or .cert), CSC_KEY_PASSWORD, APPLE_ID, APPLE_APP_SPECIFIC_PASSWORD (or use API key via APPLE_API_ISSUER/APPLE_API_KEY/APPLE_API_KEY_ID), remove mac.identity:null in config or set CSC_IDENTITY_AUTO_DISCOVERY=true.\n  - Windows signing: set WIN_CSC_LINK and WIN_CSC_KEY_PASSWORD (or CSC_* equivalents) and remove the win.sign=false override in scripts.\n- Clearly state that without these env vars, builds remain unsigned and will still produce distributables.\n\n10) Local verification (per OS)\n- macOS: npm run dist:mac -> verify dist/*.dmg exists; open DMG and install. Check bundle metadata: Finder > App > Get Info for name/version.\n- Windows: npm run dist:win -> verify dist/*.exe exists; run installer; check installed app About or executable Properties > Details for name/version.\n- Linux: npm run dist:linux -> verify dist/*.AppImage exists; chmod +x and run; check app about dialog.\n\n11) Acceptance checklist\n- CI and local `npm run dist:*` produce artifacts in dist/ for macOS (dmg), Windows (nsis exe), Linux (AppImage).\n- Metadata (name, version, copyright) appear correctly in installers/apps.\n- Auto-updates are disabled (publish: \"never\"; no updater initialized by default).\n- Code signing is documented but off by default; enabling requires providing secrets and adjusting config.\n",
      "context": [],
      "acceptance": [],
      "dependencies":["2.18"]
    },
    {
      "id": "2.20",
      "status": "-",
      "title": "CI pipeline for build and release",
      "description": "Add GitHub Actions workflows to lint, type-check, build, and produce release artifacts on tags. Cache dependencies for speed. Optionally draft release with artifacts attached. Acceptance: CI green on main; tag push triggers build for all OS targets; artifacts downloadable; secrets managed securely (no plaintext keys).",
      "plan": "CI pipeline for build and release (Electron + React app)\n\nGoal\n- Add CI that:\n  - Lints, type-checks, and runs tests on push/PR to main.\n  - On tag push, builds production artifacts for macOS, Windows, Linux, uploads them as workflow artifacts, and drafts a GitHub Release with assets attached.\n  - Uses dependency and electron caches for speed.\n  - Uses only GITHUB_TOKEN (no plaintext keys), with optional code-signing/notarization env vars if configured.\n\nAssumptions\n- Repo is the Local Electron+React app (separate repo).\n- Build tool: electron-builder (standard for cross-OS packaging). If not yet chosen, this plan includes adding the minimal configuration needed.\n- Package manager is auto-detected by lockfile: pnpm-lock.yaml -> pnpm; yarn.lock -> yarn; package-lock.json -> npm.\n- Node 20 is the baseline (LTS).\n\nPlan\n1) Ensure package.json scripts and electron-builder config exist\n   - Add these scripts (adjust for your PM: npm/yarn/pnpm):\n     - \"lint\": \"eslint .\",\n     - \"typecheck\": \"tsc -p . --noEmit\" (or appropriate tsconfig path),\n     - \"test\": \"vitest run --coverage\" (or your chosen test runner),\n     - \"build:web\": \"vite build\" (or react-scripts build),\n     - \"build:main\": \"tsc -p tsconfig.main.json --noEmit false\" (if you split main/renderer),\n     - \"build:ci\": \"npm run build:web && npm run build:main\",\n     - \"dist\": \"electron-builder -c electron-builder.yml\"\n   - Add electron-builder config (choose either package.json `build` field or `electron-builder.yml`). Example electron-builder.yml:\n     ---\n     appId: com.yourorg.localapp\n     productName: LocalApp\n     directories:\n       output: dist\n     files:\n       - \"packages/**/dist/**\"\n       - \"dist/**\"\n       - \"build/**\"\n       - \"package.json\"\n     mac:\n       target: [\"dmg\", \"zip\"]\n       category: public.app-category.productivity\n     win:\n       target: [\"nsis\"]\n     linux:\n       target: [\"AppImage\", \"deb\"]\n       category: Utility\n     publish: \"never\"\n   - Ensure the build output of renderer and main ends up where electron-builder expects (adjust files list accordingly).\n\n2) Add dependency caches and electron caches strategy\n   - Use actions/setup-node with `cache` auto-detection for npm/yarn/pnpm.\n   - Cache electron/electron-builder using actions/cache with paths:\n     - ~/.cache/electron\n     - ~/.cache/electron-builder\n   - Set env vars to avoid signing prompts in CI: `CSC_IDENTITY_AUTO=false` and `CI=true`.\n\n3) Create CI workflow for push/PR: .github/workflows/ci.yml\n   - Trigger: on push to any branch, pull_request targeting main.\n   - Jobs: lint-typecheck-test-build\n     - runs-on: ubuntu-latest\n     - Steps (pseudocode YAML; adapt PM based on lockfile):\n       - actions/checkout@v4\n       - actions/setup-node@v4 with node-version: 20 and cache: auto\n       - If pnpm: pnpm/action-setup@v4 with version: 9 and run_install: true; else run install for npm/yarn\n       - actions/cache@v4 for electron caches\n       - Run lint: `npm run lint`\n       - Run typecheck: `npm run typecheck`\n       - Run test: `npm run test`\n       - Run build check: `npm run build:ci`\n   - Set `concurrency: ci-${{ github.ref }}-push` with `cancel-in-progress: true` to keep queue lean.\n\n   Example ci.yml:\n   name: CI\n   on:\n     push:\n       branches: [\"*\"]\n     pull_request:\n       branches: [\"main\"]\n   concurrency:\n     group: ci-${{ github.ref }}\n     cancel-in-progress: true\n   jobs:\n     build:\n       runs-on: ubuntu-latest\n       steps:\n         - uses: actions/checkout@v4\n         - uses: actions/setup-node@v4\n           with:\n             node-version: 20\n             cache: \"auto\"\n         - if: hashFiles('pnpm-lock.yaml') != ''\n           uses: pnpm/action-setup@v4\n           with:\n             version: 9\n             run_install: true\n         - if: hashFiles('yarn.lock') != ''\n           run: yarn install --frozen-lockfile\n         - if: hashFiles('package-lock.json') != ''\n           run: npm ci\n         - name: Cache Electron\n           uses: actions/cache@v4\n           with:\n             path: |\n               ~/.cache/electron\n               ~/.cache/electron-builder\n             key: ${{ runner.os }}-electron-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}\n         - run: npm run lint --if-present\n         - run: npm run typecheck --if-present\n         - run: npm run test --if-present\n         - run: npm run build:ci --if-present\n\n4) Create Release workflow for tags: .github/workflows/release.yml\n   - Trigger: on push tags matching v* (e.g., v2.2.3).\n   - permissions: contents: write (required to create release and upload assets with GITHUB_TOKEN).\n   - Strategy: matrix over os: [macos-latest, windows-latest, ubuntu-latest].\n   - Each matrix job:\n     - Checkout, setup Node 20 with cache, install deps (pnpm/yarn/npm as above), cache electron.\n     - Set env: CSC_IDENTITY_AUTO=false, CI=true.\n     - Build artifacts via electron-builder for the OS:\n       - macOS: `npx electron-builder --mac dmg zip`\n       - Windows: `npx electron-builder --win nsis`\n       - Linux: `npx electron-builder --linux AppImage deb`\n     - Upload built files from dist/ as artifacts with a unique name per OS.\n   - Final aggregator job (ubuntu): needs all matrix jobs; downloads artifacts; creates or updates a draft GitHub Release and attaches all artifacts.\n   - No secrets required; uses `GITHUB_TOKEN` automatically granted.\n\n   Example release.yml:\n   name: Release\n   on:\n     push:\n       tags:\n         - \"v*\"\n   permissions:\n     contents: write\n   jobs:\n     build:\n       name: Build (${{ matrix.os }})\n       strategy:\n         matrix:\n           os: [ubuntu-latest, macos-latest, windows-latest]\n       runs-on: ${{ matrix.os }}\n       steps:\n         - uses: actions/checkout@v4\n         - uses: actions/setup-node@v4\n           with:\n             node-version: 20\n             cache: \"auto\"\n         - if: hashFiles('pnpm-lock.yaml') != ''\n           uses: pnpm/action-setup@v4\n           with:\n             version: 9\n             run_install: true\n         - if: hashFiles('yarn.lock') != ''\n           run: yarn install --frozen-lockfile\n         - if: hashFiles('package-lock.json') != ''\n           run: npm ci\n         - name: Cache Electron\n           uses: actions/cache@v4\n           with:\n             path: |\n               ~/.cache/electron\n               ~/.cache/electron-builder\n             key: ${{ runner.os }}-electron-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}\n         - name: Build artifacts\n           env:\n             CSC_IDENTITY_AUTO: false\n             CI: true\n           run: |\n             if [[ \"${{ runner.os }}\" == \"macOS\" ]]; then npx electron-builder --mac dmg zip; fi\n             if [[ \"${{ runner.os }}\" == \"Windows\" ]]; then npx electron-builder --win nsis; fi\n             if [[ \"${{ runner.os }}\" == \"Linux\" ]]; then npx electron-builder --linux AppImage deb; fi\n         - name: Upload artifacts\n           uses: actions/upload-artifact@v4\n           with:\n             name: dist-${{ runner.os }}\n             path: dist/**\n     publish:\n       name: Publish GitHub Release\n       runs-on: ubuntu-latest\n       needs: build\n       steps:\n         - uses: actions/download-artifact@v4\n           with:\n             path: ./artifacts\n         - name: Create/Update Release and Upload Assets\n           uses: softprops/action-gh-release@v2\n           with:\n             draft: true\n             files: ./artifacts/**\n           env:\n             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n5) Optional code-signing and notarization (secure handling)\n   - Do not store any signing keys in the repo.\n   - If/when you want signed notarized builds:\n     - Add repo secrets (not plaintext):\n       - For macOS: APPLE_ID, APPLE_APP_SPECIFIC_PASSWORD, CSC_IDENTITY_NAME or use API key for notarization.\n       - For Windows: CSC_LINK (base64 of .pfx in a secure secret), CSC_KEY_PASSWORD.\n     - Update release.yml to conditionally set env vars if secrets exist (e.g., only sign when `secrets.CSC_LINK` is set). Keep default unsigned otherwise.\n\n6) Documentation\n   - Add docs/ci.md explaining:\n     - What workflows exist and when they run.\n     - How to trigger a release: `git tag vX.Y.Z && git push origin vX.Y.Z`.\n     - Where to find artifacts (Actions run artifacts and Releases page).\n     - How caching works.\n     - How to configure signing via repo secrets.\n\n7) Housekeeping\n   - Ensure dist/ is gitignored.\n   - Ensure ESLint/TS config is present to make lint/typecheck meaningful.\n   - Set badges in README for CI status (optional): `![CI](https://github.com/<org>/<repo>/actions/workflows/ci.yml/badge.svg)`.\n\n8) Verification steps (acceptance)\n   - Push a branch/PR: CI should run lint/typecheck/test/build and pass (green on main upon merge).\n   - Create a tag v0.2.0 and push: three matrix jobs should produce OS-specific artifacts; publish job should create a draft release with all artifacts attached.\n   - Open the Actions tab to download artifacts from the run.\n   - Open the Releases page to confirm artifacts attached to the new draft release.\n   - Confirm no secrets in plaintext in the repo; only GITHUB_TOKEN is used by default.\n\nNotes/Contingencies\n- If repo uses Yarn/Pnpm, the workflows auto-detect by lockfile. If monorepo, adjust install commands and working-directory or add a root-level script to orchestrate build.\n- If Electron app requires native dependencies (node-gyp), windows-latest and macos-latest images include build tools; if needed, add `actions/setup-python@v5` with python-version 3.x and install build-essential on Linux.\n- If your build requires a display, avoid running the app in CI; packaging with electron-builder does not require xvfb.\n",
      "context": [],
      "acceptance": [],
      "dependencies":["2.19"]
    },
    {
      "id": "2.21",
      "status": "-",
      "title": "Developer documentation and runbook",
      "description": "Complete docs: ARCHITECTURE.md (process boundaries, IPC contract), DEVELOPMENT.md (setup, scripts), SECURITY.md (IPC, sandbox, tool restrictions), PROVIDERS.md (LLM connectors), AGENTS.md (how agent processes are managed), and a quickstart. Acceptance: Docs pass link check; examples tested; contributors can set up locally following docs without assistance.",
      "plan": "Developer Documentation and Runbook Plan (Feature 5.22)\n\nGoal\nProduce complete developer documentation for the Local Electron+React app so contributors can understand architecture, set up and run the project, reason about security, add LLM providers, and manage agent processes. Ensure docs pass link checks and examples are tested so a contributor can set up locally without assistance.\n\nDeliverables\n- /docs/ARCHITECTURE.md: Process boundaries, components, IPC contract, data flows\n- /docs/DEVELOPMENT.md: Environment setup, scripts, build, test, troubleshooting\n- /docs/SECURITY.md: Threat model, IPC hardening, sandboxing, tool restrictions\n- /docs/PROVIDERS.md: LLM connectors (LiteLLM, OpenAI, LM Studio, Ollama), config\n- /docs/AGENTS.md: Agent process management, lifecycle, adding new agents\n- /docs/QUICKSTART.md: 10-minute path to running the app and seeing value\n- Docs tooling: link checks, markdown lint; CI job to verify\n- Example snippets referenced by docs that can be executed/verified locally\n\nAssumptions\n- Repo uses Electron (main, preload), React renderer, TypeScript\n- Agents run as local Node child processes with a tool registry\n- LLM access is abstracted behind provider connectors (current: LiteLLM) with ability to add others (LM Studio, Ollama, OpenAI)\n\nImplementation Steps\n\n1) Prepare docs workspace\n2.1 Create /docs directory at repo root with the following files:\n- /docs/ARCHITECTURE.md\n- /docs/DEVELOPMENT.md\n- /docs/SECURITY.md\n- /docs/PROVIDERS.md\n- /docs/AGENTS.md\n- /docs/QUICKSTART.md\n- /docs/README.md (index linking the above)\n- /docs/snippets/ (folder for code snippets referenced by docs)\n2.2 Add /docs/_assets/ for future diagrams/screenshots (placeholder images).\n2.3 Add a docs index section to top-level README pointing to /docs.\n\n2) Add docs quality tooling\n2.1 Add devDependencies:\n- markdownlint-cli2 (style)\n- remark, remark-cli, remark-validate-links (broken link checking)\n- optional: cspell (spelling), but not required for acceptance\n2.2 Add configuration files:\n- .markdownlint.jsonc with common rules and overrides for code blocks\n- .remarkrc.mjs with validate-links plugin and local reference handling\n2.3 Add npm scripts in package.json:\n- \"docs:lint\": \"markdownlint-cli2 \\\"**/*.md\\\" --ignore node_modules --ignore dist\"\n- \"docs:links\": \"remark . --quiet --frail\"\n- \"docs:check\": \"npm run docs:lint && npm run docs:links\"\n2.4 Add GitHub Actions workflow .github/workflows/docs.yml to run docs:check on push/PR.\n\n3) Author ARCHITECTURE.md\n3.1 Purpose & scope\n- What the app is: local Electron+React project management console for the factory\n- Non-goals: cloud services, remote management (future work)\n3.2 High-level architecture diagram (Mermaid, included inline)\n- Processes: Electron main, preload, renderer (React), Agent Manager (child processes), Git worker, LLM provider clients\n3.3 Process boundaries\n- Main process responsibilities: app lifecycle, IPC routing, file system, spawn agents, notifications\n- Preload: contextBridge, safe API surface to renderer, channel whitelist\n- Renderer (React): UI only, no Node APIs, uses typed IPC calls via preload\n- Agent processes: spawned Node processes, isolated working dirs, logs, lifecycle\n3.4 IPC contract (versioned)\n- Channel naming convention: app/<domain>/<action> with version suffix (e.g., v1)\n- Message envelope: { id, type, payload, ts }, response: { id, ok, data?, error? }\n- List required channels with TypeScript interfaces (inlined and also as /docs/snippets/ipc.ts)\n  Examples:\n  - app/v1/agents.list -> returns AgentSummary[]\n  - app/v1/agents.start { agentId, config? } -> AgentStatus\n  - app/v1/agents.stop { agentId }\n  - app/v1/git.status { repoPath } -> GitStatus\n  - app/v1/tasks.list, tasks.update\n  - app/v1/docs.list, docs.get\n  - app/v1/chat.send { provider, model, message, tools: readonly[] } -> stream/token events\n3.5 Data storage and state\n- Project workspace directories, config files, caches (LLM), logs\n- Git integration (read repo status; write only on explicit actions)\n3.6 LLM provider abstraction\n- Provider interface, capability detection, streaming mode, rate limiting\n3.7 Notifications & background jobs\n- OS notifications, tray integration, background checks\n3.8 Extensibility\n- Plug-in points: providers, agents, tools; IPC versioning strategy\n\n4) Author AGENTS.md\n4.1 Agent model\n- Agent definition (id, name, purpose, tools allowed, working dir)\n- Tool registry (capabilities, read-only vs write), permission model\n4.2 Lifecycle management\n- Spawn via child_process, env injection, config hydration\n- Heartbeat/health checks; graceful shutdown and timeouts\n- Crash detection and auto-restart policy\n4.3 I/O and logs\n- stdout/stderr capture; log file rotation; log streaming via IPC\n4.4 Agent status in UI\n- States: idle, running, blocked, finished; progress events\n4.5 Adding a new agent\n- Folder structure/template\n- Required manifest (YAML/JSON) with metadata and tool permissions\n- How to register agent with the app\n4.6 Security constraints for agents\n- Least privilege FS access (scoped paths)\n- Network access policy (default off / restricted)\n- Tool allowlist; read-only tools for chat-driven sessions\n4.7 Example\n- Provide /docs/snippets/agent.manifest.example.yaml\n\n5) Author PROVIDERS.md\n5.1 Provider interface\n- Methods: listModels, generate, stream, embeddings (optional)\n- Config shape (apiBase, apiKey, model, headers)\n5.2 Built-in connectors\n- LiteLLM: usage and configuration\n- OpenAI: direct API usage\n- LM Studio: local server configuration (port, models); test curl commands\n- Ollama: local endpoint examples, model pull/run\n5.3 Configuration\n- .env and app settings; per-provider fields and precedence\n- Rate limits, retries, timeouts\n5.4 Switching providers\n- UI setting vs env var; fallbacks\n5.5 Testing providers\n- /docs/snippets/provider.smoketest.http (http file with sample requests)\n- Quick Node script snippet to validate connectivity\n\n6) Author SECURITY.md\n6.1 Threat model\n- Local app; untrusted repositories; LLM prompt injection; malicious agents\n6.2 Electron hardening\n- contextIsolation: true, sandbox: true, disable remote module\n- nodeIntegration: false in renderer; trusted preload only\n- Content-Security-Policy; disable eval; no insecure http loads\n6.3 IPC security\n- Strict channel allowlist; Zod schema validation on both ends\n- Never pass raw user input to privileged operations without validation\n- Error handling without leaking sensitive paths\n6.4 Tool restrictions\n- Read-only tool set for chat; permission prompts for escalations\n- Path whitelisting for FS operations; no shell exec from renderer\n6.5 Secrets management\n- .env.local (gitignored); OS keychain integration roadmap\n6.6 Dependency hygiene\n- npm audit, lockfile policy, signed binaries for release\n6.7 Git interactions\n- Only explicit writes; dry-run previews; safe merges\n6.8 Updates and signing (roadmap)\n\n7) Author DEVELOPMENT.md\n7.1 Prerequisites\n- Node.js LTS version, npm/pnpm, OS build deps for Electron\n- Git; optional: LM Studio/Ollama install links\n7.2 Cloning and installing\n- git clone, npm i (or pnpm i) commands\n7.3 Running the app\n- npm run dev: start main+renderer with hot reload\n- npm run typecheck, test, lint\n7.4 Building\n- npm run build; npm run package (if using electron-builder/forge)\n7.5 Environment variables\n- .env examples for providers (OPENAI_API_KEY, LMSTUDIO_BASE_URL, OLLAMA_BASE_URL)\n7.6 Debugging\n- DevTools; logging locations; enabling verbose logs via env\n7.7 Scripts overview\n- docs:*, test:*, agents:*\n7.8 Troubleshooting\n- Common errors and fixes (Electron build tools on Windows, provider connection failures)\n\n8) Author QUICKSTART.md\n8.1 Goal-based path in ~10 minutes\n- Install prerequisites\n- Clone repo and install dependencies\n- Start LM Studio or Ollama (optional path if no cloud key)\n- Create .env from example (pick a provider)\n- npm run dev to launch\n- Connect to a local project path in the app\n- Start a sample agent; watch status\n- Open Chat; select provider; send a message (read-only tools)\n- View Markdown docs rendered in the app\n- Optional: check git status view\n8.2 Screenshots placeholders ((add later)) and callouts\n8.3 Next steps and links to other docs\n\n9) Create executable examples/snippets\n9.1 /docs/snippets/ipc.ts\n- TypeScript interfaces for IPC messages and validation example (Zod). Ensure code compiles with ts-node.\n9.2 /docs/snippets/provider.smoketest.http\n- HTTP requests for LM Studio and Ollama; include curl variants\n9.3 /docs/snippets/agent.manifest.example.yaml\n- Minimal agent manifest with read-only tools\n9.4 Add npm scripts to validate examples:\n- \"docs:examples:ts\": \"ts-node --compiler-options '{\\\"module\\\":\\\"commonjs\\\"}' docs/snippets/ipc.ts --check\"\n- \"docs:examples\": \"npm run docs:examples:ts\"\n\n10) Link and content validation\n10.1 Ensure all intra-doc links are relative and correct\n10.2 Run npm run docs:check locally; fix any broken links\n10.3 Validate example commands:\n- Execute provider curls against running LM Studio/Ollama and note expected outputs in docs\n- Confirm ts snippet typechecks/executes\n10.4 Have a teammate or clean VM dry-run QUICKSTART and note friction points; update docs accordingly\n\n11) Wire acceptance checks\n12.1 Verify docs:check passes locally and in CI\n12.2 Verify examples runnable (ts compiles; curl commands return 200 with instructions if server not running)\n12.3 Confirm a new contributor can set up and run the app using QUICKSTART + DEVELOPMENT.md without assistance\n\n12) Maintenance & contribution guidance\n12.1 Add Docs section to CONTRIBUTING.md\n- How to add/modify docs; writing style checklist\n- How to add new provider/agent and update docs accordingly\n12.2 Add a PR checklist item: \"docs updated and docs:check passes\"\n\nContent Notes and Standards\n- Use Mermaid for diagrams in ARCHITECTURE.md\n- Include explicit versioning for the IPC contract and change log notes when channels change\n- Mark experimental features with stability tags\n- Keep provider credentials optional with local-first setups (LM Studio/Ollama)\n- All code blocks specify language for syntax highlighting\n\nOut-of-Scope (Future)\n- Full static doc site (Docusaurus) – optional future enhancement\n- Automated screenshot generation\n\nCompletion Criteria Mapping\n- Docs pass link check: Achieved via remark-validate-links in npm script + CI\n- Examples tested: Typescript snippet compiles; provider curls return; documented expectations\n- Contributors can set up locally: QUICKSTART + DEVELOPMENT.md tested on fresh environment and refined\n",
      "context": [],
      "acceptance": [],
      "dependencies":["2.20"]
    }
  ]
}
