{
  "id": "c895c02d-7c6a-4b77-a3ae-4e9ede935c2c",
  "status": "~",
  "title": "Integrate `thefactory-db`",
  "description": "A new project has been added to this one 'thefactory-db' . It allows storing documents and entities into a database and performing hybrid search on them (tokenized + embedding search). 'thefactory-tools' is already updated to use it - mainly for the 'search_files' tool that this projects 'FilesManager' uses.\n\nThis project needs to be the one that initiates the connection with 'thefactory-db'. It will then pass the appropriate connection info to 'thefactory-tools'.\nApart from integrating with both of the packages well - this project also needs to make sure that all the files within this project's repo are added to 'thefactory-db' and its \"documents\" table (there's a \"addDocument\" function exposed). Documents are text conten. For code files within this project, we should assign a \"project_code\" type to them. For any other project related file - \"project_file\", and for any external files in the future \"external_file\". \nOn app start - during the loading screen - each project needs to be checked to see if all the relevant documents are in the database - and if not, they need to be added. While the app is working and there are changes to the project's files - they should be appropriately updated.",
  "features": [
    {
      "id": "ab20c3bb-f4d7-46be-84be-da04e14019ac",
      "status": "-",
      "title": "Add thefactory-db initialization service in main process",
      "description": "Create @src/db/DatabaseManager.js to encapsulate initializing and managing a thefactory-db connection. It should read connection settings from the user supplied connection string in @src/renderer/contexts/AppSettingsContext.tsx . \nProvide async init(), getClient(), and stopWatching()/close() methods. Export and wire it in @src/managers.js  (add dbManager export), instantiate before @src/factory-tools/FactoryToolsManager.js , call init() during startup, and close on app shutdown in stopManagers().",
      "context": [
        "src/renderer/contexts/AppSettingsContext.tsx",
        "src/factory-tools/FactoryToolsManager.js",
        "src/managers.js"
      ],
      "blockers": []
    },
    {
      "id": "4de17e9f-a521-4bb0-8e4e-a82476c5ed35",
      "status": "-",
      "title": "Pass DB connection to thefactory-tools orchestrator",
      "description": "Update @src/factory-tools/FactoryToolsManager.js s to accept a db connection/info. Modify constructor to receive the DatabaseManager (or its connection parameters) from initManagers. When calling createOrchestrator from thefactory-tools, include a new option db (or dbConfig) per the updated thefactory-tools API. If the API expects env vars, set them before initializing the orchestrator. Ensure search_files tool used by the orchestrator can leverage the same DB instance.",
      "context": [
        "src/factory-tools/FactoryToolsManager.js"
      ],
      "blockers": []
    },
    {
      "id": "e8eb3ac3-1b01-4ffd-80ce-6b40efdb0356",
      "status": "-",
      "title": "Implement DocumentIngestionService for project files",
      "description": "Create @src/db/DocumentIngestionService.js to handle scanning the repository files and upserting them into thefactory-db 'documents' table using addDocument(). Determine document type: 'project_code' for code files (js, ts, tsx, jsx, json, md, css, etc. configurable), 'project_file' for other internal files, 'external_file' reserved for future. For each project (from @src/projects/ProjectsManager.js ), resolve its root directory and iterate via @src/files/FilesManager.js  or a direct file walk (reuse ignore patterns from @src/files/FilesStorage.js). For each file, compute a stable document identifier (e.g., projectId + relative path), content hash, metadata (path, projectId, ext, size, mtime, type). Upsert if missing or if hash/mtime changed; delete or mark archived on file removal. Expose methods: syncAllProjects(), syncProject(projectId), handleFileAdded/Changed/Deleted(projectId, relPath).",
      "context": [
        "src/projects/ProjectsManager.js",
        "src/files/FilesStorage.js",
        "src/files/FilesManager.js"
      ],
      "blockers": []
    },
    {
      "id": "9834258a-c115-4554-9a3f-3209c6b66686",
      "status": "-",
      "title": "Wire ingestion at app startup during loading flow",
      "description": "In @src/managers.js , after projectsManager.init() and before exposing UI as fully loaded, trigger DocumentIngestionService.syncAllProjects() so the database is populated on app start. Optionally add a simple IPC channel (e.g., db:ingestion:status) to report progress to the LoadingScreen. Update @src/renderer/screens/LoadingScreen.tsx  to wait not only for settings but also ingestion to complete (e.g., via a preload API that reports when startup sync is done) and show a message like 'Indexing project filesâ€¦'. Keep the UI responsive if sync takes long by enabling progress updates.",
      "context": [
        "src/managers.js",
        "src/renderer/screens/LoadingScreen.tsx"
      ],
      "blockers": []
    },
    {
      "id": "a47c5301-d7b0-4b61-af16-722819909733",
      "status": "-",
      "title": "Hook file watcher events to update thefactory-db",
      "description": "Extend @src/files/FilesStorage.js  to emit file change events via an event emitter or callbacks (add onChange hook). In \n@src/files/FilesManager.js '__getStorage' pass handlers from DocumentIngestionService so that on 'add', 'change', 'unlink', 'rename' the corresponding handleFileAdded/Changed/Deleted is called, updating the 'documents' table accordingly. Ensure ignore patterns match FilesStorage. For rename, implement a two-step (delete old + add new) or dedicated move update if thefactory-db supports it.",
      "context": [
        "src/files/FilesStorage.js",
        "src/files/FilesManager.js"
      ],
      "blockers": []
    },
    {
      "id": "d744a0cb-1b0b-4669-a692-7a9751e2eb9e",
      "status": "-",
      "title": "Define document typing and code file detection utility",
      "description": "Add @src/db/fileTyping.js with helpers: isCodeFile(ext, relPath) returning true for typical code/config/docs; classifyDocumentType(relPath) returning 'project_code' or 'project_file'. Use a central list of extensions and allow future configuration via settings. Reuse in DocumentIngestionService and watcher handlers to ensure consistent type assignment.",
      "context": [],
      "blockers": []
    },
    {
      "id": "d172d15d-98ca-434e-8fc7-4ea476821f51",
      "status": "-",
      "title": "Expose minimal DB/search config to renderer and settings",
      "description": "Add optional app settings (in @src/settings/SettingsManager.js  schema if present) to configure DB location or connection string. Expose methods over IPC to read current DB status and last sync time. Update preload to include a dbService with getStatus() and onStatus(callback) if needed by the @src/renderer/screens/LoadingScreen.tsx .",
      "context": [
        "src/settings/SettingsManager.js",
        "src/renderer/screens/LoadingScreen.tsx"
      ],
      "blockers": []
    },
    {
      "id": "3535faff-05d1-4ae0-9b32-7192685536da",
      "status": "-",
      "title": "Update FILE_ORGANISATION.md with db subsystem",
      "description": "Document new src/db/ directory and its responsibilities: DatabaseManager (connection lifecycle), DocumentIngestionService (project file sync to thefactory-db), and fileTyping utility. Keep bullets concise and aligned with the existing documentation conventions.",
      "context": [],
      "blockers": []
    },
    {
      "id": "7d59b560-086e-4879-a1a6-9e051db6434f",
      "status": "-",
      "title": "Add unit/integration scaffolding for ingestion service",
      "description": "Introduce a simple script or dev command to run a one-off sync (e.g., scripts/sync-docs.js) using the same services, useful for testing. Optionally add a basic test (if testing infra exists) to validate classification and upsert logic using a temp directory and an in-memory or temp DB.",
      "context": [],
      "blockers": []
    },
    {
      "id": "6d115a0f-2c64-4e6a-bbbc-51ef9a2eed84",
      "status": "+",
      "title": "It's possible to configure the 'thefactory-db' postgresql connection string",
      "description": "Inside @src/renderer/screens/SettingsView.tsx there needs to be a new section - Database - where the user will be able to provide the connection string to use for connecting with 'thefactory-db' or any extra databases that could potentially be used in the future.\nThis needs to be stored and loaded on app startup like other app settings in @src/renderer/contexts/AppSettingsContext.tsx and @src/settings/appSettings.js",
      "plan": "",
      "context": [
        "src/renderer/screens/SettingsView.tsx",
        "src/renderer/contexts/AppSettingsContext.tsx",
        "src/settings/appSettings.js"
      ],
      "acceptance": [],
      "blockers": []
    }
  ],
  "featureIdToDisplayIndex": {
    "6d115a0f-2c64-4e6a-bbbc-51ef9a2eed84": 1,
    "ab20c3bb-f4d7-46be-84be-da04e14019ac": 2,
    "4de17e9f-a521-4bb0-8e4e-a82476c5ed35": 3,
    "e8eb3ac3-1b01-4ffd-80ce-6b40efdb0356": 4,
    "9834258a-c115-4554-9a3f-3209c6b66686": 5,
    "a47c5301-d7b0-4b61-af16-722819909733": 6,
    "d744a0cb-1b0b-4669-a692-7a9751e2eb9e": 7,
    "d172d15d-98ca-434e-8fc7-4ea476821f51": 8,
    "3535faff-05d1-4ae0-9b32-7192685536da": 9,
    "7d59b560-086e-4879-a1a6-9e051db6434f": 10
  }
}