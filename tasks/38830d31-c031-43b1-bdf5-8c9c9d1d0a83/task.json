{
  "id": "38830d31-c031-43b1-bdf5-8c9c9d1d0a83",
  "status": "-",
  "title": "Code projects need to be more clever in terms of dependency resolution, structure, architecture and cleanliness",
  "description": "There are a few issues that need to be resolved under this task:\n1) a new package needs to be added, but the agents don't know about it (what it does and what the interfaces are). In fact even if there already is a package, its interfaces are not known and the purpose of the package isn't obvious. Therefore there must be a scheme, probably creating a file called PACKAGES.md - that will keep up to date information about what each package does and what are the most important interfaces.\n2) There's architecture and patterns for every project that are established. Even for this project these are not really carried out by an agent, cos it's difficult to infer this information. For instance how managers are created in this project - i.e. they get initialised in src/managers.js, they are created in their folder like src/tasks/TasksManager.js , they have keys for IPC defined in src/ipcHandlersKeys.js and they expose an API in src/preload.js, which the renderer side consumes for TasksManager for instance in  src/renderer/services/tasksService.ts and always also updates src/types/external.d.ts .\nSo there's a lot of information just here, for this 1 pattern - this needs to be captured for this project and a way of capturing such patterns and then passing them onto an agent must be written down.\n3) docs/FILE_ORGANISATION.md is meant to serve as an overview of the app, but still it doesn't capture many intricacies. For instance it doesn't explain how this project uses thefactory-tools to run agents, and how thefactory-tools and this project both use thefactory-db to store document data. There probably needs to be a document ARCHITECTURE.md that describes these. There also needs to be a good strategy in terms of how/when this should be injected into the prompt for agents. Currently the main prompt is created in the local project 'thefactory-tools' - in the file 'src/orchestrator.ts' and the function 'constructSystemPrompt'.\n\n4) Similarly to the architecture above, we have some files under docs/ux, docs/styleguide and docs/design - but there's so many of them that we cannot easily inject them to the agent prompt (they would also consume a lot of tokens if we always supply them). We must have a strategy for cleverly mentioning/linking them inside at least docs/FILE_ORGANISATION.md so that every agent that produces UI components would consult them. In fact there should be a small GO TO ui doc that explains the overall rules to follow and if there's more details an agent would need, they could read some component/pattern specific docs.",
  "features": [],
  "featureIdToDisplayIndex": {}
}
