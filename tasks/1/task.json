{
  "id": 1,
  "status": "-",
  "title": "Electron + React + TypeScript scaffold",
  "description": "Initialize the app using a modern toolchain (electron-vite with React + TypeScript). Include scripts: dev, build, lint, format. Ensure secure defaults: contextIsolation=true, sandbox where applicable, separate main, preload, and renderer packages. Acceptance: `pnpm/npm run dev` runs the app with React UI placeholder; `... build` yields a runnable app in dist; TypeScript config present; eslint/prettier configured.",
  "features": [
    {
      "id": "1.1",
      "status": "-",
      "title": "Initialize Project with electron-vite",
      "description": "Use the `pnpm create electron-vite` command to scaffold a new project. Select the `react-ts` template. This will generate the initial project structure, including separate directories for main, preload, and renderer code, along with default TypeScript and ESLint configurations.",
      "plan": "Title: Initialize Project with electron-vite (react-ts template) under apps/desktop\n\nObjective\n- Scaffold a new Electron app using electron-vite with React + TypeScript under apps/desktop.\n- Ensure separate main, preload, and renderer packages.\n- Add scripts: dev, build, lint, format.\n- Ensure secure defaults: contextIsolation=true, sandbox=true, nodeIntegration=false, enableRemoteModule=false.\n- Provide a single automation script to set everything up and documentation on how to use it.\n- Provide root-level scripts so `pnpm run dev` or `npm run dev` from repo root works.\n- Update docs/FILE_ORGANISATION.md for the new directory.\n\nPrerequisites\n- Node.js >= 18.x installed.\n- pnpm installed (preferred). Fallback to npm if pnpm is not available.\n\nPlan\n1) Create a new feature branch\n   - git checkout -b feature/1.1-electron-vite-scaffold\n\n2) Add automation script to scaffold the app\n   - Create scripts/scaffold-electron-vite.sh (make it executable: chmod +x scripts/scaffold-electron-vite.sh)\n   - Script responsibilities:\n     - Exit on error (set -euo pipefail).\n     - Determine package manager: prefer pnpm if available; otherwise use npm.\n     - Set APP_DIR=apps/desktop.\n     - If APP_DIR already exists, prompt to abort to avoid overwriting (or accept a --force flag to remove it).\n     - Run the scaffold command non-interactively:\n       - If using pnpm: pnpm create electron-vite \"$APP_DIR\" --template react-ts\n       - If using npm: npm create electron-vite@latest \"$APP_DIR\" -- --template react-ts\n     - Install dependencies inside APP_DIR:\n       - If pnpm: pnpm install\n       - Else: npm install\n     - Install and configure Prettier integration:\n       - Add devDeps in APP_DIR: prettier eslint-config-prettier eslint-plugin-prettier\n         - pnpm add -D prettier eslint-config-prettier eslint-plugin-prettier (or npm i -D ...)\n       - Create APP_DIR/.prettierrc.json with a sensible default (e.g., { \"singleQuote\": true, \"semi\": true, \"trailingComma\": \"all\" })\n       - Create APP_DIR/.prettierignore (node_modules, dist, out, coverage, .vite, .turbo, .next, build)\n     - Ensure ESLint extends Prettier to avoid conflicts:\n       - If APP_DIR/.eslintrc.* exists, append 'plugin:prettier/recommended' and extend 'prettier' (format-aware). If config is TypeScript or JSON, update accordingly.\n     - Add/ensure package.json scripts inside APP_DIR:\n       - dev: existing from template (keep)\n       - build: existing from template (keep)\n       - lint: \"eslint . --ext .ts,.tsx --max-warnings=0\"\n       - format: \"prettier --write .\"\n     - Harden Electron security defaults in APP_DIR:\n       - Edit apps/desktop/packages/main/src/index.ts (or main process entry) where BrowserWindow is constructed:\n         - webPreferences: set nodeIntegration: false, contextIsolation: true (should already be true), sandbox: true, enableRemoteModule: false, and preload set correctly.\n         - Ensure webSecurity remains true (default) and disableBlinkFeatures is not disabling security.\n       - Edit apps/desktop/packages/preload/src/index.ts:\n         - Use contextBridge.exposeInMainWorld to expose a minimal, explicit API with no direct Node.js exposure.\n       - Verify renderer does not use require in the window scope; keep isolated.\n     - Create or update .gitignore at repo root to ignore Electron build artifacts, e.g., apps/desktop/dist, apps/desktop/out, apps/desktop/release, apps/desktop/.vite.\n\n3) Add root-level wrapper package.json for unified scripts\n   - If repo root has no package.json, create one with:\n     - { \"name\": \"root\", \"private\": true, \"scripts\": { ... } }\n   - Add cross-PM wrapper scripts so users can run from repo root:\n     - dev: \"pnpm -C apps/desktop dev || npm run dev --prefix apps/desktop\"\n     - build: \"pnpm -C apps/desktop build || npm run build --prefix apps/desktop\"\n     - lint: \"pnpm -C apps/desktop lint || npm run lint --prefix apps/desktop\"\n     - format: \"pnpm -C apps/desktop format || npm run format --prefix apps/desktop\"\n   - Optionally add engines and packageManager metadata.\n\n4) Update documentation\n   - Update docs/FILE_ORGANISATION.md to include:\n     - New top-level apps/ directory and apps/desktop/ as the Electron app location.\n     - Under apps/desktop/packages/: main, preload, renderer separation (from electron-vite template).\n     - Notes on keeping task-related source under src/ and app code under apps/desktop to avoid collision.\n   - Create docs/apps/desktop/README.md with:\n     - Prerequisites (Node 18+, pnpm recommended).\n     - How to run: from repo root: pnpm run dev or npm run dev.\n     - How to build: pnpm run build or npm run build (output under apps/desktop/dist or release folder per electron-vite).\n     - Lint/format usage.\n     - Security defaults enabled (contextIsolation, sandbox) and where they are configured (main/src/index.ts, preload/src/index.ts).\n   - Add scripts/README.md describing scripts/scaffold-electron-vite.sh usage and flags.\n\n5) Run the automation locally to validate\n   - bash scripts/scaffold-electron-vite.sh\n   - From repo root, run:\n     - pnpm run dev (or npm run dev) and ensure an Electron window opens with the React placeholder UI.\n     - pnpm run build (or npm run build) and confirm a runnable app is produced under apps/desktop/dist or release directory as per electron-vite output.\n     - pnpm run lint and pnpm run format.\n\n6) Commit changes\n   - git add .\n   - git commit -m \"feat(app): scaffold electron-vite react-ts app under apps/desktop with secure defaults and root scripts\"\n   - Open a PR for review.\n\n7) Post-merge follow-ups (if needed)\n   - Set up CI caching for pnpm and build artifacts.\n   - Add code signing/packaging configs in future features (not required for this feature).\n\nDeliverables\n- apps/desktop/ scaffolded electron-vite project (react-ts template) with main/preload/renderer packages.\n- scripts/scaffold-electron-vite.sh for one-shot setup.\n- Root package.json wrapper scripts: dev, build, lint, format.\n- Prettier integrated and lint/format scripts configured.\n- Hardened Electron security defaults (contextIsolation=true, sandbox=true, nodeIntegration=false, enableRemoteModule=false).\n- Updated docs/FILE_ORGANISATION.md and docs/apps/desktop/README.md.\n- .gitignore updated for new build outputs.\n",
      "context": [],
      "acceptance": []
    },
    {
      "id": "1.2",
      "status": "-",
      "title": "Configure Linting and Formatting",
      "description": "Install project dependencies using `pnpm install`. Add Prettier for code formatting by installing `prettier` and `eslint-config-prettier`. Create a `.prettierrc` file with sensible defaults. Update the `.eslintrc.cjs` configuration to integrate with Prettier. Finally, add `lint` and `format` scripts to `package.json`.",
      "plan": "Plan: Configure Linting and Formatting (Feature 1.2)\n\n1) Create one-shot setup script\n- Create a new directory scripts/ at the repo root.\n- Add a Node ESM script scripts/setup-lint-format.mjs that performs all steps below idempotently (safe to re-run):\n  a. Ensure dependencies are installed:\n     - Execute: pnpm install\n  b. Add development dependencies:\n     - Execute: pnpm add -D prettier eslint-config-prettier\n  c. Create or update .prettierrc at repo root with the following JSON (merge or overwrite if needed):\n     {\n       \"semi\": false,\n       \"singleQuote\": true,\n       \"trailingComma\": \"all\",\n       \"printWidth\": 100\n     }\n  d. Create .prettierignore (if missing) with common ignores:\n     node_modules\n     dist\n     build\n     coverage\n     out\n     release\n     .next\n     .turbo\n  e. Ensure .eslintignore (if missing) includes:\n     node_modules\n     dist\n     build\n     coverage\n  f. Integrate Prettier into ESLint config:\n     - If .eslintrc.cjs exists:\n       \u2022 Read file as text and update the extends array to include 'prettier' as the last item if not already present.\n       \u2022 Example extends: ['eslint:recommended', 'plugin:@typescript-eslint/recommended', 'prettier']\n     - If .eslintrc.cjs does not exist, create a minimal one:\n       module.exports = {\n         root: true,\n         parser: '@typescript-eslint/parser',\n         plugins: ['@typescript-eslint'],\n         extends: ['eslint:recommended', 'plugin:@typescript-eslint/recommended', 'prettier'],\n       }\n  g. Update package.json to add scripts (merge without overwriting existing unrelated scripts):\n     - \"lint\": \"eslint . --ext .ts,.tsx,.js,.jsx --report-unused-disable-directives --max-warnings 0\"\n     - \"format\": \"prettier --write .\"\n     Notes:\n       \u2022 If a lint script exists, ensure it runs eslint against ts/tsx at minimum; otherwise, replace with the above.\n       \u2022 If a format script exists, ensure it invokes prettier --write .; otherwise, replace with the above.\n  h. Print a summary of actions taken.\n\nImplementation Notes for scripts/setup-lint-format.mjs:\n- Use Node's child_process (exec or spawn) to run pnpm commands.\n- Use fs/promises to read/write files.\n- Handle JSON reading/writing for package.json and .prettierrc robustly with try/catch.\n- For .eslintrc.cjs string updates, do minimal parsing: detect extends array with regex and append 'prettier' if missing; fall back to creating a new file if parsing fails.\n\n2) Run the setup script\n- Execute: node scripts/setup-lint-format.mjs\n- Re-run if necessary; it should be idempotent.\n\n3) Verify locally\n- Run: pnpm run lint (should pass or report actual code issues).\n- Run: pnpm run format (should format files without error).\n\n4) Documentation\n- Create docs/tasks/1/CONFIGURE_LINTING_FORMATTING.md detailing:\n  - Purpose of Prettier + ESLint integration.\n  - One-shot script usage (node scripts/setup-lint-format.mjs).\n  - What was installed/created (.prettierrc, .prettierignore, .eslintignore, ESLint integration, package.json scripts).\n  - How to run linting/formatting in daily workflow.\n- Update docs/FILE_ORGANISATION.md to include the scripts/ directory under Top-Level Directory Layout and reference the new docs file under docs/tasks/1/.\n\n5) Tests (deterministic)\n- Add tasks/1/tests/test_1_2.py to validate:\n  - .prettierrc exists and contains keys: semi=false, singleQuote=true, trailingComma=all, printWidth=100.\n  - package.json scripts include:\n    \u2022 lint with eslint invocation (includes .ts,.tsx extensions).\n    \u2022 format with 'prettier --write .'.\n  - .eslintrc.cjs exists and its extends includes 'prettier'.\n  - devDependencies include 'prettier' and 'eslint-config-prettier'.\n\n6) Commit changes\n- Commit new/modified files: scripts/setup-lint-format.mjs, .prettierrc, .prettierignore, .eslintignore (if created), .eslintrc.cjs (if created/updated), package.json, docs/tasks/1/CONFIGURE_LINTING_FORMATTING.md, docs/FILE_ORGANISATION.md, tasks/1/tests/test_1_2.py.\n\n7) Hand-off/CI\n- If CI exists, ensure it calls pnpm install before running tests. No CI changes are strictly required for this feature.",
      "context": [
        "scripts/setup-lint-format.mjs",
        ".prettierrc",
        ".prettierignore",
        ".eslintignore",
        ".eslintrc.cjs",
        "package.json",
        "docs/tasks/1/CONFIGURE_LINTING_FORMATTING.md",
        "docs/FILE_ORGANISATION.md",
        "tasks/1/tests/test_1_2.py"
      ],
      "acceptance": [
        "Root package.json includes devDependencies 'prettier' and 'eslint-config-prettier' with non-empty versions.",
        ".prettierrc exists at the project root and contains exactly: { \"semi\": false, \"singleQuote\": true, \"trailingComma\": \"all\", \"printWidth\": 100 }.",
        ".eslintrc.cjs exists at the project root and integrates Prettier by including 'prettier' in its 'extends' array.",
        "package.json scripts include 'lint' which invokes eslint and explicitly lints TypeScript files (includes at least .ts and .tsx extensions).",
        "package.json scripts include 'format' which runs Prettier in write mode across the repository (contains 'prettier' and '--write', targeting the project, e.g., '.')"
      ],
      "dependencies": [
        "1.1"
      ]
    },
    {
      "id": "1.3",
      "status": "-",
      "title": "Harden Security and Verify Build",
      "description": "Review the main process code in `electron/main/index.ts`. Ensure the `BrowserWindow` is created with `contextIsolation: true` and `sandbox: true` in its `webPreferences`. Run `pnpm run dev` to confirm the application starts correctly with the default React placeholder. Run `pnpm run build` and verify that it generates a runnable application in the `dist` directory.",
      "plan": "Harden Security and Verify Build \u2014 Step-by-Step Implementation Plan\n\nGoal\n- Ensure Electron main process uses secure defaults: contextIsolation: true and sandbox: true (plus nodeIntegration: false, webSecurity: true) in BrowserWindow webPreferences.\n- Deny window.open and restrict navigation.\n- Ensure preload isolation via contextBridge and minimal IPC.\n- Provide an automation script to apply/check security hardening.\n- Verify dev and build flows work and produce runnable artifacts in dist/.\n- Update documentation and file-organisation references.\n\nPrerequisites\n1) Ensure Node.js >= 18 and pnpm installed.\n   - Verify: node -v, pnpm -v.\n   - If missing: install Node 18+ and pnpm (e.g., corepack enable). \n\nProject Setup & Scripts\n2) Install dependencies: pnpm install.\n3) Ensure project scaffold exists (electron-vite + React + TypeScript structure):\n   - If project is not yet scaffolded (electron/main, electron/preload, and renderer/React files missing):\n     a) Run: pnpm create electron-vite@latest .\n     b) Choose React + TypeScript template.\n     c) Run: pnpm install.\n4) Ensure package.json includes required scripts; add/update the following:\n   - dev: \"electron-vite dev\"\n   - build: \"electron-vite build\"\n   - lint: \"eslint . --ext .ts,.tsx,.js,.jsx --max-warnings=0\"\n   - format: \"prettier --write .\"\n   - harden:security: \"node scripts/hardenSecurity.mjs\"\n   - lint:security: \"node scripts/checkSecuritySettings.mjs\"\n\nMain Process Hardening\n5) Create or update electron/main/index.ts to set secure BrowserWindow defaults:\n   - Ensure imports: import { app, BrowserWindow, ipcMain } from 'electron'; import path from 'node:path'.\n   - When constructing BrowserWindow, set:\n     webPreferences: {\n       preload: path.join(__dirname, '../preload/index.js'),\n       contextIsolation: true,\n       sandbox: true,\n       nodeIntegration: false,\n       webSecurity: true,\n       devTools: process.env.NODE_ENV !== 'production'\n     }\n   - Add: mainWindow.webContents.setWindowOpenHandler(() => ({ action: 'deny' }))\n   - Add will-navigate guard:\n     const devUrl = process.env.VITE_DEV_SERVER_URL || '';\n     mainWindow.webContents.on('will-navigate', (e, url) => {\n       const isDev = Boolean(devUrl);\n       const allowed = isDev ? url.startsWith(devUrl) : url.startsWith('file://');\n       if (!allowed) e.preventDefault();\n     });\n   - Ensure enableRemoteModule is not used anywhere.\n   - Add a minimal IPC for testing isolation: ipcMain.handle('ping', () => 'pong');\n\nPreload Isolation\n6) Create or update electron/preload/index.ts to expose a minimal, typed API via contextBridge:\n   - import { contextBridge, ipcRenderer } from 'electron';\n   - contextBridge.exposeInMainWorld('api', { ping: () => ipcRenderer.invoke('ping') });\n   - Do not expose Node primitives; ensure no direct access to ipcRenderer outside the bridged API.\n\nRenderer Types and CSP\n7) Add global type declaration for the exposed API (renderer side):\n   - Create src/types/global.d.ts (or electron/renderer/src/types/global.d.ts depending on template):\n     declare global { interface Window { api: { ping: () => Promise<string> } } } export {};\n   - Ensure tsconfig includes this type file in the renderer compilation (add to include or tsconfig references as needed).\n8) Update electron/renderer/index.html (or the template's main index.html) to include a CSP meta tag:\n   - <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self' ws: http: https:; font-src 'self'; frame-ancestors 'none'; base-uri 'self';\" />\n   - Note: ws/http/https in connect-src supports Vite HMR during dev. If the build system supports environment transforms, consider limiting connect-src to 'self' in production only.\n\nAutomation Scripts\n9) Create scripts/hardenSecurity.mjs to apply/patch the hardening (idempotent):\n   - Ensure the script:\n     a) Verifies existence of electron/main/index.ts, electron/preload/index.ts, and renderer index.html; creates skeletons if missing.\n     b) Patches BrowserWindow webPreferences to include contextIsolation: true, sandbox: true, nodeIntegration: false, webSecurity: true, preload path.\n     c) Inserts setWindowOpenHandler to deny all new windows.\n     d) Inserts will-navigate guard to block external navigation (allow devUrl in dev, file:// in prod).\n     e) Adds ipcMain.handle('ping', () => 'pong') if missing.\n     f) Ensures preload exposes window.api.ping via contextBridge.\n     g) Adds CSP meta to the HTML if missing.\n     h) Writes .bak backup files before first modification and is safe to re-run (search-based or AST-based patching).\n10) Create scripts/checkSecuritySettings.mjs to verify hardening:\n   - Read electron/main/index.ts and validate via regex or simple AST checks:\n     - contextIsolation: true\n     - sandbox: true\n     - nodeIntegration: false\n     - webSecurity: true\n     - presence of setWindowOpenHandler with action 'deny'\n     - presence of will-navigate guard that prevents navigation outside allowed origins\n   - Exit non-zero with descriptive messages if checks fail.\n\nESLint/Prettier Configs (ensure present)\n11) Add minimal ESLint config .eslintrc.cjs if missing:\n   - Configure for TypeScript/React, with separate envs for Node (main/preload) and browser (renderer), include plugin:react and @typescript-eslint.\n12) Add Prettier config prettier.config.cjs with project defaults.\n\nDocs\n13) Create docs/tasks/1/feature_1_3_hardening.md describing:\n   - What security changes were applied (contextIsolation, sandbox, nodeIntegration false, webSecurity, navigation/window restrictions, preload isolation, CSP).\n   - How to run hardening and checks (pnpm run harden:security, pnpm run lint:security).\n   - How to verify via dev and build; include window.api.ping test in DevTools.\n14) Update docs/FILE_ORGANISATION.md:\n   - Document scripts/ directory for automation scripts.\n   - Document docs/tasks/{id}/ for per-feature docs under this task.\n\nVerification \u2014 Dev\n15) Run: pnpm install (if not already).\n16) Apply hardening: pnpm run harden:security.\n17) Run security linter: pnpm run lint:security (should pass).\n18) Start dev: pnpm run dev.\n   - Expect Electron window with React placeholder UI.\n   - Open DevTools console and run: await window.api.ping() -> 'pong'.\n   - Verify window.open('https://example.com') is denied; navigation to external URLs is blocked.\n\nVerification \u2014 Build\n19) Build the app: pnpm run build.\n20) Verify dist/ contains platform-specific artifacts (e.g., dist/win-unpacked/*.exe, dist/mac/*.app, or dist/linux-unpacked/).\n21) Launch the built application directly from dist artifacts for the current OS and confirm it runs and shows the React placeholder.\n\nOptional CI\n22) Add a GitHub Actions workflow to run pnpm install, pnpm run lint, pnpm run lint:security, pnpm run build. Upload dist as artifacts if desired.\n\nVersion Control\n23) Commit in logical units:\n   - feat(security): harden BrowserWindow and preload; add automation\n   - chore(scripts): add security checks\n   - docs: add hardening guide and update FILE_ORGANISATION.md\n\nRollback\n24) Use the .bak backups from scripts/hardenSecurity.mjs or git to revert if needed.\n",
      "context": [
        "electron/main/index.ts",
        "electron/preload/index.ts",
        "electron/renderer/index.html",
        "package.json",
        "scripts/hardenSecurity.mjs",
        "scripts/checkSecuritySettings.mjs",
        "docs/tasks/1/feature_1_3_hardening.md",
        "docs/FILE_ORGANISATION.md"
      ],
      "acceptance": [
        "electron/main/index.ts exists.",
        "BrowserWindow in electron/main/index.ts is created with webPreferences.contextIsolation set to true.",
        "BrowserWindow in electron/main/index.ts is created with webPreferences.sandbox set to true.",
        "BrowserWindow in electron/main/index.ts is created with webPreferences.nodeIntegration set to false.",
        "BrowserWindow in electron/main/index.ts is created with webPreferences.webSecurity set to true.",
        "electron/main/index.ts configures mainWindow.webContents.setWindowOpenHandler to deny all window opens (returns action: 'deny').",
        "electron/main/index.ts registers a will-navigate handler that prevents navigation to URLs outside the allowed app origin (dev server in development; file:// in production) by calling event.preventDefault() for disallowed URLs.",
        "electron/preload/index.ts exists and uses contextBridge.exposeInMainWorld to expose a minimal API object.",
        "electron/main/index.ts registers an ipcMain handler for the 'ping' channel that returns 'pong'.",
        "package.json contains a dev script that starts the Electron app for development (e.g., using electron-vite dev).",
        "package.json contains a build script that builds and packages the app to a dist directory (e.g., using electron-vite build and electron-builder)."
      ],
      "dependencies": [
        "1.2"
      ]
    },
    {
      "id": "1.4",
      "status": "-",
      "title": "README.md",
      "description": "A README.md file documenting information and steps to take for developers",
      "plan": "",
      "context": [],
      "acceptance": [],
      "dependencies": [
        "1.1",
        "1.2",
        "1.3"
      ]
    }
  ]
}