{
  "id": 1,
  "status": "-",
  "title": "Electron + React + TypeScript scaffold",
  "description": "Initialize the app using a modern toolchain (electron-vite with React + TypeScript). Include scripts: dev, build, lint, format. Ensure secure defaults: contextIsolation=true, sandbox where applicable, separate main, preload, and renderer packages. Acceptance: `pnpm/npm run dev` runs the app with React UI placeholder; `... build` yields a runnable app in dist; TypeScript config present; eslint/prettier configured.",
  "features": [
    {
      "id": "1.1",
      "status": "+",
      "title": "Initialize Project with electron-vite",
      "description": "Use the `pnpm create electron-vite` command to scaffold a new project. Select the `react-ts` template. This will generate the initial project structure, including separate directories for main, preload, and renderer code, along with default TypeScript and ESLint configurations.",
      "plan": "1. Run the scaffolding command `pnpm create electron-vite` in the root directory.\n2. When prompted for the project name, enter `electron-react-ts-app`.\n3. When prompted to select a framework, choose `react`.\n4. When prompted to select a variant, choose `react-ts`.\n5. Change the current directory to the newly created `electron-react-ts-app`.\n6. Run `pnpm install` to install all the necessary dependencies.\n7. List the files in the directory to confirm successful scaffolding.",
      "context": [],
      "acceptance": [
        "A `package.json` file is created in the root directory.",
        "The `package.json` file contains `dev`, `build`, and `lint` scripts.",
        "The project directory structure contains `src/main`, `src/preload`, and `src/renderer` subdirectories.",
        "Configuration files for the toolchain, such as `electron.vite.config.ts`, `.eslintrc.cjs`, and `tsconfig.json`, are present.",
        "The `dependencies` or `devDependencies` in `package.json` include `electron`, `electron-vite`, `react`, and `typescript`."
      ]
    },
    {
      "id": "1.2",
      "status": "-",
      "title": "Configure Linting and Formatting",
      "description": "Install project dependencies using `pnpm install`. Add Prettier for code formatting by installing `prettier` and `eslint-config-prettier`. Create a `.prettierrc` file with sensible defaults. Update the `.eslintrc.cjs` configuration to integrate with Prettier. Finally, add `lint` and `format` scripts to `package.json`.",
      "plan": "1.  **Install all dependencies:** Run `pnpm install` to install dependencies defined in `package.json`.\n2.  **Install formatting packages:** Run `pnpm add -D prettier eslint-config-prettier` to add Prettier and its ESLint config as development dependencies.\n3.  **Create Prettier configuration:** Create a `.prettierrc` file in the root directory with the following content:\n    ```json\n    {\n      \"semi\": false,\n      \"singleQuote\": true,\n      \"trailingComma\": \"all\",\n      \"printWidth\": 100\n    }\n    ```\n4.  **Update ESLint configuration:** Modify `.eslintrc.cjs` to include Prettier. Add `'prettier'` to the end of the `extends` array within the configuration object.\n5.  **Add package scripts:** Modify `package.json` to add `lint` and `format` scripts.\n    -   `\"lint\": \"eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0\"`\n    -   `\"format\": \"prettier --write .\"`",
      "context": [],
      "acceptance": [],
      "dependencies": [
        "1.1"
      ]
    },
    {
      "id": "1.3",
      "status": "-",
      "title": "Harden Security and Verify Build",
      "description": "Review the main process code in `electron/main/index.ts`. Ensure the `BrowserWindow` is created with `contextIsolation: true` and `sandbox: true` in its `webPreferences`. Run `pnpm run dev` to confirm the application starts correctly with the default React placeholder. Run `pnpm run build` and verify that it generates a runnable application in the `dist` directory.",
      "plan": "Plan to Harden Security and Verify Build once scaffold exists:\n\n1) Initialize scaffold (if not already present)\n- Preferred: generate in-place at repo root\n  - Option A: pnpm create electron-vite@latest .  (choose React + TypeScript)\n  - If in-place generation is not allowed due to non-empty dir: pnpm create electron-vite@latest temp-app (React + TS), then move files from temp-app/* to repo root and delete temp-app.\n- Ensure scripts in package.json:\n  - dev: electron-vite dev\n  - build: electron-vite build && electron-builder\n  - lint: eslint . --ext .ts,.tsx,.js,.cjs --max-warnings 0\n  - format: prettier --write .\n- Ensure TypeScript configs exist in root and per package (electron/main, electron/preload, electron/renderer).\n- Ensure ESLint and Prettier configs exist (.eslintrc.*, .prettierrc or prettier.config.cjs).\n\n2) Security hardening in electron/main/index.ts\n- Create BrowserWindow with secure webPreferences:\n  webPreferences: {\n    preload: path.join(__dirname, '../preload/index.js'),\n    contextIsolation: true,\n    sandbox: true,\n    nodeIntegration: false,\n    webSecurity: true,\n    devTools: process.env.NODE_ENV !== 'production'\n  }\n- Disallow untrusted navigation and window opens:\n  mainWindow.webContents.setWindowOpenHandler(({ url }) => {\n    // Optionally allow only https: via shell.openExternal and deny creating new windows\n    return { action: 'deny' };\n  });\n  mainWindow.webContents.on('will-navigate', (e, url) => {\n    // Allow only same-origin during dev (VITE_DEV_SERVER_URL) or file:// in prod\n    const isDev = !!process.env.VITE_DEV_SERVER_URL;\n    const allowed = isDev ? url.startsWith(process.env.VITE_DEV_SERVER_URL || '') : url.startsWith('file://');\n    if (!allowed) e.preventDefault();\n  });\n- Avoid enableRemoteModule; keep default false.\n- Optionally set app.commandLine.appendSwitch('disable-features', 'OutOfBlinkCors'); NOT recommended; keep defaults secure.\n\n3) Preload isolation and API exposure (electron/preload/index.ts)\n- Use contextBridge to expose a minimal, typed API only:\n  import { contextBridge, ipcRenderer } from 'electron';\n  contextBridge.exposeInMainWorld('api', {\n    ping: () => ipcRenderer.invoke('ping')\n  });\n- In main process: ipcMain.handle('ping', () => 'pong');\n\n4) Renderer CSP and safety\n- In electron/renderer/index.html add a CSP meta for production builds:\n  <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self'; font-src 'self'; frame-ancestors 'none'; base-uri 'self';\" />\n  Note: During dev, Vite HMR requires ws: and dev server origin; configure conditionally or accept more permissive CSP only in dev.\n\n5) Verify dev and build\n- pnpm install\n- pnpm run dev -> confirm Electron launches with React placeholder UI.\n- pnpm run build -> confirm dist contains a runnable app (e.g., dist/mac|win-unpacked|linux-unpacked). Launch the built binary to validate it runs.\n\n6) Lint/format\n- pnpm run lint -> zero errors/warnings or address any.\n- pnpm run format -> ensure Prettier applies formatting.\n\n7) Optional build security\n- In electron-builder config (package.json or electron-builder.yml), enable asar: true and set files filters to exclude dev-only artifacts.",
      "context": [],
      "acceptance": [],
      "dependencies": [
        "1.2"
      ]
    }
  ]
}