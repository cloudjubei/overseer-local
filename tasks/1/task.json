{
  "id": 1,
  "status": "-",
  "title": "Electron + React + TypeScript scaffold",
  "description": "Initialize the app using a modern toolchain (electron-vite with React + TypeScript). Include scripts: dev, build, lint, format. Ensure secure defaults: contextIsolation=true, sandbox where applicable, separate main, preload, and renderer packages. Acceptance: `pnpm/npm run dev` runs the app with React UI placeholder; `... build` yields a runnable app in dist; TypeScript config present; eslint/prettier configured.",
  "features": [
    {
      "id": "1.1",
      "status": "-",
      "title": "Initialize Project with electron-vite",
      "description": "Use the `pnpm create electron-vite` command to scaffold a new project. Select the `react-ts` template. This will generate the initial project structure, including separate directories for main, preload, and renderer code, along with default TypeScript and ESLint configurations.",
      "plan": "Implementation Plan: Initialize Project with electron-vite (react-ts)\n\nOverview\n- Goal: Scaffold a new Electron application using electron-vite with React + TypeScript template.\n- Output: A bootstrapped project under projects/electron-react-ts-app with default TypeScript and ESLint configuration. Provide a one-shot script to scaffold/install, plus documentation on how to run.\n\nSteps\n1) Create projects/ directory structure\n   - At repository root, create a new directory to hold app projects.\n   - Command: mkdir -p projects\n\n2) Add a one-shot scaffolding script\n   - Create scripts/ directory if it does not exist.\n     - Command: mkdir -p scripts\n   - Create scripts/scaffold_electron_vite.sh with the following content:\n     ---8<---\n     #!/usr/bin/env bash\n     set -euo pipefail\n\n     ROOT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/..\" && pwd)\"\n     APP_DIR=\"$ROOT_DIR/projects/electron-react-ts-app\"\n\n     echo \"[info] Verifying prerequisites...\"\n     if ! command -v pnpm >/dev/null 2>&1; then\n       echo \"[error] pnpm is required. Install from https://pnpm.io/installation\" >&2\n       exit 1\n     fi\n     if ! command -v node >/dev/null 2>&1; then\n       echo \"[error] Node.js is required. Install LTS (>=18).\" >&2\n       exit 1\n     fi\n\n     NODE_VER_RAW=$(node -v | sed 's/v//')\n     NODE_MAJOR=\"${NODE_VER_RAW%%.*}\"\n     if [ \"$NODE_MAJOR\" -lt 18 ]; then\n       echo \"[error] Node.js >= 18 is required. Current: $NODE_VER_RAW\" >&2\n       exit 1\n     fi\n\n     mkdir -p \"$ROOT_DIR/projects\"\n\n     if [ -d \"$APP_DIR\" ] && [ -n \"$(ls -A \"$APP_DIR\" 2>/dev/null || true)\" ]; then\n       echo \"[error] Target directory $APP_DIR already exists and is not empty. Aborting to avoid overwriting.\" >&2\n       exit 1\n     fi\n\n     echo \"[info] Scaffolding electron-vite (react-ts) project at $APP_DIR ...\"\n     pnpm create electron-vite \"$APP_DIR\" --template react-ts\n\n     echo \"[info] Installing dependencies...\"\n     cd \"$APP_DIR\"\n     pnpm install\n\n     echo \"[success] Scaffold complete. Next steps:\"\n     echo \"  cd projects/electron-react-ts-app\"\n     echo \"  pnpm run dev    # Start development with HMR\"\n     echo \"  pnpm run build  # Build production binaries\"\n     ---8<---\n   - Make the script executable:\n     - Command: chmod +x scripts/scaffold_electron_vite.sh\n\n3) Execute the scaffold (local developer step)\n   - Run the one-shot script to generate the project and install dependencies:\n     - Command: ./scripts/scaffold_electron_vite.sh\n   - Note: This will create the app at projects/electron-react-ts-app.\n\n4) Verify generated structure\n   - Ensure the following directories exist under projects/electron-react-ts-app:\n     - src/main/ (Electron main process)\n     - src/preload/ (Preload scripts)\n     - src/renderer/ (React UI)\n   - Verify package.json includes scripts like dev and build (template-provided):\n     - \"dev\": starts the electron-vite dev environment\n     - \"build\": builds the production app\n   - Verify TypeScript and ESLint configuration files exist (template-provided):\n     - tsconfig.json (and possibly tsconfig.* for main/preload/renderer)\n     - .eslintrc.* or equivalent ESLint config\n\n5) Add task documentation for setup and usage\n   - Create docs/tasks/1/setup_electron_vite.md with the following content:\n     ---8<---\n     # Setup: electron-vite React + TypeScript Scaffold\n\n     This document explains how to scaffold and run the Electron app using electron-vite with React + TypeScript.\n\n     ## Prerequisites\n     - Node.js >= 18\n     - pnpm installed (https://pnpm.io/installation)\n\n     ## Scaffold and Install\n     ```bash\n     ./scripts/scaffold_electron_vite.sh\n     ```\n\n     This creates the app in `projects/electron-react-ts-app` and installs dependencies.\n\n     ## Development\n     ```bash\n     cd projects/electron-react-ts-app\n     pnpm run dev\n     ```\n\n     ## Build\n     ```bash\n     cd projects/electron-react-ts-app\n     pnpm run build\n     ```\n\n     The template includes TypeScript and ESLint defaults. The React UI placeholder should render when running `pnpm run dev`.\n     ---8<---\n\n6) Update repository file organization docs\n   - Edit docs/FILE_ORGANISATION.md to document the new projects/ directory and example entry for projects/electron-react-ts-app. Add a brief note under \"Top-Level Directory Layout\" describing `projects/` as the location for application subprojects scaffolded by tasks. Update the illustrative tree to include:\n     - projects/\n       - electron-react-ts-app/\n\n7) Add a lightweight project-level README\n   - Create projects/electron-react-ts-app/README.md summarizing how to run and build the app and pointing to docs/tasks/1/setup_electron_vite.md for details.\n\n8) Version control housekeeping\n   - Stage and commit new files:\n     - scripts/scaffold_electron_vite.sh\n     - docs/tasks/1/setup_electron_vite.md\n     - docs/FILE_ORGANISATION.md (updated)\n     - projects/electron-react-ts-app/** (scaffolded content)\n   - Suggested commit message: \"feat: scaffold electron-vite React+TS app under projects/ with setup script and docs\"\n\n9) Manual smoke test (developer verification)\n   - From projects/electron-react-ts-app, run: pnpm run dev => Electron app launches with React placeholder UI.\n   - Run: pnpm run build => Build artifacts produced in dist/ (or out/ per template).\n\nNotes\n- This feature only covers scaffolding using the official react-ts template with its default TypeScript and ESLint configurations. Additional hardening (sandbox, contextIsolation checks), Prettier setup, or custom lint/format scripts are handled in subsequent features.",
      "context": [],
      "acceptance": [
        "A `package.json` file is created in the root directory.",
        "The `package.json` file contains `dev`, `build`, and `lint` scripts.",
        "The project directory structure contains `src/main`, `src/preload`, and `src/renderer` subdirectories.",
        "Configuration files for the toolchain, such as `electron.vite.config.ts`, `.eslintrc.cjs`, and `tsconfig.json`, are present.",
        "The `dependencies` or `devDependencies` in `package.json` include `electron`, `electron-vite`, `react`, and `typescript`."
      ]
    },
    {
      "id": "1.2",
      "status": "-",
      "title": "Configure Linting and Formatting",
      "description": "Install project dependencies using `pnpm install`. Add Prettier for code formatting by installing `prettier` and `eslint-config-prettier`. Create a `.prettierrc` file with sensible defaults. Update the `.eslintrc.cjs` configuration to integrate with Prettier. Finally, add `lint` and `format` scripts to `package.json`.",
      "plan": "Plan: Configure Linting and Formatting (Feature 1.2)\n\n1) Create one-shot setup script\n- Create a new directory scripts/ at the repo root.\n- Add a Node ESM script scripts/setup-lint-format.mjs that performs all steps below idempotently (safe to re-run):\n  a. Ensure dependencies are installed:\n     - Execute: pnpm install\n  b. Add development dependencies:\n     - Execute: pnpm add -D prettier eslint-config-prettier\n  c. Create or update .prettierrc at repo root with the following JSON (merge or overwrite if needed):\n     {\n       \"semi\": false,\n       \"singleQuote\": true,\n       \"trailingComma\": \"all\",\n       \"printWidth\": 100\n     }\n  d. Create .prettierignore (if missing) with common ignores:\n     node_modules\n     dist\n     build\n     coverage\n     out\n     release\n     .next\n     .turbo\n  e. Ensure .eslintignore (if missing) includes:\n     node_modules\n     dist\n     build\n     coverage\n  f. Integrate Prettier into ESLint config:\n     - If .eslintrc.cjs exists:\n       \u2022 Read file as text and update the extends array to include 'prettier' as the last item if not already present.\n       \u2022 Example extends: ['eslint:recommended', 'plugin:@typescript-eslint/recommended', 'prettier']\n     - If .eslintrc.cjs does not exist, create a minimal one:\n       module.exports = {\n         root: true,\n         parser: '@typescript-eslint/parser',\n         plugins: ['@typescript-eslint'],\n         extends: ['eslint:recommended', 'plugin:@typescript-eslint/recommended', 'prettier'],\n       }\n  g. Update package.json to add scripts (merge without overwriting existing unrelated scripts):\n     - \"lint\": \"eslint . --ext .ts,.tsx,.js,.jsx --report-unused-disable-directives --max-warnings 0\"\n     - \"format\": \"prettier --write .\"\n     Notes:\n       \u2022 If a lint script exists, ensure it runs eslint against ts/tsx at minimum; otherwise, replace with the above.\n       \u2022 If a format script exists, ensure it invokes prettier --write .; otherwise, replace with the above.\n  h. Print a summary of actions taken.\n\nImplementation Notes for scripts/setup-lint-format.mjs:\n- Use Node's child_process (exec or spawn) to run pnpm commands.\n- Use fs/promises to read/write files.\n- Handle JSON reading/writing for package.json and .prettierrc robustly with try/catch.\n- For .eslintrc.cjs string updates, do minimal parsing: detect extends array with regex and append 'prettier' if missing; fall back to creating a new file if parsing fails.\n\n2) Run the setup script\n- Execute: node scripts/setup-lint-format.mjs\n- Re-run if necessary; it should be idempotent.\n\n3) Verify locally\n- Run: pnpm run lint (should pass or report actual code issues).\n- Run: pnpm run format (should format files without error).\n\n4) Documentation\n- Create docs/tasks/1/CONFIGURE_LINTING_FORMATTING.md detailing:\n  - Purpose of Prettier + ESLint integration.\n  - One-shot script usage (node scripts/setup-lint-format.mjs).\n  - What was installed/created (.prettierrc, .prettierignore, .eslintignore, ESLint integration, package.json scripts).\n  - How to run linting/formatting in daily workflow.\n- Update docs/FILE_ORGANISATION.md to include the scripts/ directory under Top-Level Directory Layout and reference the new docs file under docs/tasks/1/.\n\n5) Tests (deterministic)\n- Add tasks/1/tests/test_1_2.py to validate:\n  - .prettierrc exists and contains keys: semi=false, singleQuote=true, trailingComma=all, printWidth=100.\n  - package.json scripts include:\n    \u2022 lint with eslint invocation (includes .ts,.tsx extensions).\n    \u2022 format with 'prettier --write .'.\n  - .eslintrc.cjs exists and its extends includes 'prettier'.\n  - devDependencies include 'prettier' and 'eslint-config-prettier'.\n\n6) Commit changes\n- Commit new/modified files: scripts/setup-lint-format.mjs, .prettierrc, .prettierignore, .eslintignore (if created), .eslintrc.cjs (if created/updated), package.json, docs/tasks/1/CONFIGURE_LINTING_FORMATTING.md, docs/FILE_ORGANISATION.md, tasks/1/tests/test_1_2.py.\n\n7) Hand-off/CI\n- If CI exists, ensure it calls pnpm install before running tests. No CI changes are strictly required for this feature.",
      "context": [],
      "acceptance": [],
      "dependencies": [
        "1.1"
      ]
    },
    {
      "id": "1.3",
      "status": "-",
      "title": "Harden Security and Verify Build",
      "description": "Review the main process code in `electron/main/index.ts`. Ensure the `BrowserWindow` is created with `contextIsolation: true` and `sandbox: true` in its `webPreferences`. Run `pnpm run dev` to confirm the application starts correctly with the default React placeholder. Run `pnpm run build` and verify that it generates a runnable application in the `dist` directory.",
      "plan": "Plan to Harden Security and Verify Build once scaffold exists:\n\n1) Initialize scaffold (if not already present)\n- Preferred: generate in-place at repo root\n  - Option A: pnpm create electron-vite@latest .  (choose React + TypeScript)\n  - If in-place generation is not allowed due to non-empty dir: pnpm create electron-vite@latest temp-app (React + TS), then move files from temp-app/* to repo root and delete temp-app.\n- Ensure scripts in package.json:\n  - dev: electron-vite dev\n  - build: electron-vite build && electron-builder\n  - lint: eslint . --ext .ts,.tsx,.js,.cjs --max-warnings 0\n  - format: prettier --write .\n- Ensure TypeScript configs exist in root and per package (electron/main, electron/preload, electron/renderer).\n- Ensure ESLint and Prettier configs exist (.eslintrc.*, .prettierrc or prettier.config.cjs).\n\n2) Security hardening in electron/main/index.ts\n- Create BrowserWindow with secure webPreferences:\n  webPreferences: {\n    preload: path.join(__dirname, '../preload/index.js'),\n    contextIsolation: true,\n    sandbox: true,\n    nodeIntegration: false,\n    webSecurity: true,\n    devTools: process.env.NODE_ENV !== 'production'\n  }\n- Disallow untrusted navigation and window opens:\n  mainWindow.webContents.setWindowOpenHandler(({ url }) => {\n    // Optionally allow only https: via shell.openExternal and deny creating new windows\n    return { action: 'deny' };\n  });\n  mainWindow.webContents.on('will-navigate', (e, url) => {\n    // Allow only same-origin during dev (VITE_DEV_SERVER_URL) or file:// in prod\n    const isDev = !!process.env.VITE_DEV_SERVER_URL;\n    const allowed = isDev ? url.startsWith(process.env.VITE_DEV_SERVER_URL || '') : url.startsWith('file://');\n    if (!allowed) e.preventDefault();\n  });\n- Avoid enableRemoteModule; keep default false.\n- Optionally set app.commandLine.appendSwitch('disable-features', 'OutOfBlinkCors'); NOT recommended; keep defaults secure.\n\n3) Preload isolation and API exposure (electron/preload/index.ts)\n- Use contextBridge to expose a minimal, typed API only:\n  import { contextBridge, ipcRenderer } from 'electron';\n  contextBridge.exposeInMainWorld('api', {\n    ping: () => ipcRenderer.invoke('ping')\n  });\n- In main process: ipcMain.handle('ping', () => 'pong');\n\n4) Renderer CSP and safety\n- In electron/renderer/index.html add a CSP meta for production builds:\n  <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self'; font-src 'self'; frame-ancestors 'none'; base-uri 'self';\" />\n  Note: During dev, Vite HMR requires ws: and dev server origin; configure conditionally or accept more permissive CSP only in dev.\n\n5) Verify dev and build\n- pnpm install\n- pnpm run dev -> confirm Electron launches with React placeholder UI.\n- pnpm run build -> confirm dist contains a runnable app (e.g., dist/mac|win-unpacked|linux-unpacked). Launch the built binary to validate it runs.\n\n6) Lint/format\n- pnpm run lint -> zero errors/warnings or address any.\n- pnpm run format -> ensure Prettier applies formatting.\n\n7) Optional build security\n- In electron-builder config (package.json or electron-builder.yml), enable asar: true and set files filters to exclude dev-only artifacts.",
      "context": [],
      "acceptance": [],
      "dependencies": [
        "1.2"
      ]
    }
  ]
}