{
  "id": 1,
  "status": "-",
  "title": "Electron + React + TypeScript scaffold",
  "description": "Initialize the app using a modern toolchain (electron-vite with React + TypeScript).",
  "features": [
    {
      "id": "1.1",
      "status": "+",
      "title": "Initialize Project",
      "description": "Create the Electron + React + TypeScript scaffolding so that dev work can begin",
      "plan": "Run `npx create-electron-app@latest overseer-local` inside the project root",
      "context": [],
      "acceptance": []
    },
    {
      "id": "1.2",
      "status": "+",
      "title": "Configure Linting and Formatting",
      "description": "Make sure there's linting and formatting enabled. Assume the usage of VSCode.",
      "plan": "Implementation Plan: Configure Linting and Formatting\n\n1) Create one-shot setup script to automate config\n   - Add a new directory: scripts/\n   - Create scripts/setup-linting-formatting.js that:\n     a) Detects package manager: prefers pnpm if pnpm-lock.yaml exists, yarn if yarn.lock, bun if bun.lockb, else npm.\n     b) Installs dev dependencies:\n        eslint, @typescript-eslint/parser, @typescript-eslint/eslint-plugin, eslint-plugin-react, eslint-plugin-react-hooks, eslint-plugin-jsx-a11y, eslint-plugin-simple-import-sort, eslint-plugin-unused-imports, eslint-plugin-prettier, eslint-config-prettier, prettier, eslint-plugin-n, eslint-plugin-vitest, lint-staged\n     c) Writes/overwrites the following files with the exact contents specified below:\n        - .editorconfig\n        - .prettierrc.json\n        - .prettierignore\n        - .eslintignore\n        - .eslintrc.cjs\n     d) Updates package.json:\n        - Adds scripts:\n          \"lint\": \"eslint . --ext .cjs,.mjs,.js,.ts,.tsx\",\n          \"lint:fix\": \"npm run lint -- --fix\",\n          \"format\": \"prettier --write .\",\n          \"format:check\": \"prettier --check .\",\n          \"prepare\": \"husky install\"\n        - Adds lint-staged config (package.json top-level key):\n          {\n            \"*.{js,jsx,ts,tsx,cjs,mjs}\": [\"eslint --fix\"],\n            \"*.{json,css,scss,md,yml,yaml,html}\": [\"prettier --write\"]\n          }\n     e) Initializes Husky and the pre-commit hook:\n        - Runs: npx husky install (or pnpm dlx husky-init, then pnpm install, depending on the chosen manager)\n        - Creates .husky/pre-commit with content:\n          #!/usr/bin/env sh\n          . \"$(dirname -- \"$0\")/_/husky.sh\"\n          npx --no-install lint-staged\n     f) Optionally creates CI workflow at .github/workflows/lint.yml (see step 6 for contents) unless CI already exists.\n     g) Makes the script idempotent (re-running should not break; check file existence and skip/overwrite safely).\n\n2) Define configuration files to be written by the setup script\n   - .editorconfig contents:\n     root = true\n     [*]\n     indent_style = space\n     indent_size = 2\n     end_of_line = lf\n     charset = utf-8\n     trim_trailing_whitespace = true\n     insert_final_newline = true\n     [*.md]\n     trim_trailing_whitespace = false\n\n   - .prettierrc.json contents (JSON):\n     {\n       \"printWidth\": 100,\n       \"tabWidth\": 2,\n       \"singleQuote\": true,\n       \"trailingComma\": \"all\",\n       \"semi\": true,\n       \"arrowParens\": \"always\",\n       \"bracketSpacing\": true,\n       \"endOfLine\": \"lf\"\n     }\n\n   - .prettierignore contents:\n     node_modules\n     dist\n     build\n     out\n     coverage\n     .husky\n     .github\n     .next\n     .cache\n     .turbo\n     .vite\n\n   - .eslintignore contents:\n     node_modules\n     dist\n     build\n     out\n     coverage\n     .husky\n     .github\n     .next\n     .cache\n     .turbo\n     .vite\n\n   - .eslintrc.cjs contents (CJS):\n     module.exports = {\n       root: true,\n       env: { es2023: true },\n       parser: '@typescript-eslint/parser',\n       parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },\n       plugins: [\n         '@typescript-eslint',\n         'react',\n         'react-hooks',\n         'jsx-a11y',\n         'simple-import-sort',\n         'unused-imports',\n         'prettier',\n         'n',\n         'vitest'\n       ],\n       extends: [\n         'eslint:recommended',\n         'plugin:@typescript-eslint/recommended',\n         'plugin:react/recommended',\n         'plugin:react-hooks/recommended',\n         'plugin:jsx-a11y/recommended',\n         'plugin:n/recommended',\n         'plugin:vitest/recommended',\n         'plugin:prettier/recommended',\n         'prettier'\n       ],\n       settings: { react: { version: 'detect' } },\n       rules: {\n         'prettier/prettier': 'error',\n         'no-console': 'warn',\n         'no-debugger': 'warn',\n         'unused-imports/no-unused-imports': 'error',\n         '@typescript-eslint/no-unused-vars': [\n           'warn',\n           { argsIgnorePattern: '^_', varsIgnorePattern: '^_', ignoreRestSiblings: true }\n         ],\n         'simple-import-sort/imports': 'warn',\n         'simple-import-sort/exports': 'warn',\n         'react/react-in-jsx-scope': 'off'\n       },\n       overrides: [\n         {\n           files: ['src/renderer/**/*.{ts,tsx,js,jsx}'],\n           env: { browser: true }\n         },\n         {\n           files: ['src/main/**/*.{ts,js}', 'src/preload/**/*.{ts,js}', '*.config.{ts,js,mjs,cjs}'],\n           env: { node: true }\n         },\n         {\n           files: ['**/*.{test,spec}.{ts,tsx,js,jsx}'],\n           env: { 'vitest/globals': true }\n         }\n       ],\n       ignorePatterns: ['dist', 'build', 'out', 'node_modules', '.husky']\n     };\n\n3) Implement the setup script (scripts/setup-linting-formatting.js)\n   - Use Node.js fs and child_process modules.\n   - Steps in script:\n     a) Detect package manager (read presence of lockfiles).\n     b) Build install command with the detected manager (npm i -D, pnpm add -D, yarn add -D, bun add -d).\n     c) Install devDependencies listed in step 1b.\n     d) Ensure scripts/ directory exists.\n     e) Write config files with exact contents from step 2, creating them at repo root.\n     f) Read package.json, merge scripts and lint-staged config (do not clobber existing entries; merge conservatively). Ensure \"prepare\": \"husky install\" is present.\n     g) Run husky install and create .husky/pre-commit with the specified content (mark executable).\n     h) If .github/workflows/ does not exist, create and write lint.yml from step 6.\n     i) Log a summary of actions and next steps.\n\n4) Update package.json manually if the script cannot (fallback)\n   - Add scripts and lint-staged config as described in step 1d if the script cannot write to package.json due to environment restrictions.\n\n5) Add developer documentation\n   - Create docs/tasks/1/linting_and_formatting.md with:\n     a) Overview of tools (ESLint, Prettier, Husky, lint-staged) and why.\n     b) How to run the setup script: node scripts/setup-linting-formatting.js\n     c) How to run locally: npm run lint, npm run lint:fix, npm run format, npm run format:check\n     d) How pre-commit hooks work and how to skip them (e.g., --no-verify).\n     e) Notes for Electron contexts: renderer (browser env) vs main/preload (node env) handled by ESLint overrides.\n     f) Guidance for path aliases (if using tsconfig paths, add eslint-import-resolver or adjust simple-import-sort groups later).\n     g) CI note: lint workflow runs on push and PR; how to troubleshoot.\n\n6) Add optional CI workflow to enforce linting and formatting\n   - Create .github/workflows/lint.yml with the following content:\n     name: Lint and Format\n     on:\n       pull_request:\n       push:\n         branches: [ main ]\n     jobs:\n       lint:\n         runs-on: ubuntu-latest\n         steps:\n           - uses: actions/checkout@v4\n           - uses: actions/setup-node@v4\n             with:\n               node-version: '20'\n           - name: Install dependencies\n             run: |\n               if [ -f pnpm-lock.yaml ]; then npm i -g pnpm && pnpm i; \\\n               elif [ -f yarn.lock ]; then yarn install --frozen-lockfile; \\\n               elif [ -f bun.lockb ]; then curl -fsSL https://bun.sh/install | bash && bun install; \\\n               else npm ci; fi\n           - name: ESLint\n             run: npm run lint\n           - name: Prettier (check)\n             run: npm run format:check\n\n7) Update repository organization documentation\n   - Edit docs/FILE_ORGANISATION.md to include:\n     a) In Top-Level Directory Layout: add scripts/: Project automation scripts (e.g., setup-linting-formatting).\n     b) Add .husky/: Git hooks configured by Husky.\n     c) Add .github/workflows/: CI workflows (e.g., lint on push/PR).\n     d) Note that these are introduced by the linting/formatting feature.\n\n8) Add deterministic tests for this feature\n   - Create tasks/1/tests/test_1_2.py with checks such as:\n     a) Files exist: .eslintrc.cjs, .editorconfig, .prettierrc.json, .prettierignore, .eslintignore.\n     b) package.json contains scripts: lint, lint:fix, format, format:check, prepare.\n     c) package.json contains a lint-staged configuration with keys for JS/TS and common text files.\n     d) .husky/pre-commit exists and contains \"npx --no-install lint-staged\".\n     e) scripts/setup-linting-formatting.js exists.\n     f) Optional: .github/workflows/lint.yml exists and runs lint and format:check.\n\n9) Verify locally\n   - Run: node scripts/setup-linting-formatting.js\n   - Run: npm run lint and npm run format:check to ensure configurations work across src/main, src/preload, and src/renderer (if present).\n\n10) Commit changes\n   - Commit newly added files and documentation.\n   - Ensure pre-commit hook runs and passes.\n\nNotes and caveats\n- If TypeScript path aliases are introduced later, consider adding eslint-import-resolver-typescript for import resolution, or configure simple-import-sort groups accordingly.\n- If Jest is used instead of Vitest, replace eslint-plugin-vitest configuration with eslint-plugin-jest and adjust overrides.\n- The setup script should avoid enabling type-aware rules that require parserOptions.project to keep performance acceptable and avoid tsconfig coupling by default.\n",
      "context": [],
      "acceptance": [],
      "dependencies": [
        "1.1"
      ]
    },
    {
      "id": "1.3",
      "status": "-",
      "title": "README.md",
      "description": "A README.md file documenting information and steps to take for developers",
      "plan": "",
      "context": [
        "README.md",
        "docs/FILE_ORGANISATION.md"
      ],
      "acceptance": [],
      "dependencies": [
        "1.1",
        "1.2"
      ]
    }
  ]
}