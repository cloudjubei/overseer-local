{
  "id": 1,
  "status": "-",
  "title": "Electron + React + TypeScript scaffold",
  "description": "Initialize the app using a modern toolchain (electron-vite with React + TypeScript). Include scripts: dev, build, lint, format. Ensure secure defaults: contextIsolation=true, sandbox where applicable, separate main, preload, and renderer packages. Acceptance: `pnpm/npm run dev` runs the app with React UI placeholder; `... build` yields a runnable app in dist; TypeScript config present; eslint/prettier configured.",
  "features": [
    {
      "id": "1.1",
      "status": "-",
      "title": "Initialize Project with electron-vite",
      "description": "Use the `pnpm create electron-vite` command to scaffold a new project. Select the `react-ts` template. This will generate the initial project structure, including separate directories for main, preload, and renderer code, along with default TypeScript and ESLint configurations.",
      "plan": "Implementation Plan: Initialize Project with electron-vite (react-ts)\n\nOverview\n- Goal: Scaffold a new Electron application using electron-vite with React + TypeScript template.\n- Output: A bootstrapped project under projects/electron-react-ts-app with default TypeScript and ESLint configuration. Provide a one-shot script to scaffold/install, plus documentation on how to run.\n\nSteps\n1) Create projects/ directory structure\n   - At repository root, create a new directory to hold app projects.\n   - Command: mkdir -p projects\n\n2) Add a one-shot scaffolding script\n   - Create scripts/ directory if it does not exist.\n     - Command: mkdir -p scripts\n   - Create scripts/scaffold_electron_vite.sh with the following content:\n     ---8<---\n     #!/usr/bin/env bash\n     set -euo pipefail\n\n     ROOT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/..\" && pwd)\"\n     APP_DIR=\"$ROOT_DIR/projects/electron-react-ts-app\"\n\n     echo \"[info] Verifying prerequisites...\"\n     if ! command -v pnpm >/dev/null 2>&1; then\n       echo \"[error] pnpm is required. Install from https://pnpm.io/installation\" >&2\n       exit 1\n     fi\n     if ! command -v node >/dev/null 2>&1; then\n       echo \"[error] Node.js is required. Install LTS (>=18).\" >&2\n       exit 1\n     fi\n\n     NODE_VER_RAW=$(node -v | sed 's/v//')\n     NODE_MAJOR=\"${NODE_VER_RAW%%.*}\"\n     if [ \"$NODE_MAJOR\" -lt 18 ]; then\n       echo \"[error] Node.js >= 18 is required. Current: $NODE_VER_RAW\" >&2\n       exit 1\n     fi\n\n     mkdir -p \"$ROOT_DIR/projects\"\n\n     if [ -d \"$APP_DIR\" ] && [ -n \"$(ls -A \"$APP_DIR\" 2>/dev/null || true)\" ]; then\n       echo \"[error] Target directory $APP_DIR already exists and is not empty. Aborting to avoid overwriting.\" >&2\n       exit 1\n     fi\n\n     echo \"[info] Scaffolding electron-vite (react-ts) project at $APP_DIR ...\"\n     pnpm create electron-vite \"$APP_DIR\" --template react-ts\n\n     echo \"[info] Installing dependencies...\"\n     cd \"$APP_DIR\"\n     pnpm install\n\n     echo \"[success] Scaffold complete. Next steps:\"\n     echo \"  cd projects/electron-react-ts-app\"\n     echo \"  pnpm run dev    # Start development with HMR\"\n     echo \"  pnpm run build  # Build production binaries\"\n     ---8<---\n   - Make the script executable:\n     - Command: chmod +x scripts/scaffold_electron_vite.sh\n\n3) Execute the scaffold (local developer step)\n   - Run the one-shot script to generate the project and install dependencies:\n     - Command: ./scripts/scaffold_electron_vite.sh\n   - Note: This will create the app at projects/electron-react-ts-app.\n\n4) Verify generated structure\n   - Ensure the following directories exist under projects/electron-react-ts-app:\n     - src/main/ (Electron main process)\n     - src/preload/ (Preload scripts)\n     - src/renderer/ (React UI)\n   - Verify package.json includes scripts like dev and build (template-provided):\n     - \"dev\": starts the electron-vite dev environment\n     - \"build\": builds the production app\n   - Verify TypeScript and ESLint configuration files exist (template-provided):\n     - tsconfig.json (and possibly tsconfig.* for main/preload/renderer)\n     - .eslintrc.* or equivalent ESLint config\n\n5) Add task documentation for setup and usage\n   - Create docs/tasks/1/setup_electron_vite.md with the following content:\n     ---8<---\n     # Setup: electron-vite React + TypeScript Scaffold\n\n     This document explains how to scaffold and run the Electron app using electron-vite with React + TypeScript.\n\n     ## Prerequisites\n     - Node.js >= 18\n     - pnpm installed (https://pnpm.io/installation)\n\n     ## Scaffold and Install\n     ```bash\n     ./scripts/scaffold_electron_vite.sh\n     ```\n\n     This creates the app in `projects/electron-react-ts-app` and installs dependencies.\n\n     ## Development\n     ```bash\n     cd projects/electron-react-ts-app\n     pnpm run dev\n     ```\n\n     ## Build\n     ```bash\n     cd projects/electron-react-ts-app\n     pnpm run build\n     ```\n\n     The template includes TypeScript and ESLint defaults. The React UI placeholder should render when running `pnpm run dev`.\n     ---8<---\n\n6) Update repository file organization docs\n   - Edit docs/FILE_ORGANISATION.md to document the new projects/ directory and example entry for projects/electron-react-ts-app. Add a brief note under \"Top-Level Directory Layout\" describing `projects/` as the location for application subprojects scaffolded by tasks. Update the illustrative tree to include:\n     - projects/\n       - electron-react-ts-app/\n\n7) Add a lightweight project-level README\n   - Create projects/electron-react-ts-app/README.md summarizing how to run and build the app and pointing to docs/tasks/1/setup_electron_vite.md for details.\n\n8) Version control housekeeping\n   - Stage and commit new files:\n     - scripts/scaffold_electron_vite.sh\n     - docs/tasks/1/setup_electron_vite.md\n     - docs/FILE_ORGANISATION.md (updated)\n     - projects/electron-react-ts-app/** (scaffolded content)\n   - Suggested commit message: \"feat: scaffold electron-vite React+TS app under projects/ with setup script and docs\"\n\n9) Manual smoke test (developer verification)\n   - From projects/electron-react-ts-app, run: pnpm run dev => Electron app launches with React placeholder UI.\n   - Run: pnpm run build => Build artifacts produced in dist/ (or out/ per template).\n\nNotes\n- This feature only covers scaffolding using the official react-ts template with its default TypeScript and ESLint configurations. Additional hardening (sandbox, contextIsolation checks), Prettier setup, or custom lint/format scripts are handled in subsequent features.",
      "context": [],
      "acceptance": [
        "projects/electron-react-ts-app/package.json exists.",
        "projects/electron-react-ts-app/package.json has scripts: dev, build, and lint.",
        "projects/electron-react-ts-app/src/main, projects/electron-react-ts-app/src/preload, and projects/electron-react-ts-app/src/renderer directories exist.",
        "projects/electron-react-ts-app/electron.vite.config.ts, projects/electron-react-ts-app/.eslintrc.cjs, and projects/electron-react-ts-app/tsconfig.json exist.",
        "projects/electron-react-ts-app/package.json lists electron, electron-vite, react, and typescript in either dependencies or devDependencies."
      ]
    },
    {
      "id": "1.2",
      "status": "-",
      "title": "Configure Linting and Formatting",
      "description": "Install project dependencies using `pnpm install`. Add Prettier for code formatting by installing `prettier` and `eslint-config-prettier`. Create a `.prettierrc` file with sensible defaults. Update the `.eslintrc.cjs` configuration to integrate with Prettier. Finally, add `lint` and `format` scripts to `package.json`.",
      "plan": "Plan: Configure Linting and Formatting (Feature 1.2)\n\n1) Create one-shot setup script\n- Create a new directory scripts/ at the repo root.\n- Add a Node ESM script scripts/setup-lint-format.mjs that performs all steps below idempotently (safe to re-run):\n  a. Ensure dependencies are installed:\n     - Execute: pnpm install\n  b. Add development dependencies:\n     - Execute: pnpm add -D prettier eslint-config-prettier\n  c. Create or update .prettierrc at repo root with the following JSON (merge or overwrite if needed):\n     {\n       \"semi\": false,\n       \"singleQuote\": true,\n       \"trailingComma\": \"all\",\n       \"printWidth\": 100\n     }\n  d. Create .prettierignore (if missing) with common ignores:\n     node_modules\n     dist\n     build\n     coverage\n     out\n     release\n     .next\n     .turbo\n  e. Ensure .eslintignore (if missing) includes:\n     node_modules\n     dist\n     build\n     coverage\n  f. Integrate Prettier into ESLint config:\n     - If .eslintrc.cjs exists:\n       \u2022 Read file as text and update the extends array to include 'prettier' as the last item if not already present.\n       \u2022 Example extends: ['eslint:recommended', 'plugin:@typescript-eslint/recommended', 'prettier']\n     - If .eslintrc.cjs does not exist, create a minimal one:\n       module.exports = {\n         root: true,\n         parser: '@typescript-eslint/parser',\n         plugins: ['@typescript-eslint'],\n         extends: ['eslint:recommended', 'plugin:@typescript-eslint/recommended', 'prettier'],\n       }\n  g. Update package.json to add scripts (merge without overwriting existing unrelated scripts):\n     - \"lint\": \"eslint . --ext .ts,.tsx,.js,.jsx --report-unused-disable-directives --max-warnings 0\"\n     - \"format\": \"prettier --write .\"\n     Notes:\n       \u2022 If a lint script exists, ensure it runs eslint against ts/tsx at minimum; otherwise, replace with the above.\n       \u2022 If a format script exists, ensure it invokes prettier --write .; otherwise, replace with the above.\n  h. Print a summary of actions taken.\n\nImplementation Notes for scripts/setup-lint-format.mjs:\n- Use Node's child_process (exec or spawn) to run pnpm commands.\n- Use fs/promises to read/write files.\n- Handle JSON reading/writing for package.json and .prettierrc robustly with try/catch.\n- For .eslintrc.cjs string updates, do minimal parsing: detect extends array with regex and append 'prettier' if missing; fall back to creating a new file if parsing fails.\n\n2) Run the setup script\n- Execute: node scripts/setup-lint-format.mjs\n- Re-run if necessary; it should be idempotent.\n\n3) Verify locally\n- Run: pnpm run lint (should pass or report actual code issues).\n- Run: pnpm run format (should format files without error).\n\n4) Documentation\n- Create docs/tasks/1/CONFIGURE_LINTING_FORMATTING.md detailing:\n  - Purpose of Prettier + ESLint integration.\n  - One-shot script usage (node scripts/setup-lint-format.mjs).\n  - What was installed/created (.prettierrc, .prettierignore, .eslintignore, ESLint integration, package.json scripts).\n  - How to run linting/formatting in daily workflow.\n- Update docs/FILE_ORGANISATION.md to include the scripts/ directory under Top-Level Directory Layout and reference the new docs file under docs/tasks/1/.\n\n5) Tests (deterministic)\n- Add tasks/1/tests/test_1_2.py to validate:\n  - .prettierrc exists and contains keys: semi=false, singleQuote=true, trailingComma=all, printWidth=100.\n  - package.json scripts include:\n    \u2022 lint with eslint invocation (includes .ts,.tsx extensions).\n    \u2022 format with 'prettier --write .'.\n  - .eslintrc.cjs exists and its extends includes 'prettier'.\n  - devDependencies include 'prettier' and 'eslint-config-prettier'.\n\n6) Commit changes\n- Commit new/modified files: scripts/setup-lint-format.mjs, .prettierrc, .prettierignore, .eslintignore (if created), .eslintrc.cjs (if created/updated), package.json, docs/tasks/1/CONFIGURE_LINTING_FORMATTING.md, docs/FILE_ORGANISATION.md, tasks/1/tests/test_1_2.py.\n\n7) Hand-off/CI\n- If CI exists, ensure it calls pnpm install before running tests. No CI changes are strictly required for this feature.",
      "context": [],
      "acceptance": [
        "Root package.json includes devDependencies 'prettier' and 'eslint-config-prettier' with non-empty versions.",
        ".prettierrc exists at the project root and contains exactly: { \"semi\": false, \"singleQuote\": true, \"trailingComma\": \"all\", \"printWidth\": 100 }.",
        ".eslintrc.cjs exists at the project root and integrates Prettier by including 'prettier' in its 'extends' array.",
        "package.json scripts include 'lint' which invokes eslint and explicitly lints TypeScript files (includes at least .ts and .tsx extensions).",
        "package.json scripts include 'format' which runs Prettier in write mode across the repository (contains 'prettier' and '--write', targeting the project, e.g., '.')"
      ],
      "dependencies": [
        "1.1"
      ]
    },
    {
      "id": "1.3",
      "status": "-",
      "title": "Harden Security and Verify Build",
      "description": "Review the main process code in `electron/main/index.ts`. Ensure the `BrowserWindow` is created with `contextIsolation: true` and `sandbox: true` in its `webPreferences`. Run `pnpm run dev` to confirm the application starts correctly with the default React placeholder. Run `pnpm run build` and verify that it generates a runnable application in the `dist` directory.",
      "plan": "Harden Security and Verify Build \u2014 Implementation Plan\n\nScope\n- Ensure BrowserWindow uses secure webPreferences: contextIsolation: true, sandbox: true, nodeIntegration: false, webSecurity: true.\n- Add navigation hardening (deny window open, restrict will-navigate).\n- Ensure preload uses contextBridge with a minimal API; add a sample ping.\n- Verify pnpm run dev launches the React placeholder, pnpm run build creates runnable dist.\n- Provide automation scripts to apply/check the hardening; update docs accordingly.\n\nPre-requisites\n1) Ensure Node.js >= 18 and pnpm installed.\n   - Check: node -v, pnpm -v\n   - If missing: install Node 18+ (nvm or official installer) and pnpm (corepack enable or npm i -g pnpm).\n\nRepository Preparation\n2) Confirm scaffold presence, else generate it.\n   - If package.json does not include electron-vite and React+TS structure:\n     a) pnpm create electron-vite@latest .\n     b) Choose React + TypeScript template.\n     c) pnpm install\n   - Ensure scripts in package.json:\n     - dev: electron-vite dev\n     - build: electron-vite build && electron-builder\n     - lint: eslint . --ext .ts,.tsx,.js,.cjs --max-warnings 0\n     - format: prettier --write .\n\nProject Structure (assumed by the plan; create if absent)\n3) Verify folders exist (create if missing):\n   - electron/main/index.ts\n   - electron/preload/index.ts\n   - electron/renderer/index.html and renderer React entry (e.g., src/main.tsx or electron/renderer/src/main.tsx depending on template)\n   - scripts/ (new directory for automation scripts)\n\nAutomation Scripts\n4) Create scripts/hardenSecurity.mjs to apply/patch security settings (idempotent):\n   - Read and patch electron/main/index.ts to:\n     a) Create BrowserWindow with:\n        webPreferences: {\n          preload: path.join(__dirname, '../preload/index.js'),\n          contextIsolation: true,\n          sandbox: true,\n          nodeIntegration: false,\n          webSecurity: true,\n          devTools: process.env.NODE_ENV !== 'production'\n        }\n     b) Add mainWindow.webContents.setWindowOpenHandler(() => ({ action: 'deny' }))\n     c) Add will-navigate guard:\n        - In dev: allow only URLs starting with process.env.VITE_DEV_SERVER_URL\n        - In prod: allow only file://\n        - Prevent otherwise (e.preventDefault())\n     d) Ensure enableRemoteModule is not enabled anywhere.\n   - Read and patch electron/preload/index.ts to ensure:\n     a) import { contextBridge, ipcRenderer } from 'electron'\n     b) contextBridge.exposeInMainWorld('api', { ping: () => ipcRenderer.invoke('ping') })\n     c) If file missing, create it using the above minimal preload content.\n   - Read and patch electron/main/index.ts to add IPC handler:\n     a) import { ipcMain } from 'electron'\n     b) ipcMain.handle('ping', () => 'pong')\n   - Read and patch electron/renderer/index.html to add a CSP meta tag for production builds if missing:\n     <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self' ws: http: https:; font-src 'self'; frame-ancestors 'none'; base-uri 'self';\" />\n     - Note: allow ws: and http(s) in connect-src to support Vite dev HMR; in production this will still be fine for self. If template supports environment-based HTML transforms, use them to restrict further in prod.\n   - Ensure import paths and __dirname resolution are compatible with electron-vite output (use path.join with __dirname).\n   - Make script idempotent by scanning for existing code blocks before inserting/modifying.\n\n5) Create scripts/checkSecuritySettings.mjs (CI-friendly guard):\n   - Read electron/main/index.ts and verify regex checks for:\n     - contextIsolation: true\n     - sandbox: true\n     - nodeIntegration: false\n     - webSecurity: true\n     - setWindowOpenHandler with action 'deny'\n     - will-navigate handler preventing external navigations\n   - Exit with non-zero code and descriptive errors if any checks fail.\n\n6) Wire scripts into package.json:\n   - \"harden:security\": \"node scripts/hardenSecurity.mjs\"\n   - \"lint:security\": \"node scripts/checkSecuritySettings.mjs\"\n\nMain Process Hardening (if editing manually instead of via script)\n7) In electron/main/index.ts (illustrative target state):\n   - Import path: import path from 'node:path'\n   - Create BrowserWindow({\n       webPreferences: {\n         preload: path.join(__dirname, '../preload/index.js'),\n         contextIsolation: true,\n         sandbox: true,\n         nodeIntegration: false,\n         webSecurity: true,\n         devTools: process.env.NODE_ENV !== 'production'\n       }\n     })\n   - Add:\n     mainWindow.webContents.setWindowOpenHandler(() => ({ action: 'deny' }))\n     const devUrl = process.env.VITE_DEV_SERVER_URL || ''\n     mainWindow.webContents.on('will-navigate', (e, url) => {\n       const isDev = Boolean(devUrl)\n       const allowed = isDev ? url.startsWith(devUrl) : url.startsWith('file://')\n       if (!allowed) e.preventDefault()\n     })\n   - Add IPC ping handler:\n     import { ipcMain } from 'electron'\n     ipcMain.handle('ping', () => 'pong')\n\nPreload Isolation (if editing manually)\n8) In electron/preload/index.ts:\n   - import { contextBridge, ipcRenderer } from 'electron'\n   - contextBridge.exposeInMainWorld('api', { ping: () => ipcRenderer.invoke('ping') })\n\nRenderer Type Safety\n9) Create or update global type for window.api:\n   - Add types/global.d.ts (or src/types/global.d.ts under renderer):\n     declare global {\n       interface Window { api: { ping: () => Promise<string> } }\n     }\n     export {}\n   - Ensure tsconfig for renderer includes this type root.\n\nCSP in Renderer HTML\n10) In electron/renderer/index.html ensure CSP meta present (as inserted by script). If the template offers environment-based HTML transforms, restrict connect-src to 'self' for production.\n\nESLint and Prettier\n11) Ensure ESLint/Prettier configs exist. If missing, add minimal configs:\n   - .eslintrc.cjs configured for TS/React and Node for main/preload; ensure no-restricted-globals for window usage in main.\n   - prettier.config.cjs with preferred defaults.\n\nDocs\n12) Create docs/tasks/1/feature_1_3_hardening.md documenting:\n   - What hardening was applied and why.\n   - How to run the automation scripts.\n   - Manual verification steps for dev and build (see below).\n\n13) Update docs/FILE_ORGANISATION.md to include scripts/ directory and docs/tasks/1 entries:\n   - Mention scripts/ contains automation scripts (harden and checks).\n   - Mention docs/tasks/{id}/ contains per-task feature docs.\n\nVerification \u2014 Dev\n14) Install dependencies:\n   - pnpm install\n\n15) Apply hardening automatically:\n   - pnpm run harden:security\n   - pnpm run lint:security (should pass)\n\n16) Launch dev app:\n   - pnpm run dev\n   - Expected: Electron window opens with the React placeholder UI.\n   - In DevTools console (if opened), test: await window.api.ping() -> 'pong'.\n   - Confirm no external windows can be opened (window.open is denied).\n\nVerification \u2014 Build\n17) Build the app:\n   - pnpm run build\n   - Expected: dist/ contains platform-specific artifacts (e.g., dist/win-unpacked/*.exe, dist/mac/*.app, or dist/linux-unpacked/ depending on OS).\n\n18) Run the built binary:\n   - Windows: dist/win-unpacked/<AppName>.exe\n   - macOS: open dist/mac/<AppName>.app\n   - Linux: ./dist/linux-unpacked/<app-binary>\n   - Expected: App launches with React placeholder; no console security errors; contextIsolation and sandbox active.\n\nOptional: Packaging Security\n19) Ensure electron-builder asar packaging is enabled (default true). If not, configure asar: true in electron-builder config (package.json or electron-builder.yml).\n\nCI/Automation (optional but recommended)\n20) Add a CI step (GitHub Actions) to run pnpm install, pnpm run lint, pnpm run lint:security, pnpm run build (skip running the built app). Store dist artifacts as workflow artifacts if desired.\n\nVersion Control\n21) Commit changes in logical units:\n   - feat(security): add hardening script and apply secure defaults\n   - chore(scripts): add security checks\n   - docs: add hardening guide and update FILE_ORGANISATION.md\n\nRollback Plan\n22) Since scripts are idempotent and patch-based, keep backups before writing files (script can write .bak on first run). Revert by restoring .bak or git checkout.\n",
      "context": [],
      "acceptance": [
        "electron/main/index.ts exists.",
        "BrowserWindow in electron/main/index.ts is created with webPreferences.contextIsolation set to true.",
        "BrowserWindow in electron/main/index.ts is created with webPreferences.sandbox set to true.",
        "BrowserWindow in electron/main/index.ts is created with webPreferences.nodeIntegration set to false.",
        "BrowserWindow in electron/main/index.ts is created with webPreferences.webSecurity set to true.",
        "electron/main/index.ts configures mainWindow.webContents.setWindowOpenHandler to deny all window opens (returns action: 'deny').",
        "electron/main/index.ts registers a will-navigate handler that prevents navigation to URLs outside the allowed app origin (dev server in development; file:// in production) by calling event.preventDefault() for disallowed URLs.",
        "electron/preload/index.ts exists and uses contextBridge.exposeInMainWorld to expose a minimal API object.",
        "electron/main/index.ts registers an ipcMain handler for the 'ping' channel that returns 'pong'.",
        "package.json contains a dev script that starts the Electron app for development (e.g., using electron-vite dev).",
        "package.json contains a build script that builds and packages the app to a dist directory (e.g., using electron-vite build and electron-builder)."
      ],
      "dependencies": [
        "1.2"
      ]
    }
  ]
}