{
  "id": 1,
  "status": "-",
  "title": "Electron + React + TypeScript scaffold",
  "description": "Initialize the app using a modern toolchain (electron-vite with React + TypeScript).",
  "features": [
    {
      "id": "1.1",
      "status": "-",
      "title": "Initialize Project",
      "description": "Create the Electron + React + TypeScript scaffolding so that dev work can begin",
      "plan": "Implementation Plan: Electron + React + TypeScript scaffold (electron-vite)\n\n1) Repository preparation\n   1.1 Ensure prerequisites: Node.js >= 18 and Git installed.\n   1.2 Create required directories (if missing):\n       - scripts/\n       - docs/apps/desktop/\n       - docs/tasks/1/\n       - src/ (top-level source container)\n   1.3 Update .gitignore at repository root to append the following lines if not already present:\n       - src/desktop/node_modules/\n       - src/desktop/dist/\n       - src/desktop/out/\n       - src/desktop/.vite/\n       - src/desktop/.turbo/\n\n2) Bootstrap automation (primary setup script)\n   2.1 Create a Node script at scripts/bootstrap_desktop_app.mjs that performs idempotent setup:\n       - Imports: node:path, node:fs/promises, node:child_process (spawn), node:os.\n       - Helper: run(cmd, args, options) to run cross-platform commands and stream stdio; reject on non-zero exit.\n       - Detect repository root as process.cwd(); set targetDir = path.join(repoRoot, 'src/desktop').\n       - Detect package manager: try 'pnpm --version' first; fallback to 'npm'; set pmInstall and pmExec accordingly.\n       - If targetDir does not exist, scaffold with electron-vite React TypeScript template:\n         a) run: ['npx', ['--yes', 'create-electron-vite@latest', 'src/desktop', '--template', 'react-ts']] from repoRoot.\n         b) On failure, print clear error and exit process with non-zero code.\n       - Ensure dependencies are installed inside targetDir: run `${pm} install`.\n       - Read and modify package.json in targetDir to ensure these scripts exist (merge without removing existing):\n         \u2022 \"dev\": \"electron-vite dev\"\n         \u2022 \"build\": \"electron-vite build\"\n         \u2022 \"build:win\": \"electron-vite build --win\"\n         \u2022 \"build:mac\": \"electron-vite build --mac\"\n         \u2022 \"build:linux\": \"electron-vite build --linux\"\n         \u2022 \"preview\": \"electron-vite preview\"\n         \u2022 \"lint\": \"eslint .\"\n         \u2022 \"typecheck\": \"tsc --noEmit\"\n       - Ensure required dependencies are present in package.json (either dependencies or devDependencies). If missing, add and install:\n         \u2022 electron, electron-vite, react, typescript (respecting typical template placement: electron/electron-vite as devDependencies, react/typescript as dependencies/devDependencies per template). Only add missing ones.\n       - Add ESLint/Prettier if not present:\n         \u2022 Install as devDependencies: eslint, prettier, @typescript-eslint/eslint-plugin, @typescript-eslint/parser, eslint-config-prettier.\n         \u2022 Write .eslintrc.cjs if missing with content:\n           module.exports = {\n             root: true,\n             env: { browser: true, node: true, es2022: true },\n             parser: '@typescript-eslint/parser',\n             parserOptions: { ecmaVersion: 'latest', sourceType: 'module', ecmaFeatures: { jsx: true } },\n             plugins: ['@typescript-eslint', 'react', 'react-hooks'],\n             extends: [\n               'eslint:recommended',\n               'plugin:@typescript-eslint/recommended',\n               'plugin:react/recommended',\n               'plugin:react-hooks/recommended',\n               'prettier',\n             ],\n             settings: { react: { version: 'detect' } },\n           };\n         \u2022 Write .prettierrc.json if missing with content: { \"singleQuote\": true, \"semi\": true, \"tabWidth\": 2, \"trailingComma\": \"es5\", \"printWidth\": 100 }\n       - Create .npmrc in targetDir with: save-exact=true (create or ensure the line exists).\n       - Ensure baseline files exist:\n         \u2022 .env.example with at least: VITE_APP_TITLE=Desktop App\n         \u2022 README.md with quick-start instructions for dev, build, lint, and typecheck (referencing npm and pnpm usage).\n       - If electron.vite.config.ts exists, optionally ensure productName/appId are set when default/undefined:\n         \u2022 productName: 'DesktopApp'\n         \u2022 appId: 'com.example.desktopapp'\n         (Only set if not present; do not overwrite existing values.)\n       - At end, print instructions: how to run dev (cd src/desktop && npm run dev) and build commands.\n   2.2 Create shell wrappers for cross-platform convenience:\n       - scripts/bootstrap_desktop_app.sh with content: #!/usr/bin/env bash\n         set -euo pipefail\n         node \"$(dirname \"$0\")/bootstrap_desktop_app.mjs\"\n       - scripts/bootstrap_desktop_app.ps1 with content: node \"$PSScriptRoot/bootstrap_desktop_app.mjs\"\n       - Mark .sh as executable in repo (chmod +x) during implementation.\n   2.3 Ensure idempotency: Running the script multiple times should be safe. Guard file writes with existence checks and merge JSON instead of replacing. Re-run installs without error.\n\n3) Generate the app scaffold\n   3.1 Run: node scripts/bootstrap_desktop_app.mjs to create src/desktop/ and install dependencies locally.\n   3.2 Verify the scaffold file layout exists:\n       - electron.vite.config.ts\n       - tsconfig.json\n       - Source layout: either current (src/main, src/preload, src/renderer) or legacy (electron/main/index.ts, electron/preload/index.ts, src/main.tsx) depending on template version.\n   3.3 Verify package.json contains the required scripts and dependencies.\n\n4) Documentation updates\n   4.1 Update docs/FILE_ORGANISATION.md to mention the Electron app location:\n       - Under Top-Level Directory Layout -> src/: add entry: \"src/desktop/: Electron + React + TypeScript app (electron-vite)\".\n       - Add a brief tree outline of key generated files: electron.vite.config.ts, tsconfig.json, src/main, src/preload, src/renderer (or legacy electron/* paths).\n   4.2 Create docs/apps/desktop/README.md with:\n       - Overview: Electron + React + TypeScript app scaffolded by electron-vite.\n       - Prerequisites: Node >= 18.\n       - Setup: node scripts/bootstrap_desktop_app.mjs.\n       - Commands (run inside src/desktop): dev, build, preview, lint, typecheck, build:win, build:mac, build:linux.\n       - Troubleshooting tips: reinstall node_modules, permission issues, clearing caches.\n   4.3 Create docs/tasks/1/README.md summarizing Feature 1.1, linking to docs/apps/desktop/README.md, and listing acceptance checks.\n\n5) Tests for Feature 1.1\n   5.1 Add tasks/1/tests/test_1_1.py with deterministic checks (no GUI):\n       - Verify scripts/bootstrap_desktop_app.mjs, scripts/bootstrap_desktop_app.sh, scripts/bootstrap_desktop_app.ps1 exist and reference electron-vite and React TS.\n       - Verify docs updates: FILE_ORGANISATION.md mentions src/desktop; docs/apps/desktop/README.md exists and mentions electron-vite, react, typescript, prerequisites; docs/tasks/1/README.md exists.\n       - Verify .gitignore contains src/desktop/node_modules and src/desktop/dist.\n       - Verify src/desktop exists.\n       - Verify package.json contains required scripts and mentions electron-vite in dev and build scripts.\n       - Verify electron.vite.config.ts and tsconfig.json exist.\n       - Verify source layout (current or legacy) exists.\n       - Verify required dependencies presence: electron, electron-vite, react, typescript in deps or devDeps.\n       - Verify ESLint and Prettier configs exist (.eslintrc.cjs, .prettierrc.json).\n       - Verify .npmrc contains save-exact=true.\n       - Verify baseline .env.example and README.md in src/desktop.\n\n6) Local validation\n   6.1 Run bootstrap script locally: node scripts/bootstrap_desktop_app.mjs.\n   6.2 From src/desktop, run npm run dev to ensure it starts without errors (manual check).\n   6.3 From src/desktop, run npm run build to ensure it builds successfully (manual check).\n\n7) Commit and PR\n   7.1 Add and commit all new/modified files: scripts/, src/desktop/ scaffold (generated files), docs updates, tests, and .gitignore changes.\n   7.2 Use commit message: \"feat(app): scaffold Electron + React + TS via electron-vite under src/desktop; add bootstrap script, docs, tests\".\n   7.3 Open PR and ensure CI runs tests in tasks/1/tests/test_1_1.py successfully.\n",
      "context": [],
      "acceptance": []
    },
    {
      "id": "1.2",
      "status": "-",
      "title": "Configure Linting and Formatting",
      "description": "Make sure there's linting and formatting enabled. Assume the usage of VSCode.",
      "plan": "Implementation Plan: Configure Linting and Formatting\n\n1) Create one-shot setup script to automate config\n   - Add a new directory: scripts/\n   - Create scripts/setup-linting-formatting.js that:\n     a) Detects package manager: prefers pnpm if pnpm-lock.yaml exists, yarn if yarn.lock, bun if bun.lockb, else npm.\n     b) Installs dev dependencies:\n        eslint, @typescript-eslint/parser, @typescript-eslint/eslint-plugin, eslint-plugin-react, eslint-plugin-react-hooks, eslint-plugin-jsx-a11y, eslint-plugin-simple-import-sort, eslint-plugin-unused-imports, eslint-plugin-prettier, eslint-config-prettier, prettier, eslint-plugin-n, eslint-plugin-vitest, husky, lint-staged\n     c) Writes/overwrites the following files with the exact contents specified below:\n        - .editorconfig\n        - .prettierrc.json\n        - .prettierignore\n        - .eslintignore\n        - .eslintrc.cjs\n     d) Updates package.json:\n        - Adds scripts:\n          \"lint\": \"eslint . --ext .cjs,.mjs,.js,.ts,.tsx\",\n          \"lint:fix\": \"npm run lint -- --fix\",\n          \"format\": \"prettier --write .\",\n          \"format:check\": \"prettier --check .\",\n          \"prepare\": \"husky install\"\n        - Adds lint-staged config (package.json top-level key):\n          {\n            \"*.{js,jsx,ts,tsx,cjs,mjs}\": [\"eslint --fix\"],\n            \"*.{json,css,scss,md,yml,yaml,html}\": [\"prettier --write\"]\n          }\n     e) Initializes Husky and the pre-commit hook:\n        - Runs: npx husky install (or pnpm dlx husky-init, then pnpm install, depending on the chosen manager)\n        - Creates .husky/pre-commit with content:\n          #!/usr/bin/env sh\n          . \"$(dirname -- \"$0\")/_/husky.sh\"\n          npx --no-install lint-staged\n     f) Optionally creates CI workflow at .github/workflows/lint.yml (see step 6 for contents) unless CI already exists.\n     g) Makes the script idempotent (re-running should not break; check file existence and skip/overwrite safely).\n\n2) Define configuration files to be written by the setup script\n   - .editorconfig contents:\n     root = true\n     [*]\n     indent_style = space\n     indent_size = 2\n     end_of_line = lf\n     charset = utf-8\n     trim_trailing_whitespace = true\n     insert_final_newline = true\n     [*.md]\n     trim_trailing_whitespace = false\n\n   - .prettierrc.json contents (JSON):\n     {\n       \"printWidth\": 100,\n       \"tabWidth\": 2,\n       \"singleQuote\": true,\n       \"trailingComma\": \"all\",\n       \"semi\": true,\n       \"arrowParens\": \"always\",\n       \"bracketSpacing\": true,\n       \"endOfLine\": \"lf\"\n     }\n\n   - .prettierignore contents:\n     node_modules\n     dist\n     build\n     out\n     coverage\n     .husky\n     .github\n     .next\n     .cache\n     .turbo\n     .vite\n\n   - .eslintignore contents:\n     node_modules\n     dist\n     build\n     out\n     coverage\n     .husky\n     .github\n     .next\n     .cache\n     .turbo\n     .vite\n\n   - .eslintrc.cjs contents (CJS):\n     module.exports = {\n       root: true,\n       env: { es2023: true },\n       parser: '@typescript-eslint/parser',\n       parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },\n       plugins: [\n         '@typescript-eslint',\n         'react',\n         'react-hooks',\n         'jsx-a11y',\n         'simple-import-sort',\n         'unused-imports',\n         'prettier',\n         'n',\n         'vitest'\n       ],\n       extends: [\n         'eslint:recommended',\n         'plugin:@typescript-eslint/recommended',\n         'plugin:react/recommended',\n         'plugin:react-hooks/recommended',\n         'plugin:jsx-a11y/recommended',\n         'plugin:n/recommended',\n         'plugin:vitest/recommended',\n         'plugin:prettier/recommended',\n         'prettier'\n       ],\n       settings: { react: { version: 'detect' } },\n       rules: {\n         'prettier/prettier': 'error',\n         'no-console': 'warn',\n         'no-debugger': 'warn',\n         'unused-imports/no-unused-imports': 'error',\n         '@typescript-eslint/no-unused-vars': [\n           'warn',\n           { argsIgnorePattern: '^_', varsIgnorePattern: '^_', ignoreRestSiblings: true }\n         ],\n         'simple-import-sort/imports': 'warn',\n         'simple-import-sort/exports': 'warn',\n         'react/react-in-jsx-scope': 'off'\n       },\n       overrides: [\n         {\n           files: ['src/renderer/**/*.{ts,tsx,js,jsx}'],\n           env: { browser: true }\n         },\n         {\n           files: ['src/main/**/*.{ts,js}', 'src/preload/**/*.{ts,js}', '*.config.{ts,js,mjs,cjs}'],\n           env: { node: true }\n         },\n         {\n           files: ['**/*.{test,spec}.{ts,tsx,js,jsx}'],\n           env: { 'vitest/globals': true }\n         }\n       ],\n       ignorePatterns: ['dist', 'build', 'out', 'node_modules', '.husky']\n     };\n\n3) Implement the setup script (scripts/setup-linting-formatting.js)\n   - Use Node.js fs and child_process modules.\n   - Steps in script:\n     a) Detect package manager (read presence of lockfiles).\n     b) Build install command with the detected manager (npm i -D, pnpm add -D, yarn add -D, bun add -d).\n     c) Install devDependencies listed in step 1b.\n     d) Ensure scripts/ directory exists.\n     e) Write config files with exact contents from step 2, creating them at repo root.\n     f) Read package.json, merge scripts and lint-staged config (do not clobber existing entries; merge conservatively). Ensure \"prepare\": \"husky install\" is present.\n     g) Run husky install and create .husky/pre-commit with the specified content (mark executable).\n     h) If .github/workflows/ does not exist, create and write lint.yml from step 6.\n     i) Log a summary of actions and next steps.\n\n4) Update package.json manually if the script cannot (fallback)\n   - Add scripts and lint-staged config as described in step 1d if the script cannot write to package.json due to environment restrictions.\n\n5) Add developer documentation\n   - Create docs/tasks/1/linting_and_formatting.md with:\n     a) Overview of tools (ESLint, Prettier, Husky, lint-staged) and why.\n     b) How to run the setup script: node scripts/setup-linting-formatting.js\n     c) How to run locally: npm run lint, npm run lint:fix, npm run format, npm run format:check\n     d) How pre-commit hooks work and how to skip them (e.g., --no-verify).\n     e) Notes for Electron contexts: renderer (browser env) vs main/preload (node env) handled by ESLint overrides.\n     f) Guidance for path aliases (if using tsconfig paths, add eslint-import-resolver or adjust simple-import-sort groups later).\n     g) CI note: lint workflow runs on push and PR; how to troubleshoot.\n\n6) Add optional CI workflow to enforce linting and formatting\n   - Create .github/workflows/lint.yml with the following content:\n     name: Lint and Format\n     on:\n       pull_request:\n       push:\n         branches: [ main ]\n     jobs:\n       lint:\n         runs-on: ubuntu-latest\n         steps:\n           - uses: actions/checkout@v4\n           - uses: actions/setup-node@v4\n             with:\n               node-version: '20'\n           - name: Install dependencies\n             run: |\n               if [ -f pnpm-lock.yaml ]; then npm i -g pnpm && pnpm i; \\\n               elif [ -f yarn.lock ]; then yarn install --frozen-lockfile; \\\n               elif [ -f bun.lockb ]; then curl -fsSL https://bun.sh/install | bash && bun install; \\\n               else npm ci; fi\n           - name: ESLint\n             run: npm run lint\n           - name: Prettier (check)\n             run: npm run format:check\n\n7) Update repository organization documentation\n   - Edit docs/FILE_ORGANISATION.md to include:\n     a) In Top-Level Directory Layout: add scripts/: Project automation scripts (e.g., setup-linting-formatting).\n     b) Add .husky/: Git hooks configured by Husky.\n     c) Add .github/workflows/: CI workflows (e.g., lint on push/PR).\n     d) Note that these are introduced by the linting/formatting feature.\n\n8) Add deterministic tests for this feature\n   - Create tasks/1/tests/test_1_2.py with checks such as:\n     a) Files exist: .eslintrc.cjs, .editorconfig, .prettierrc.json, .prettierignore, .eslintignore.\n     b) package.json contains scripts: lint, lint:fix, format, format:check, prepare.\n     c) package.json contains a lint-staged configuration with keys for JS/TS and common text files.\n     d) .husky/pre-commit exists and contains \"npx --no-install lint-staged\".\n     e) scripts/setup-linting-formatting.js exists.\n     f) Optional: .github/workflows/lint.yml exists and runs lint and format:check.\n\n9) Verify locally\n   - Run: node scripts/setup-linting-formatting.js\n   - Run: npm run lint and npm run format:check to ensure configurations work across src/main, src/preload, and src/renderer (if present).\n\n10) Commit changes\n   - Commit newly added files and documentation.\n   - Ensure pre-commit hook runs and passes.\n\nNotes and caveats\n- If TypeScript path aliases are introduced later, consider adding eslint-import-resolver-typescript for import resolution, or configure simple-import-sort groups accordingly.\n- If Jest is used instead of Vitest, replace eslint-plugin-vitest configuration with eslint-plugin-jest and adjust overrides.\n- The setup script should avoid enabling type-aware rules that require parserOptions.project to keep performance acceptable and avoid tsconfig coupling by default.\n",
      "context": [],
      "acceptance": [],
      "dependencies": [
        "1.1"
      ]
    },
    {
      "id": "1.3",
      "status": "-",
      "title": "README.md",
      "description": "A README.md file documenting information and steps to take for developers",
      "plan": "Implementation Plan: README.md for Electron + React + TypeScript (electron-vite)\n\n1) Create README.md at the repository root\n- Path: README.md\n- Goal: Provide developers all essential information to develop, build, lint, format, and understand the Electron + React + TypeScript app scaffolded with electron-vite.\n\n2) Add Title and Summary\n- Title: Electron + React + TypeScript (electron-vite)\n- Summary: Briefly describe that this is a modern Electron scaffold using electron-vite, React, and TypeScript; includes secure defaults (contextIsolation, nodeIntegration off), and separates main, preload, renderer packages.\n\n3) Insert a Table of Contents\n- Include anchors for: Overview, Requirements, Quick Start, Scripts, Project Structure, Security Defaults, TypeScript Setup, Linting & Formatting, Environment Variables & CSP, Development Guidelines (IPC & Preload API), Build & Distribution, Troubleshooting, Contributing, License.\n\n4) Overview Section\n- Describe the stack: Electron main process, React renderer (Vite), TypeScript everywhere, bundling via electron-vite.\n- Mention target OSs: macOS, Windows, Linux.\n- Call out secure IPC via preload using contextBridge; no Node APIs in renderer.\n\n5) Requirements Section\n- Node.js LTS recommendation (>=18 or >=20).\n- Supported package managers: pnpm (recommended) or npm.\n- Optional tools: Git, VS Code with ESLint/Prettier extensions.\n\n6) Quick Start Section\n- Steps:\n  a. Clone repository.\n  b. Install dependencies: pnpm install (or npm install).\n  c. Start development: pnpm dev (or npm run dev) to launch Electron with live-reload.\n  d. Build production: pnpm build (or npm run build) to produce artifacts in dist/.\n- Expected outcome: dev opens the Electron app; build generates release assets in dist/.\n\n7) Scripts Section\n- Document expected scripts and what they do:\n  - dev: Runs electron-vite in dev mode for main, preload, and renderer, then launches Electron.\n  - build: Builds and packages the application into dist/.\n  - lint: Runs ESLint across all packages.\n  - format: Runs Prettier to format the codebase.\n- Provide both pnpm and npm invocation examples for each script.\n- Instruction: If exact script names differ in package.json, adjust this section accordingly during implementation.\n\n8) Project Structure Section\n- Provide an example tree reflecting electron-vite multi-package layout:\n  repo_root/\n  - packages/\n    - main/        (Electron main process)\n    - preload/     (Preload scripts; exposes safe API via contextBridge)\n    - renderer/    (React UI; Vite-powered)\n  - dist/          (Built app outputs)\n  - electron.vite.config.ts (or per-package configs)\n  - tsconfig.base.json\n  - packages/*/tsconfig.json\n  - .eslintrc.*\n  - .prettierrc.*\n  - .editorconfig\n  - README.md\n- Explain the responsibility of each package, and the strict separation (no Node.js APIs in renderer).\n\n9) Security Defaults Section\n- Document recommended Electron webPreferences:\n  - contextIsolation: true\n  - sandbox: true where applicable\n  - nodeIntegration: false\n  - enableRemoteModule: false (if applicable)\n- Explain secure IPC via preload; never expose privileged APIs directly on window without validation.\n- Link to Electron Security Guidelines.\n- Provide minimal example snippets:\n  - preload: contextBridge.exposeInMainWorld('api', { foo: () => ipcRenderer.invoke('foo') })\n  - main: ipcMain.handle('foo', async () => { /* implementation */ })\n\n10) TypeScript Setup Section\n- Describe tsconfig.base.json and per-package tsconfig.json usage.\n- Note strict type checking and any path aliases.\n- Suggest how to run a type check (e.g., tsc --noEmit) or refer to an existing script if present.\n\n11) Linting & Formatting Section\n- Note ESLint and Prettier configurations at repo root (or where they will reside).\n- Provide commands: pnpm lint / pnpm format (or npm run).\n- Recommend enabling editor integrations; reference .editorconfig.\n\n12) Environment Variables & CSP Section\n- Describe .env handling with Vite (renderer exposes only variables prefixed with VITE_).\n- Warn not to put secrets in renderer env; prefer main process or OS keychain.\n- Provide example production CSP and how to apply it via meta tag or headers for file protocol where applicable.\n\n13) Development Guidelines: IPC & Preload API\n- Provide a pattern:\n  - Define a typed API interface in preload (e.g., global window.api typed via d.ts).\n  - Use ipcMain.handle/ipcRenderer.invoke for request/response; avoid send/on for sensitive data.\n  - Centralize channel names and types.\n  - Suggest directory conventions for preload API surface and corresponding main handlers.\n\n14) Build & Distribution Section\n- Describe build behavior: pnpm build produces optimized bundles and installers in dist/ (dmg, exe, AppImage depending on platform).\n- Explain how to run the production build locally (opening packaged app from dist/ or running Electron with built main bundle if applicable to config).\n\n15) Troubleshooting Section\n- Common issues and remedies:\n  - Node version mismatch: use nvm to switch to LTS.\n  - macOS Gatekeeper quarantine: xattr -dr com.apple.quarantine <app>.\n  - Windows SmartScreen for unsigned builds: acknowledge prompt or sign binaries.\n  - Dev server port conflicts: change Vite port or close conflicting process.\n  - Blank window due to CSP: relax CSP or correct asset URLs.\n\n16) Contributing Section\n- State coding standards (ESLint/Prettier), PR guidelines, and optional commit conventions.\n- Note optional pre-commit hooks (husky/lint-staged) if introduced later.\n\n17) License Section\n- Add the project license reference (e.g., MIT) and point to LICENSE file.\n\n18) Update docs/FILE_ORGANISATION.md to reflect Electron app directories\n- Under Top-Level Directory Layout, add:\n  - packages/: Electron monorepo workspace containing:\n    - packages/main/: Electron main process code\n    - packages/preload/: Preload scripts exposing safe APIs via contextBridge\n    - packages/renderer/: React UI (Vite)\n  - dist/: Build outputs and packaged app\n  - electron.vite config file(s) and tsconfig.base.json\n- Update the Example Tree to include the new folders, keeping existing docs/ and tasks/ entries.\n\n19) Validation Checklist\n- Verify README.md includes: dev/build/lint/format instructions; security defaults; project structure; TypeScript, ESLint, Prettier notes.\n- Verify docs/FILE_ORGANISATION.md updated accordingly.\n- Ensure commands match the actual package.json scripts (adjust README if names differ).\n\n20) Commit Changes\n- Commit message: \"docs: add comprehensive README for Electron + React + TS scaffold and update file organisation\".\n\n21) Final QA\n- Open README.md in a Markdown preview to validate headings, lists, links, and code blocks.\n- If markdownlint is available, run it and fix any issues; otherwise perform a manual pass for consistency.",
      "context": [
        "README.md",
        "docs/FILE_ORGANISATION.md"
      ],
      "acceptance": [],
      "dependencies": [
        "1.1",
        "1.2"
      ]
    }
  ]
}