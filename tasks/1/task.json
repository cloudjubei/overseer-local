{
  "id": 1,
  "status": "-",
  "title": "Electron + React + TypeScript scaffold",
  "description": "Initialize the app using a modern toolchain (electron-vite with React + TypeScript).",
  "features": [
    {
      "id": "1.1",
      "status": "-",
      "title": "Initialize Project",
      "description": "",
      "plan": "",
      "context": [],
      "acceptance": []
    },
    {
      "id": "1.2",
      "status": "-",
      "title": "Configure Linting and Formatting",
      "description": "",
      "plan": "",
      "context": [
      ],
      "acceptance": [
      ],
      "dependencies": [
        "1.1"
      ]
    },
    {
      "id": "1.3",
      "status": "-",
      "title": "README.md",
      "description": "A README.md file documenting information and steps to take for developers",
      "plan": "1) Create README.md at the repository root\n- File: README.md\n- Purpose: Provide developers with all information needed to run, build, lint, format, understand structure, and adhere to security guidelines for the Electron + React + TypeScript app scaffolded with electron-vite.\n\n2) Write Title and Summary\n- Add project title: \"Electron + React + TypeScript (electron-vite)\"\n- Include a short summary: modern Electron app scaffold using electron-vite, React, TypeScript; secure defaults (contextIsolation=true, sandbox where applicable), and separated packages for main, preload, renderer.\n\n3) Add Table of Contents for quick navigation\n- Sections to include: Overview, Requirements, Quick Start, Scripts, Project Structure, Security Defaults, TypeScript Setup, Linting & Formatting, Environment Variables & CSP, Development Guidelines (IPC & Preload API), Build & Distribution, Troubleshooting, Contributing, License.\n\n4) Overview section\n- Describe the tech stack: Electron + React + TypeScript, bundling via electron-vite, Vite for renderer, secure IPC via preload using contextBridge.\n- Mention target OSs: macOS, Windows, Linux.\n\n5) Requirements section\n- Specify Node.js LTS versions supported (e.g., >=18.x or >=20.x), and recommend using an LTS version.\n- Package manager options: pnpm (recommended) or npm.\n- Optional: Git, recommended editors (VS Code) and extensions for ESLint/Prettier.\n\n6) Quick Start section\n- Steps:\n  a. Clone repository\n  b. Install dependencies: pnpm install (or npm install)\n  c. Run dev server: pnpm dev (or npm run dev)\n  d. Run build: pnpm build (or npm run build)\n- State expected outcomes: dev opens Electron with React placeholder; build outputs runnable app in dist/.\n\n7) Scripts section (explicit command reference)\n- List and explain available scripts:\n  - dev: start electron-vite dev for main, preload, renderer; launches Electron app.\n  - build: production build and packaging into dist.\n  - lint: run ESLint across all packages.\n  - format: run Prettier to format codebase.\n- Provide both pnpm and npm invocation examples for each.\n\n8) Project Structure section\n- Present a tree overview reflecting the electron-vite multi-package layout:\n  repo_root/\n  \u251c\u2500 packages/\n  \u2502  \u251c\u2500 main/            (Electron main process)\n  \u2502  \u251c\u2500 preload/         (Preload scripts, exposed API via contextBridge)\n  \u2502  \u2514\u2500 renderer/        (React UI, Vite powered)\n  \u251c\u2500 dist/               (Build output / packaged app)\n  \u251c\u2500 electron.vite.config.ts or per-package vite configs\n  \u251c\u2500 tsconfig.base.json\n  \u251c\u2500 packages/*/tsconfig.json\n  \u251c\u2500 .eslintrc.*\n  \u251c\u2500 .prettierrc.*\n  \u251c\u2500 .editorconfig\n  \u2514\u2500 README.md\n- Summarize purpose of each package (main, preload, renderer) and note strict separation of concerns and no Node APIs in renderer.\n\n9) Security Defaults section\n- Document:\n  - contextIsolation: true\n  - sandbox: true where applicable (non-BrowserView contexts) and fallback notes\n  - nodeIntegration: false\n  - enableRemoteModule: false (if applicable)\n  - use secure IPC via preload; never expose privileged APIs directly to window\n  - recommend setting Content-Security-Policy and example CSP string for production\n  - linking to Electron Security Guidelines (with URL)\n- Include example snippet for contextBridge.exposeInMainWorld and ipcRenderer.invoke.\n\n10) TypeScript Setup section\n- Explain TypeScript usage for all packages, tsconfig.base.json and per-package tsconfig.json.\n- Mention strict mode and path aliases (if used), and how types are shared (e.g., shared types directory or type definitions in preload for API contracts).\n- Provide command to run type-check: use tsc --noEmit or include via scripts if available.\n\n11) Linting & Formatting section\n- ESLint config location and scope (covers main, preload, renderer).\n- Prettier config location and how to auto-fix: pnpm format / npm run format.\n- Editor integration recommendations and .editorconfig reference.\n\n12) Environment Variables & CSP section\n- Describe .env files per package if supported by electron-vite/Vite (e.g., .env, .env.production).\n- Note that only variables prefixed appropriately (e.g., VITE_) are exposed to renderer.\n- Warn against placing secrets in renderer env; use main process or OS keychain.\n- Provide example CSP for production and how to apply it (e.g., meta tag or headers via file protocol handler if applicable).\n\n13) Development Guidelines: IPC & Preload API section\n- Provide example: define channels in preload and invoke/handle in main using ipcMain.handle/ipcRenderer.invoke.\n- Suggest creating a typed API interface to avoid stringly-typed channels.\n- Outline directory convention for preload API surface and main handlers.\n\n14) Build & Distribution section\n- Document build command behavior: pnpm build (or npm run build) produces optimized bundles and a packaged app installer in dist/.\n- Explain how to run the production build locally (e.g., starting electron with built main bundle if applicable; but typically run the packaged app from dist/).\n- Note platform-specific artifacts (dmg, exe, AppImage) depending on OS.\n\n15) Troubleshooting section\n- Common issues:\n  - Node version mismatches (advise using nvm)\n  - macOS Gatekeeper (xattr -dr com.apple.quarantine path)\n  - Windows SmartScreen warnings (unsigned binaries)\n  - Port conflicts for Vite dev server\n  - Blank window due to CSP misconfiguration\n- Provide succinct fixes or references.\n\n16) Contributing section\n- Coding standards (ESLint/Prettier), commit message conventions (if any), PR guidelines, and branching model.\n- Optional: add pre-commit hooks recommendation (lint-staged + husky), noting they are out of scope if not configured.\n\n17) License section\n- Add placeholder or the actual license name with a link/file reference.\n\n18) Cross-reference and update docs/FILE_ORGANISATION.md for new major directories\n- Edit docs/FILE_ORGANISATION.md to add the electron app layout under Top-Level Directory Layout:\n  - Add: packages/: Electron app monorepo workspace containing:\n    - packages/main/: Electron main process code\n    - packages/preload/: Preload scripts exposing a safe, typed API\n    - packages/renderer/: React UI (Vite)\n  - Add: dist/: Production build outputs and packaged app\n  - Mention electron.vite config files and tsconfig.base.json\n- Update Example Tree to illustrate the new folders (in addition to existing docs/ and tasks/ directories) to maintain authoritative documentation.\n\n19) Validate acceptance for this feature\n- Ensure README.md includes:\n  - Instructions for dev, build, lint, format\n  - Description of secure defaults (contextIsolation, sandbox, nodeIntegration off)\n  - Clear project structure (main, preload, renderer separation)\n  - Notes on TypeScript, ESLint, Prettier\n- Ensure docs/FILE_ORGANISATION.md updated to reflect new directories.\n\n20) Commit changes\n- Commit message: \"docs: add comprehensive README for Electron + React + TS scaffold and update file organisation\"\n\n21) Final check\n- Open README.md in a Markdown preview to verify anchors, code blocks, and links render correctly.\n- Verify that commands listed match the scripts defined by the scaffold (dev, build, lint, format).\n",
      "context": [],
      "acceptance": [],
      "dependencies": [
        "1.1",
        "1.2"
      ]
    }
  ]
}