{
  "id": "5683c65b-1491-4a73-9e85-3ff27f782fb3",
  "status": "?",
  "title": "RAG/Knowledge graph - making the Agents clever",
  "description": "The electron app developed in `src/` has an agentic chat which needs extra features to make the agents clever. References `docs/FILE_ORGANISATION.md`. We want to make them clever by exposing clever local tools for them to use and most importantly that they have scoped knowledge access.",
  "features": [
    {
      "id": "90340040-698d-4146-9256-882e9e094fe1",
      "status": "+",
      "title": "Standard tools",
      "description": "Create a set of standard agent tools that live in a library like code that have documentation that always gets updated whenever there's a new tool added. This document is meant to be passed to an agent so that it knows precisely how to use the tools. The doc needs to be concise and not contain too many descriptions.",
      "context": [],
      "acceptance": []
    },
    {
      "id": "40342b64-e26f-42be-830c-b1390b9f341f",
      "status": "-",
      "title": "Web search tool",
      "description": "Create at least 3 versions of web search tools for the agent (for 3 different standard providers).",
      "context": [],
      "acceptance": [],
      "dependencies": [
        "90340040-698d-4146-9256-882e9e094fe1"
      ],
      "rejection": "include EXA as a tool"
    },
    {
      "id": "2ff4242f-8da0-44f6-9d65-2356605a195f",
      "status": "?",
      "title": "Context retrieval for chat - using graphiti",
      "description": "There's a library `https://github.com/getzep/graphiti` that provides an upgraded RAG database - a knowledge graph. Create agentic tools for this and allow local-only retrieval.",
      "plan": "",
      "context": [],
      "acceptance": [],
      "rejection": ""
    },
    {
      "id": "193ae0c7-60e0-4ebf-855d-e95c50233c80",
      "status": "-",
      "title": "Areas of knowledge",
      "description": "Assuming we have a knowledge graph in place - the user will want to ask questions about certain 'areas'/'contexts'/'scopes'. Imagine a knowledge graph about finance - it contains information about stocks, companies, cryptocurrencies, commodities etc. The user might want to limit the scope of a context when asking about Bitcoin to just cryptocurrencies - but maybe they want to see how Bitcoin affects the other knowledge or what commonalities it has.",
      "plan": "",
      "context": [],
      "acceptance": [],
      "dependencies": [
        "2ff4242f-8da0-44f6-9d65-2356605a195f"
      ]
    }
  ],
  "featureIdToDisplayIndex": {
    "90340040-698d-4146-9256-882e9e094fe1": 0,
    "40342b64-e26f-42be-830c-b1390b9f341f": 1,
    "2ff4242f-8da0-44f6-9d65-2356605a195f": 2,
    "193ae0c7-60e0-4ebf-855d-e95c50233c80": 3
  }
}