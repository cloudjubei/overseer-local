{
  "id": "2cd244ee-c255-487c-882c-c28cd857156e",
  "status": "-",
  "title": "Overseer backend - a Nest.js project",
  "description": "Up until now everything was running locally, but we would like to introduce other clients to work together on a project. The common ground where all project data would be located is a git repository.\nSo there needs to be a backend that would allow for clients to do everything this app does (manipulate projects/tasks/features) and launch agents on them (using thefactory-tools + any other future libraries/packages).\nThis means we also need to have a service for running agents as part of the backend - for the time being we can assume a monorepo for the backend and no external services.\n\nOne important requirement is that a client (like this one) might still want to run everything locally without touching the backend. It must still be possible to do so, which means that all project related data lives in the repository, apart from big blob data. Any indexing or extra storage of this blob data must be handled by the clients and backend as an additional feature - for instance searching files can be handled locally and externally via the backend employing exactly the same methods - i.e. thefactory-db package and thefactory-knowledge.\n\nWe need to spec out this task so that it contains all the features for the backend to work this way, and this app as the first client to integrate with it.\n\nThis is going to be a completely standalone project, not really related to this one (Overseer Local) - other than at some point this project will need to integrate with it via the REST/Websocket API (one of the last features to implement).\n\nFor the time being, all code for this new project can be placed under a new `backend` folder (so that in the future it's easy to create a separate repo for it.\n\nThe whole project must be well documented following the same ideas as in this project (so a `docs/FILE_ORGANISATION.md` and a `README.md` for how to quickly launch the project).\n\nA simple test that must be included as part of this task (the final feature) - would be to have a script that can be launched that will create a new task - and then this project would have to see the changes. Obviously, this means that new UI/UX will have to be introduced in this project - this also needs to be handled as one of the later features in this tak.",
  "features": [],
  "featureIdToDisplayIndex": {}
}