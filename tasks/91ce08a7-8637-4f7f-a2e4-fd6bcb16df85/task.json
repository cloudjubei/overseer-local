{
  "id": "91ce08a7-8637-4f7f-a2e4-fd6bcb16df85",
  "status": "+",
  "title": "Preview work",
  "description": "This is an Electron+React+Vite app. It would be ideal for an agent to immediately see the effect of their work by seeing a screenshot of how it renders in a given project. So after an agent changes some files via tools, they could request this new tool for screenshots of how the code/app that they just created renders. This can be based on this project. A methodology needs to be established - so components can be previewed this way. Perhaps each component requires special stubs and it's possible to tell ahead of time if such functionality is possible for that tool. When developing in XCode with SwiftUI it's possible to see previews such as these for even tiny components, and when using Android Studio - this is possible too. In XCode interaction is even possible within the component which would be the ideal example to emulate.",
  "features": [
    {
      "id": "76156835-c76f-410e-93ed-339d9fa69ded",
      "status": "+",
      "title": "Core screenshot capture service",
      "description": "Implement the foundational screenshot capture functionality using Electron's native capabilities. Create a service in the main process that can capture screenshots of the current renderer window or specific regions. This should handle different screenshot formats (PNG, JPEG) and quality settings. The service should expose IPC methods that can be called from the renderer process.",
      "plan": "",
      "context": [],
      "acceptance": []
    },
    {
      "id": "b618b560-d3fc-4051-ad90-f13fb598b7d4",
      "status": "+",
      "title": "Component preview infrastructure",
      "description": "Create a preview system that can render React components in isolation, similar to Storybook. This should include a dedicated preview renderer that can mount individual components with mock props and context providers. Implement a preview window or iframe that can be used to render components separately from the main application for clean screenshot capture.",
      "plan": "",
      "context": [],
      "acceptance": []
    },
    {
      "id": "e89d60a0-78f6-433f-bd29-f9a29ca2b68c",
      "status": "+",
      "title": "Component stub and mock system",
      "description": "Develop a system for providing stubs and mock data for component previews. Create a methodology for components to declare their preview requirements (props, context, dependencies). Build a registry system that can automatically provide sensible defaults and mocks for common component dependencies like services, hooks, and external data.",
      "plan": "",
      "context": [],
      "acceptance": []
    },
    {
      "id": "d347020b-d15b-4298-a719-1fbd2e91c531",
      "status": "+",
      "title": "Preview capability detection",
      "description": "Implement a system that can analyze components and determine if they can be previewed. This should scan component files to detect dependencies, required props, and external requirements. Create metadata that indicates preview compatibility and any special requirements. Provide clear feedback when components cannot be previewed and why.",
      "plan": "",
      "context": [],
      "acceptance": []
    },
    {
      "id": "881d359a-31a2-4658-a2c3-2627153b003d",
      "status": "+",
      "title": "Preview tool for agents",
      "description": "Create the agent-facing tool that allows requesting screenshots of components or the full application. This tool should accept parameters like component path, props override, screenshot dimensions, and preview mode. Integrate this into the existing standardTools.js system so agents can easily call it after making changes to see visual feedback.",
      "plan": "",
      "context": [],
      "acceptance": []
    },
    {
      "id": "ee83f432-e326-4e88-aa53-1e4e6c05e84f",
      "status": "+",
      "title": "Interactive preview capabilities",
      "description": "Implement basic interaction support within component previews, similar to XCode SwiftUI previews. This should allow simple interactions like clicking buttons, typing in inputs, and state changes to be captured in screenshots. Provide a way to capture before/after states of interactions to show component behavior.",
      "plan": "",
      "context": [],
      "acceptance": []
    },
    {
      "id": "34219d8f-10ef-42fe-8b35-9edc6795bf70",
      "status": "+",
      "title": "Write mocks for common ui components",
      "description": "Write the mocks for all components in `src/renderer/components/ui` and give a few examples in the doc on how to use the preview tool.",
      "plan": "",
      "context": [
        "src/renderer/components/ui",
        "/docs/PREVIEW_ANALYZER.md",
        "/docs/PREVIEW_TOOL.md",
        "/docs/COMPONENT_PREVIEWS.md"
      ],
      "acceptance": [],
      "dependencies": []
    }
  ],
  "featureIdToDisplayIndex": {
    "76156835-c76f-410e-93ed-339d9fa69ded": 0,
    "b618b560-d3fc-4051-ad90-f13fb598b7d4": 1,
    "e89d60a0-78f6-433f-bd29-f9a29ca2b68c": 2,
    "d347020b-d15b-4298-a719-1fbd2e91c531": 3,
    "881d359a-31a2-4658-a2c3-2627153b003d": 4,
    "ee83f432-e326-4e88-aa53-1e4e6c05e84f": 5,
    "34219d8f-10ef-42fe-8b35-9edc6795bf70": 6
  }
}