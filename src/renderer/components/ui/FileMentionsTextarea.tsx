import React, { useMemo, useRef } from 'react'\nimport { useFiles } from '../../contexts/FilesContext'\nimport { useFilesAutocomplete } from '../../hooks/useFilesAutocomplete'\nimport { useReferencesAutocomplete } from '../../hooks/useReferencesAutocomplete'\nimport FileDisplay from './FileDisplay'\n\nexport type FileMentionsTextareaProps = {\n  id?: string\n  value: string\n  onChange: (val: string) => void\n  placeholder?: string\n  rows?: number\n  disabled?: boolean\n  className?: string\n  style?: React.CSSProperties\n  ariaLabel?: string\n  onFileMentionSelected?: (path: string) => void\n  onReferenceSelected?: (ref: string) => void\n}\n\nexport default function FileMentionsTextarea({\n  id,\n  value,\n  onChange,\n  placeholder,\n  rows = 3,\n  disabled,\n  className,\n  style,\n  ariaLabel,\n  onFileMentionSelected,\n  onReferenceSelected,\n}: FileMentionsTextareaProps) {\n  const { files } = useFiles()\n  const textareaRef = useRef<HTMLTextAreaElement>(null)\n  const mirrorRef = useRef<HTMLDivElement>(null)\n\n  const filesList = useMemo(() => files.map((f) => f.path), [files])\n\n  const {\n    isOpen: isFilesOpen,\n    matches: fileMatches,\n    position: filesPosition,\n    onSelect: onFileSelectInternal,\n  } = useFilesAutocomplete({\n    filesList,\n    input: value,\n    setInput: onChange,\n    textareaRef,\n    mirrorRef,\n  })\n\n  const {\n    isOpen: isRefsOpen,\n    matches: refMatches,\n    position: refsPosition,\n    onSelect: onRefSelectInternal,\n  } = useReferencesAutocomplete({\n    input: value,\n    setInput: onChange,\n    textareaRef,\n    mirrorRef,\n  })\n\n  const handleFileSelect = (path: string) => {\n    onFileSelectInternal(path)\n    if (onFileMentionSelected) onFileMentionSelected(path)\n  }\n\n  // For references, we now insert/display using the display indices (e.g., 3.2)\n  const handleRefSelect = (refDisplay: string) => {\n    onRefSelectInternal(refDisplay)\n    if (onReferenceSelected) onReferenceSelected(refDisplay)\n  }\n\n  const onKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    const key = e.key\n    const isSpace = key === ' ' || key === 'Spacebar' || key === 'Space'\n    if (isSpace) {\n      if (isFilesOpen && fileMatches.length > 0) {\n        e.preventDefault()\n        e.stopPropagation()\n        handleFileSelect(fileMatches[0])\n        return\n      }\n      if (isRefsOpen && refMatches.length > 0) {\n        e.preventDefault()\n        e.stopPropagation()\n        // Pass display index for insertion\n        handleRefSelect(refMatches[0].display)\n        return\n      }\n    }\n  }\n\n  return (\n    <div className=\"relative\">\n      <div\n        ref={mirrorRef}\n        aria-hidden=\"true\"\n        className=\"absolute top-[-9999px] left-0 overflow-hidden whitespace-pre-wrap break-words pointer-events-none\"\n      />\n      <textarea\n        id={id}\n        ref={textareaRef}\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        onKeyDown={onKeyDown}\n        placeholder={placeholder}\n        rows={rows}\n        disabled={disabled}\n        className={className}\n        style={style}\n        aria-label={ariaLabel}\n      />\n\n      {isFilesOpen && filesPosition && (\n        <div\n          className=\"fixed z-[var(--z-dropdown,1000)] min-w-[260px] max-h-[220px] overflow-auto rounded-md border border-[var(--border-default)] bg-[var(--surface-overlay)] shadow-[var(--shadow-3)] p-1\"\n          style={{ left: `${filesPosition.left}px`, top: `${filesPosition.top}px`, transform: 'translateY(-100%)' }}\n          role=\"listbox\"\n          aria-label=\"Files suggestions\"\n        >\n          {fileMatches.map((path, idx) => (\n            <div\n              key={idx}\n              role=\"option\"\n              className=\"px-3 py-2 cursor-pointer hover:bg-[color-mix(in_srgb,var(--accent-primary)_8%,transparent)] text-[var(--text-primary)] text-sm\"\n              onClick={() => handleFileSelect(path)}\n            >\n              {path}\n            </div>\n          ))}\n        </div>\n      )}\n\n      {isRefsOpen && refsPosition && (\n        <div\n          className=\"fixed z-[var(--z-dropdown,1000)] min-w-[260px] max-h-[220px] overflow-auto rounded-md border border-[var(--border-default)] bg-[var(--surface-overlay)] shadow-[var(--shadow-3)]\"\n          style={{ left: `${refsPosition.left}px`, top: `${refsPosition.top}px`, transform: 'translateY(-100%)' }}\n          role=\"listbox\"\n          aria-label=\"References suggestions\"\n        >\n          {refMatches.map((item, idx) => (\n            <div\n              key={idx}\n              className=\"px-3 py-2 cursor-pointer hover:bg-[color-mix(in_srgb,var(--accent-primary)_8%,transparent)] text-[var(--text-primary)]\"\n              role=\"option\"\n              onClick={() => handleRefSelect(item.display)}\n            >\n              #{item.display} - {item.title} ({item.type})\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n