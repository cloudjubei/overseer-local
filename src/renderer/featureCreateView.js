document.addEventListener('DOMContentLoaded', () => {
  const params = new URLSearchParams(window.location.search);
  const taskId = params.get('taskId');

  if (!taskId) {
    console.error('No taskId provided in URL');
    const form = document.getElementById('feature-form');
    form.innerHTML = '<p>Error: No Task ID provided. This window should be opened from a task details page.</p>';
    return;
  }

  const form = document.getElementById('feature-form');
  const cancelButton = document.getElementById('cancel-button');

  cancelButton.addEventListener('click', () => {
    window.close();
  });

  form.addEventListener('submit', async (event) => {
    event.preventDefault();

    const formData = new FormData(form);
    
    const newFeature = {
      // id will be generated by the main process.
      status: formData.get('status'),
      title: formData.get('title'),
      description: formData.get('description'),
      plan: formData.get('plan'),
      context: formData.get('context').split('\n').filter(s => s.trim() !== ''),
      acceptance: formData.get('acceptance').split('\n').filter(s => s.trim() !== ''),
      dependencies: formData.get('dependencies').split('\n').filter(s => s.trim() !== ''),
    };

    const rejection = formData.get('rejection');
    if (rejection) {
      newFeature.rejection = rejection;
    }

    if (!newFeature.title) {
        alert('Title is required.');
        return;
    }

    try {
      await window.tasksIndex.addFeature(taskId, newFeature);
      window.close();
    } catch (error) {
      console.error('Failed to add feature:', error);
      alert(`Error adding feature: ${error.message}`);
    }
  });
});