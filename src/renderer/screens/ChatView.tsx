import React, { useState, useEffect, useRef, useMemo } from 'react'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/Select'\nimport { useChats } from '../hooks/useChats'\nimport { useFilesAutocomplete } from '../hooks/useFilesAutocomplete'\nimport { useReferencesAutocomplete } from '../hooks/useReferencesAutocomplete'\nimport { useLLMConfig } from '../contexts/LLMConfigContext';\nimport { useNavigator } from '../navigation/Navigator'\nimport CollapsibleSidebar from '../components/ui/CollapsibleSidebar'\nimport FileDisplay from '../components/ui/FileDisplay'\nimport { useFiles, inferFileType } from '../contexts/FilesContext';\nimport { Chat, ChatMessage } from '../services/chatsService'\nimport RichText from '../components/ui/RichText'\n\ninterface EnhancedMessage extends ChatMessage {\n  showModel?: boolean\n  isFirstInGroup?: boolean\n}\n\nexport default function ChatView() {\n  const {\n    currentChatId,\n    setCurrentChatId,\n    chatsById,\n    createChat,\n    deleteChat,\n    sendMessage\n  } = useChats()\n  const { files, filesByPath, uploadFile } = useFiles()\n  const { configs, activeConfigId, activeConfig, isConfigured, setActive } = useLLMConfig()\n  const { navigateView } = useNavigator()\n\n  const [currentChat, setCurrentChat] = useState<Chat | undefined>()\n  const [input, setInput] = useState<string>('')\n  const [pendingAttachments, setPendingAttachments] = useState<string[]>([])\n  const messageListRef = useRef<HTMLDivElement>(null)\n  const textareaRef = useRef<HTMLTextAreaElement>(null)\n  const mirrorRef = useRef<HTMLDivElement>(null)\n  const fileInputRef = useRef<HTMLInputElement>(null)\n  const [messages, setMessages] = useState<ChatMessage[]>([])\n\n  const {\n    isOpen: isAutocompleteOpen,\n    matches: matchingDocs,\n    position: autocompletePosition,\n    onSelect: onAutocompleteSelect,\n  } = useFilesAutocomplete({ filesList: files.map(f => f.path), input, setInput, textareaRef, mirrorRef })\n\n  const {\n    isOpen: isRefsOpen,\n    matches: matchingRefs,\n    position: refsPosition,\n    onSelect: onRefsSelect,\n  } = useReferencesAutocomplete({ input, setInput, textareaRef, mirrorRef })\n\n  useEffect(() => {\n    const el = messageListRef.current\n    if (!el) return\n    el.scrollTo({ top: el.scrollHeight })\n  }, [chatsById])\n\n  useEffect(() => {\n    if (currentChatId){\n      const chat = chatsById[currentChatId]\n      setCurrentChat(chat)\n    }\n  }, [currentChatId, chatsById])\n\n  useEffect(() => {\n    if (currentChat){\n      setMessages(currentChat.messages)\n    }\n  }, [currentChat])\n\n  \n  const chatHistories = useMemo(() => {\n    return Object.values(chatsById).sort((a,b) => new Date(a.updateDate).getTime() - new Date(b.updateDate).getTime())\n  }, [chatsById])\n\n  const autoSizeTextarea = () => {\n    const el = textareaRef.current\n    if (!el) return\n    el.style.height = 'auto'\n    const max = 200\n    const next = Math.min(el.scrollHeight, max)\n    el.style.height = next + 'px'\n  }\n  useEffect(() => {\n    autoSizeTextarea()\n  }, [input])\n\n  const handleSend = async () => {\n    if (!input.trim() || !activeConfig) return\n    await sendMessage(input, activeConfig, pendingAttachments)\n    setInput('')\n    setPendingAttachments([])\n    requestAnimationFrame(() => {\n      if (textareaRef.current) {\n        textareaRef.current.style.height = 'auto'\n        textareaRef.current.focus()\n      }\n    })\n  }\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (!file) return\n\n    const reader = new FileReader()\n    reader.onload = async (event) => {\n      const content = event.target?.result as string\n      const newPath = await uploadFile(file.name, content)\n      if (newPath){\n        setPendingAttachments((prev) => Array.from(new Set([...prev, newPath])))\n      }\n    }\n    reader.readAsText(file)\n    // e.currentTarget.value = ''\n  }\n\n  const handleTextareaKeyDown: React.KeyboardEventHandler<HTMLTextAreaElement> = (e) => {\n    if ((e.metaKey || e.ctrlKey) && e.key === 'Enter') {\n      e.preventDefault()\n      handleSend()\n    }\n  }\n\n  const enhancedMessages: EnhancedMessage[] = useMemo(() => {\n    return messages.map((msg, index) => {\n      let showModel = false\n      if (msg.role === 'assistant' && msg.model) {\n        const prevAssistant = [...messages.slice(0, index)].reverse().find((m) => m.role === 'assistant')\n        showModel = !prevAssistant || prevAssistant.model !== msg.model\n      }\n      const prev = messages[index - 1]\n      const isFirstInGroup = !prev || prev.role !== msg.role || msg.role === 'system'\n      return { ...msg, showModel, isFirstInGroup }\n    })\n  }, [messages])\n\n  const canSend = Boolean(input.trim() && activeConfig && isConfigured)\n\n  const chatItems = useMemo(() => chatHistories.map((chat) => ({\n    id: chat.id,\n    label: `Chat ${new Date(chat.creationDate)}`,\n    icon: <span aria-hidden>ðŸ’¬</span>,\n    accent: 'gray',\n    action: (\n      <button\n        onClick={(e) => {\n          e.stopPropagation()\n          deleteChat(chat.id)\n        }}\n      >\n        Delete\n      </button>\n    ),\n  })), [chatHistories, deleteChat])\n\n  return (\n    <CollapsibleSidebar\n      items={chatItems}\n      activeId={currentChatId || ''}\n      onSelect={setCurrentChatId}\n      storageKey=\"chat-sidebar-collapsed\"\n      headerTitle=\"History\"\n      headerSubtitle=\"\"\n      headerAction={<button className=\"btn\" onClick={createChat} aria-label=\"Create new chat\">New</button>}\n      emptyMessage=\"No chats yet\"\n    >\n      <section className=\"flex-1 flex flex-col w-full h-full bg-[var(--surface-base)] overflow-hidden\">\n        <div\n          ref={mirrorRef}\n          aria-hidden=\"true\"\n          className=\"absolute top-[-9999px] left-0 overflow-hidden whitespace-pre-wrap break-words pointer-events-none\"\n        />\n\n        <header className=\"flex-shrink-0 px-4 py-2 border-b border-[var(--border-subtle)] bg-[var(--surface-raised)] flex items-center justify-between gap-3\">\n          <div className=\"flex items-center gap-3 min-w-0\">\n            <h1 className=\"m-0 text-[var(--text-primary)] text-[18px] leading-tight font-semibold truncate\">\n              Project Chat {currentChat ? `(${new Date(currentChat.updateDate).toLocaleString()})` : ''}\n            </h1>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Select value={activeConfigId || ''} onValueChange={setActive}>\n              <SelectTrigger className=\"ui-select w-[220px]\">\n                <SelectValue placeholder=\"Select Model\" />\n              </SelectTrigger>\n              <SelectContent>\n                {configs.map((cfg) => (\n                  <SelectItem key={cfg.id} value={cfg.id!}>\n                    {cfg.name} ({cfg.model})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <button\n              onClick={() => navigateView('Settings')}\n              className=\"btn-secondary\"\n              aria-label=\"Open Settings\"\n            >\n              Settings\n            </button>\n          </div>\n        </header>\n\n        {!isConfigured && (\n          <div\n            className=\"flex-shrink-0 mx-4 mt-3 rounded-md border border-[var(--border-default)] p-2 text-[13px] flex items-center justify-between gap-2\"\n            style={{\n              background: 'color-mix(in srgb, var(--accent-primary) 10%, var(--surface-raised))',\n              color: 'var(--text-primary)',\n            }}\n            role=\"status\"\n          >\n            <span>LLM not configured. Set your API key in Settings to enable sending messages.</span>\n            <button className=\"btn\" onClick={() => navigateView('Settings')}>Configure</button>\n          </div>\n        )}\n\n        <div ref={messageListRef} className=\"flex-1 min-h-0 overflow-auto p-4\">\n          {enhancedMessages.length === 0 ? (\n            <div className=\"mt-10 mx-auto max-w-[720px] text-center text-[var(--text-secondary)]\">\n              <div className=\"text-[18px] font-medium\">Start chatting about the project</div>\n              <div className=\"text-[13px] mt-2\">Tip: Use Cmd/Ctrl+Enter to send â€¢ Shift+Enter for newline</div>\n              <div className=\"mt-4 inline-block rounded-lg border border-[var(--border-default)] bg-[var(--surface-raised)] px-4 py-3 text-[13px]\">\n                Attach markdown or text files to give context. Mention files with @, and reference tasks/features with #.\n              </div>\n            </div>\n          ) : (\n            <div className=\"mx-auto max-w-[960px] space-y-3\">\n              {enhancedMessages.map((msg, index) => {\n                const isUser = msg.role === 'user'\n                const isSystem = msg.role === 'system'\n\n                if (isSystem) {\n                  return (\n                    <div key={index} className=\"flex justify-center\">\n                      <div className=\"text-[12px] text-[var(--text-muted)] italic bg-[var(--surface-raised)] border border-[var(--border-subtle)] rounded-full px-3 py-1\">\n                        <RichText text={msg.content} />\n                      </div>\n                    </div>\n                  )\n                }\n\n                return (\n                  <div\n                    key={index}\n                    className={[\n                      'flex items-start gap-2',\n                      isUser ? 'flex-row-reverse' : 'flex-row',\n                    ].join(' ')}\n                  >\n                    <div\n                      className={[\n                        'shrink-0 w-7 h-7 rounded-full flex items-center justify-center text-[11px] font-semibold',\n                        isUser\n                          ? 'bg-[var(--accent-primary)] text-[var(--text-inverted)]'\n                          : 'bg-[color-mix(in_srgb,var(--accent-primary)_14%,transparent)] text-[var(--text-primary)] border border-[var(--border-subtle)]',\n                      ].join(' ')}\n                      aria-hidden=\"true\"\n                    >\n                      {isUser ? 'You' : 'AI'}\n                    </div>\n\n                    <div className={['max-w-[72%] min-w-[80px] flex flex-col', isUser ? 'items-end' : 'items-start'].join(' ')}>\n                      {!isUser && msg.showModel && msg.model && (\n                        <div className=\"text-[11px] text-[var(--text-secondary)] mb-1 inline-flex items-center gap-1 border border-[var(--border-subtle)] bg-[var(--surface-overlay)] rounded-full px-2 py-[2px]\">\n                          <span className=\"inline-block w-1.5 h-1.5 rounded-full bg-[var(--accent-primary)]\" />\n                          {msg.model}\n                        </div>\n                      )}\n\n                      <div\n                        className={[\n                          'px-3 py-2 rounded-2xl whitespace-pre-wrap break-words shadow',\n                          isUser\n                            ? 'bg-[var(--accent-primary)] text-[var(--text-inverted)] rounded-br-md'\n                            : 'bg-[var(--surface-raised)] text-[var(--text-primary)] border border-[var(--border-subtle)] rounded-bl-md',\n                          msg.isFirstInGroup ? '' : isUser ? 'rounded-tr-md' : 'rounded-tl-md',\n                        ].join(' ')}\n                      >\n                        <RichText text={msg.content} />\n                      </div>\n\n                      {msg.attachments && msg.attachments.length > 0 && (\n                        <div className={[\n                          'mt-1 flex flex-wrap gap-1',\n                          isUser ? 'justify-end' : 'justify-start'\n                        ].join(' ')}>\n                          {msg.attachments.map((path, i) => {\n                            const meta = filesByPath[path]\n                            const name = meta?.name || (path.split('/').pop() || path)\n                            const type = meta?.type || inferFileType(path)\n                            const size = meta?.size ?? undefined\n                            const mtime = meta?.mtime ?? undefined\n                            return (\n                              <FileDisplay\n                                key={`${index}-att-${i}-${path}`}\n                                file={{ name, path, type, size, mtime }}\n                                density=\"compact\"\n                                interactive\n                                showPreviewOnHover\n                              />\n                            )\n                          })}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex-shrink-0 border-t border-[var(--border-subtle)] bg-[var(--surface-raised)]\">\n          <div className=\"p-3\">\n            <div className=\"relative flex items-end gap-2\">\n              <div className=\"flex-1 bg-[var(--surface-base)] border border-[var(--border-default)] rounded-md focus-within:ring-2 focus-within:ring-[var(--focus-ring)]\">\n                <textarea\n                  ref={textareaRef}\n                  value={input}\n                  onChange={(e) => setInput(e.target.value)}\n                  onInput={autoSizeTextarea}\n                  onKeyDown={handleTextareaKeyDown}\n                  className=\"w-full resize-none bg-transparent px-3 py-2 text-[var(--text-primary)] outline-none\"\n                  placeholder={isConfigured ? 'Type your messageâ€¦' : 'You can compose a message and reference files (@) and tasks/features (#) even before configuring. Configure LLM to send.'}\n                  rows={1}\n                  aria-label=\"Message input\"\n                  style={{ maxHeight: 200, overflowY: 'auto' }}\n                />\n                <div className=\"px-3 py-1 border-t border-[var(--border-subtle)]\">\n                  {pendingAttachments.length > 0 && (\n                    <div className=\"mb-1 flex flex-wrap gap-1\">\n                      {pendingAttachments.map((path, idx) => {\n                        const meta = filesByPath[path]\n                        const name = meta?.name || (path.split('/').pop() || path)\n                        const type = meta?.type || inferFileType(path)\n                        const size = meta?.size ?? undefined\n                        const mtime = meta?.mtime ?? undefined\n                        return (\n                          <div key={`${idx}-${path}`} className=\"inline-flex items-center gap-1\">\n                            <FileDisplay\n                              file={{ name, path, type, size, mtime }}\n                              density=\"compact\"\n                              interactive\n                              showPreviewOnHover\n                            />\n                            <button\n                              type=\"button\"\n                              className=\"btn-secondary\"\n                              aria-label={`Remove ${name}`}\n                              onClick={() => setPendingAttachments((prev) => prev.filter((p) => p !== path))}\n                            >\n                              âœ•\n                            </button>\n                          </div>\n                        )}\n                      )}\n                    </div>\n                  )}\n                  <div className=\"flex items-center justify-between text-[12px] text-[var(--text-muted)]\">\n                    <div className=\"flex items-center gap-2\">\n                      <button\n                        onClick={() => fileInputRef.current?.click()}\n                        className=\"btn-secondary\"\n                        aria-label=\"Attach a document\"\n                        type=\"button\"\n                      >\n                        Attach\n                      </button>\n                      <input\n                        type=\"file\"\n                        accept=\".md,.txt,.json,.js,.jsx,.ts,.tsx,.css,.scss,.less,.html,.htm,.xml,.yml,.yaml,.csv,.log,.sh,.bash,.zsh,.bat,.ps1,.py,.rb,.java,.kt,.go,.rs,.c,.h,.cpp,.hpp,.m,.swift,.ini,.conf,.env\"\n                        ref={fileInputRef}\n                        style={{ display: 'none' }}\n                        onChange={handleFileUpload}\n                      />\n                      <span className=\"hidden sm:inline\">Tip: Use @ for files â€¢ Use # for tasks and features</span>\n                    </div>\n                    <span>Cmd/Ctrl+Enter to send â€¢ Shift+Enter for newline</span>\n                  </div>\n                </div>\n              </div>\n\n              <button onClick={handleSend} className=\"btn\" disabled={!canSend} aria-label=\"Send message\">\n                Send\n              </button>\n\n              {isAutocompleteOpen && autocompletePosition && (\n                <div\n                  className=\"fixed z-[var(--z-dropdown,1000)] min-w-[260px] max-h-[220px] overflow-auto rounded-md border border-[var(--border-default)] bg-[var(--surface-overlay)] shadow-[var(--shadow-3)] p-1\"\n                  style={{ left: `${autocompletePosition.left}px`, top: `${autocompletePosition.top}px`, transform: 'translateY(-100%)' }}\n                  role=\"listbox\"\n                  aria-label=\"Files suggestions\"\n                >\n                  {matchingDocs.map((path, idx) => {\n                    const meta = filesByPath[path]\n                    const name = meta?.name || (path.split('/').pop() || path)\n                    const type = meta?.type || inferFileType(path)\n                    const size = meta?.size ?? undefined\n                    const mtime = meta?.mtime ?? undefined\n                    return (\n                      <div key={idx} role=\"option\" className=\"px-1 py-0.5\">\n                        <FileDisplay\n                          file={{ name, path, type, size, mtime }}\n                          density=\"compact\"\n                          interactive\n                          showPreviewOnHover\n                          onClick={() => onAutocompleteSelect(path)}\n                        />\n                      </div>\n                    )\n                  })}\n                </div>\n              )}\n\n              {isRefsOpen && refsPosition && (\n                <div\n                  className=\"fixed z-[var(--z-dropdown,1000)] min-w-[260px] max-h-[220px] overflow-auto rounded-md border border-[var(--border-default)] bg-[var(--surface-overlay)] shadow-[var(--shadow-3)]\"\n                  style={{ left: `${refsPosition.left}px`, top: `${refsPosition.top}px`, transform: 'translateY(-100%)' }}\n                  role=\"listbox\"\n                  aria-label=\"References suggestions\"\n                >\n                  {matchingRefs.map((item, idx) => (\n                    <div\n                      key={idx}\n                      className=\"px-3 py-2 cursor-pointer hover:bg-[color-mix(in_srgb,var(--accent-primary)_8%,transparent)] text-[var(--text-primary)]\"\n                      role=\"option\"\n                      onClick={() => onRefsSelect(item.ref)}\n                    >\n                      #{item.display} - {item.title} ({item.type})\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n    </CollapsibleSidebar>\n  )\n}\n