{
  "id": "9ecfbdc9-9ddb-4e57-97c0-b1dd9fca43ea",
  "status": "-",
  "title": "New screen - Tests",
  "description": "factory-tools exposes tooling for running tests and test coverage based on paths.\nWe need a new screen \"Tests\" that will be accessible from the Sidebar (under \"Agents\"). It requires a new icon to be created.\nThe new screen needs to have 2 sections (selectable via tabs):\n1) test results - especially if there are any failures, we want to show the test lines and the code that is responsible for the failure\n2) test coverage - show the latest test coverage in a clear format so the user can read and analyse the data well.\n\nWhile the tests/coverage is running - make sure the user is shown appropriate loaders so the screen doesn't seem stuck.",
  "features": [
    {
      "id": "e92d8ada-b10d-4a75-bbbb-e8ba9907c7d1",
      "status": "+",
      "title": "Create 'Tests' Screen and Add Sidebar Navigation",
      "description": "Create a new screen component for 'Tests'. Add a new navigation entry in the sidebar, including a new icon, to route to this screen. The initial screen should have a basic layout with a title.",
      "context": [],
      "createdAt": "2025-09-22T23:51:23.418Z",
      "updatedAt": "2025-09-23T00:15:26.345Z",
      "completedAt": "2025-09-23T00:15:26.345Z"
    },
    {
      "id": "d05e25fe-33f1-466a-9237-5abbe3ea43ee",
      "status": "+",
      "title": "Implement Tabbed View for Test Results and Coverage",
      "description": "On the 'Tests' screen, implement a tabbed interface with two tabs: 'Test Results' and 'Test Coverage'. The content for each tab will be implemented in subsequent features.",
      "context": [],
      "createdAt": "2025-09-22T23:51:23.420Z",
      "updatedAt": "2025-09-23T00:16:29.818Z",
      "completedAt": "2025-09-23T00:16:29.818Z"
    },
    {
      "id": "72ab35c0-0d17-4aef-adec-88225d64680d",
      "status": "+",
      "title": "Integrate Test Runner and Display Loading State",
      "description": "Integrate the `factory-tools` test runner. Add a 'Run Tests' button to the 'Test Results' tab. When clicked, trigger the test run and display a loading indicator while the tests are in progress. The raw results should be stored in the component's state.",
      "context": [],
      "createdAt": "2025-09-22T23:51:23.421Z",
      "updatedAt": "2025-09-23T00:21:57.247Z",
      "completedAt": "2025-09-23T00:21:57.247Z"
    },
    {
      "id": "7b0d3b50-e90d-4273-a1f1-0927f0f893ff",
      "status": "+",
      "title": "Display Test Results",
      "description": "Parse the test results from the `factory-tools` runner and display them in the 'Test Results' tab. Special attention should be given to formatting failures, showing the failed test, the error message, and a relevant code snippet.",
      "context": [],
      "createdAt": "2025-09-22T23:51:23.422Z",
      "updatedAt": "2025-09-23T00:26:03.680Z",
      "completedAt": "2025-09-23T00:26:03.680Z"
    },
    {
      "id": "a18529eb-24c1-4857-af45-d464ee37de06",
      "status": "+",
      "title": "Integrate Coverage Runner and Display Loading State",
      "description": "Add a 'Run Coverage' button to the 'Test Coverage' tab. When clicked, trigger the coverage run via `factory-tools` and display a loading indicator until the process is complete. The raw coverage data should be stored in the component's state.",
      "context": [],
      "createdAt": "2025-09-22T23:51:23.423Z",
      "updatedAt": "2025-09-23T00:30:48.632Z",
      "completedAt": "2025-09-23T00:30:48.632Z"
    },
    {
      "id": "f0866210-92d5-410e-9d81-c2059e24ee26",
      "status": "+",
      "title": "Display Coverage Report",
      "description": "Parse the coverage data from the `factory-tools` runner and display it in a clear, user-friendly format within the 'Test Coverage' tab. The report should be easy to read and analyze.",
      "context": [],
      "createdAt": "2025-09-22T23:51:23.424Z",
      "updatedAt": "2025-09-23T00:34:29.364Z",
      "completedAt": "2025-09-23T00:34:29.364Z"
    },
    {
      "id": "c28d53e1-1da4-439b-9a55-c2f74b119106",
      "status": "+",
      "title": "FactoryTools updated",
      "description": "@src/factory/FactoryTestsManager.ts  needs to update as 'thefactory-tools' schemas for tests have been updated - they now expose `TestResult` and `CoverageResult`.\nThe changes need to propagate to @src/renderer/screens/TestsView.tsx , via @src/renderer/services/factoryTestsService.ts , so that all the tests and test coverage displays correctly.\nDo not create any new schemas/types - always use the ones provided by 'thefactory-tools'",
      "context": [
        "src/factory/FactoryTestsManager.ts",
        "src/renderer/screens/TestsView.tsx",
        "src/renderer/services/factoryTestsService.ts"
      ],
      "createdAt": "2025-09-23T09:06:35.698Z",
      "updatedAt": "2025-09-23T11:09:50.791Z",
      "blockers": [],
      "completedAt": "2025-09-23T11:09:50.791Z"
    },
    {
      "id": "e67dc4d1-2b22-46bf-9e9e-98c2712af48a",
      "status": "+",
      "title": "TestsView shouldn't require the path to run all the tests",
      "description": "when passing in \".\" as the path - all tests will be ran.\nSame goes for the test coverage.\nThe user shouldn't be given the option to type in the test to run - this should be handled via nice UI.",
      "context": [],
      "createdAt": "2025-09-23T11:55:29.754Z",
      "updatedAt": "2025-09-23T13:37:57.105Z",
      "blockers": [],
      "completedAt": "2025-09-23T13:37:57.105Z"
    },
    {
      "id": "c13680c0-c41b-4119-81e8-957cabc388fa",
      "status": "-",
      "title": "TestCoverage shows untested files",
      "description": "For all badly tested or untested files there needs to be a button that will open up the Create New Feature form for the given project and for a predefined task id that needs to be created if it doesn't exist (that is titled 'TESTING' with the description 'Ongoing Testing improvements'). The feature form must be filled in with some standard Title and description, so the user should ideally just need to hit the \"Create Feature button\". The file to be tested must be correctly referenced in the description - i.e. \"@src/path/file.ts\" and it needs to be added into the context.\nThe Description field should be focused and the caret at the end so the user can add extra info if needed.",
      "context": [],
      "createdAt": "2025-09-23T12:05:34.305Z",
      "updatedAt": "2025-09-23T12:05:34.305Z"
    },
    {
      "id": "fb2c5983-344a-4467-91a5-d6c799a98325",
      "status": "+",
      "title": "Store information about tests ran and show it straight away when opening the view",
      "description": "When @src/renderer/screens/TestsView.tsx opens, the user should be shown all tests (available to be pulled from 'thefactory-tools' via @src/factory/FactoryTestsManager.ts ) . If some of the files have changed since when the result for that test was recorded - it is invalidated and shown.\nThe same idea should be done for test coverage.",
      "context": [
        "src/renderer/screens/TestsView.tsx",
        "src/factory/FactoryTestsManager.ts"
      ],
      "createdAt": "2025-09-23T12:08:06.445Z",
      "updatedAt": "2025-09-23T13:25:24.491Z",
      "completedAt": "2025-09-23T13:25:24.491Z"
    },
    {
      "id": "bfdba512-14ae-4bae-b2dc-ff5c4b34c58e",
      "status": "+",
      "title": "TheFactoryTools was updated with new subscribe and list tests functionality",
      "description": "Update @src/factory/FactoryTestsManager.ts , @src/renderer/services/factoryTestsService.ts , @src/preload.js , @src/ipcHandlersKeys.js to include this new API.\nFollow the same exact pattern that @src/stories/StoriesManager.ts does with subscribe and list.",
      "context": [
        "src/renderer/services/factoryTestsService.ts",
        "src/factory/FactoryTestsManager.ts",
        "src/preload.js",
        "src/ipcHandlersKeys.js",
        "src/stories/StoriesManager.ts"
      ],
      "createdAt": "2025-09-23T12:30:47.377Z",
      "updatedAt": "2025-09-23T13:29:52.250Z",
      "completedAt": "2025-09-23T13:29:52.250Z"
    },
    {
      "id": "6f87dd12-0f6a-43c9-9cae-3cc0a5a338f9",
      "status": "+",
      "title": "Abstract away all tests in a TestsContext",
      "description": "Just like there is @src/renderer/contexts/StoriesContext.tsx , we should have an equivalent for tests to make it easy to use them.\n@src/renderer/screens/TestsView.tsx needs to use it instead of directly using @src/renderer/services/factoryTestsService.ts",
      "context": [
        "src/renderer/contexts/StoriesContext.tsx",
        "src/renderer/screens/TestsView.tsx",
        "src/renderer/services/factoryTestsService.ts"
      ],
      "createdAt": "2025-09-23T12:32:19.602Z",
      "updatedAt": "2025-09-23T13:09:30.654Z",
      "completedAt": "2025-09-23T13:09:30.654Z"
    }
  ],
  "featureIdToDisplayIndex": {
    "e92d8ada-b10d-4a75-bbbb-e8ba9907c7d1": 1,
    "d05e25fe-33f1-466a-9237-5abbe3ea43ee": 2,
    "72ab35c0-0d17-4aef-adec-88225d64680d": 3,
    "7b0d3b50-e90d-4273-a1f1-0927f0f893ff": 4,
    "a18529eb-24c1-4857-af45-d464ee37de06": 5,
    "f0866210-92d5-410e-9d81-c2059e24ee26": 6,
    "c28d53e1-1da4-439b-9a55-c2f74b119106": 7,
    "6f87dd12-0f6a-43c9-9cae-3cc0a5a338f9": 8,
    "fb2c5983-344a-4467-91a5-d6c799a98325": 9,
    "bfdba512-14ae-4bae-b2dc-ff5c4b34c58e": 10,
    "e67dc4d1-2b22-46bf-9e9e-98c2712af48a": 11,
    "c13680c0-c41b-4119-81e8-957cabc388fa": 12
  },
  "createdAt": "2025-09-22T23:34:09.482Z",
  "updatedAt": "2025-09-22T23:34:09.482Z"
}