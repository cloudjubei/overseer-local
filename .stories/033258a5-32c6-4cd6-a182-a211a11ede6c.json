{
  "id": "033258a5-32c6-4cd6-a182-a211a11ede6c",
  "status": "~",
  "title": "Better Chats with AI everywhere",
  "description": "We want the user to be able to have a conversation with an LLM about a given context in many places in the app. First, where do we want the user's to have chats available:\n- when editing or creating a story, there needs to be a chat button (at the top next to the close button) that will open the chat interface (in a sidebar to the right of the popup) \n- similarly, when editing or creating a feature\n- inside StoryDetailsView there needs to be a chat button (at the top next to the run agent button) that will open a sidebar (on the right) that will allow the user to talk about the given Story and its features.\n- inside StoriesListView there needs to be a chat button (at the top next to the run agent button) that will open a chat about the current project and its stories and features.\n- following StoryDetailsView and StoriesListView and opening the chat interface in a sidebar to the right, we need a chat button on other screens that will do a similar thing, we need it in Tests and Agents.\n\nSecond, each chat is tied to a particular context and must be stored so that whenever the user comes back to the screen where that chat should be shown - the messages history must be resumed. Thus, the contexts are a specific Feature, a specific Story, a specific ProjectSpec, a ProjectSpec's tests and ProjectSpec's Agents. Essentially all these contexts must store appropriate chats somewhere under `.factory/chats` so that they can be easily retrieved via ids. We need `.factory/chats/projectId.json` to be the chat for a specific project, `.factory/chats/projectId/storyId.json` to be the chat for a specific story, `.factory/chats/projectId/storyId/featureId.json` to be the chat for a specific feature, `.factory/chats/projectId/tests.json` to be the chat for a project's tests, `.factory/chats/projectId/agents.json` to be the chat for a project's agents.\nEach one of these chats for the different contexts needs to have a different prompt that will come loaded with different information relevant to the context.\n\nThis chat interface should be unified and feel familiar across the different projects, the user simply should have an indicator of what context they are in. In this interface the user must be able to choose some settings for that particular context (stored as an app wide setting) - allowing the agent to use certain tools and others not. Choosing the model (similar to how ChatView already does it). Allowing the agent to auto call tools or require user confirmation.\nThis UI needs to be used anywhere where chats are used (so ChatView needs to benefit from these improvements too).",
  "features": [
    {
      "id": "e2d1d322-7e72-49ad-9f8f-f7d6f4437c5b",
      "status": "~",
      "title": "Create a Chat Storage Service for Context-Specific Conversations",
      "description": "Implement a service in the main process to manage reading and writing chat history. The service will handle JSON files stored in the `.factory/chats/` directory, with subdirectories for projects and stories. It needs to resolve paths based on context identifiers (projectId, storyId, featureId, 'tests', 'agents'). Expose this service to the renderer process via IPC channels and the preload script.",
      "context": [],
      "createdAt": "2025-09-24T17:18:35.800Z",
      "updatedAt": "2025-09-24T21:59:48.852Z"
    },
    {
      "id": "8515f4d8-c436-4780-a5cc-7c3106e1efd3",
      "status": "+",
      "title": "Develop a Reusable Chat Sidebar React Component",
      "description": "Create a new React component, `ChatSidebar`, responsible for rendering a chat interface. This component will display a list of messages, a user input field with a send button, and the current chat context (e.g., \"Chatting about Story: 'User Login'\"). It should be a presentational component that receives its state and callbacks via props.\nThere already is an interface in @src/renderer/screens/ChatView.tsx that should be extracted/consolidated into this reusable one to be used by this Story.",
      "context": [
        "src/renderer/screens/ChatView.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.801Z",
      "updatedAt": "2025-09-24T22:02:01.013Z",
      "blockers": [],
      "completedAt": "2025-09-24T22:02:01.013Z"
    },
    {
      "id": "856ac3c4-91d3-48f4-9a9f-f38260a3f9a7",
      "status": "+",
      "title": "Add Chat Settings Controls to the Chat Sidebar",
      "description": "Enhance the `ChatSidebar` component to include UI controls for chat settings. This includes a model selector dropdown, a mechanism for enabling/disabling tools, and a toggle for the agent's tool auto-approval. These settings will be passed in as props and will trigger callbacks when changed.",
      "context": [],
      "createdAt": "2025-09-24T17:18:35.803Z",
      "updatedAt": "2025-09-24T22:04:37.142Z",
      "completedAt": "2025-09-24T22:04:37.142Z"
    },
    {
      "id": "bfe7399a-4e44-4455-b2f9-dd4ec412dde3",
      "status": "?",
      "title": "Add a Chat Button and Sidebar to StoryDetailsView",
      "description": "Integrate the `ChatSidebar` into the @src/renderer/stories/StoryDetailsView.tsx . Add a \"Chat\" button to the view's header. Clicking this button will toggle the visibility of the `ChatSidebar`. Wire up the sidebar to the Chat Storage Service to load and save the chat history for the currently viewed story, using the `projectId` and `storyId` as context.",
      "context": [
        "src/renderer/stories/StoryDetailsView.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.805Z",
      "updatedAt": "2025-09-24T22:05:49.409Z",
      "blockers": [],
      "rejection": "Blocked: Agent loop failed: {\"message\":\"Received no agentResponse. Original message: {\\\"role\\\":\\\"assistant\\\",\\\"content\\\":\\\"{\\\\\\\"thoughts\\\\\\\":\\\\\\\"I will now modify `src/renderer/stories/StoryDetailsView.tsx` to include the chat functionality.\\\\\\\\n\\\\\\\\nHere's what I'll do:\\\\\\\\n1.  **Add `isChatOpen` state**: I'll add `const [isChatOpen, setIsChatOpen] = useState(false);` to manage the sidebar's visibility.\\\\\\\\n2.  **Add a \\\\\\\\\\\\\\\"Chat\\\\\\\\\\\\\\\" button**: I'll add a new `Button` in the header section (`<div class=\\\\\\\\\\\\\\\"flex items-center gap-3\\\\\\\\\\\\\\\">`). When clicked, it will toggle the `isChatOpen` state. I'll also add a chat icon.\\\\\\\\n3.  **Conditionally render the sidebar**: I'll add a placeholder for the `ChatSidebar` that will be rendered when `isChatOpen` is true. For now, it will be a simple `div`. I also need to make the main container a flex row to accommodate the sidebar.\\\\\\\\n4.  **Import `IconChat`**: I'll need to import a chat icon for the button from `src/renderer/components/ui/Icons.tsx`.\\\\\\\\n\\\\\\\\nLet's start by modifying `StoryDetailsView.tsx`.\\\\\\\",\\\\\\\"tool_calls\\\\\\\":[{\\\\\\\"tool_name\\\\\\\":\\\\\\\"write_file\\\\\\\",\\\\\\\"arguments\\\\\\\":{\\\\\\\"filename\\\\\\\":\\\\\\\"src/renderer/stories/StoryDetailsView.tsx\\\\\\\",\\\\\\\"content\\\\\\\":\\\\\\\"import { useEffect, useMemo, useRef, useState } from 'react'\\\\\\\\nimport { useNavigator } from '../navigation/Navigator'\\\\\\\\nimport DependencyBullet from '../components/stories/DependencyBullet'\\\\\\\\nimport StatusControl from '../components/stories/StatusControl'\\\\\\\\nimport { useActiveProject } from '../contexts/ProjectContext'\\\\\\\\nimport { useAgents } from '../contexts/AgentsContext'\\\\\\\\nimport AgentRunBullet from '../components/agents/AgentRunBullet'\\\\\\\\nimport { Feature, Status, Story } from 'thefactory-tools'\\\\\\\\nimport { IconBack, IconChat, IconChevron, IconEdit, IconPlus } from '../components/ui/Icons'\\\\\\\\nimport ExclamationChip from '../components/stories/ExclamationChip'\\\\\\\\nimport RunAgentButton from '../components/stories/RunAgentButton'\\\\\\\\nimport { RichText } from '../components/ui/RichText'\\\\\\\\nimport ModelChip from '../components/agents/ModelChip'\\\\\\\\nimport { StatusPicker, statusKey, STATUS_LABELS } from '../components/stories/StatusControl'\\\\\\\\nimport { gitMonitorService } from '../services/gitMonitorService'\\\\\\\\nimport { Button } from '../components/ui/Button'\\\\\\\\nimport { useStories } from '../contexts/StoriesContext'\\\\\\\\n\\\\\\\\nconst STATUS_ORDER: Status[] = ['-', '~', '+', '=', '?']\\\\\\\\n\\\\\\\\ntype FeatureSort = 'index_asc' | 'index_desc' | 'status_asc' | 'status_desc'\\\\\\\\n\\\\\\\\nfunction featureMatchesQuery(f: Feature, q: string) {\\\\\\\\n  if (!q) return true\\\\\\\\n  const s = q.trim().toLowerCase()\\\\\\\\n  if (!s) return true\\\\\\\\n  const idStr = String(f.id || '')\\\\\\\\n  return (\\\\\\\\n    idStr.includes(s) ||\\\\\\\\n    (f.title || '').toLowerCase().includes(s) ||\\\\\\\\n    (f.description || '').toLowerCase().includes(s)\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default function StoryDetailsView({ storyId }: { storyId: string }) {\\\\\\\\n  const [story, setStory] = useState<Story | null>(null)\\\\\\\\n  const [saving, setSaving] = useState(false)\\\\\\\\n  const { openModal, navigateView, storiesRoute, navigateAgentRun } = useNavigator()\\\\\\\\n  const ulRef = useRef<HTMLUListElement>(null)\\\\\\\\n  const [isOverviewExpanded, setIsOverviewExpanded] = useState(true)\\\\\\\\n  const [isChatOpen, setIsChatOpen] = useState(false)\\\\\\\\n\\\\\\\\n  const [dragFeatureId, setDragFeatureId] = useState<string | null>(null)\\\\\\\\n  const [dragging, setDragging] = useState(false)\\\\\\\\n  const [draggingIndex, setDraggingIndex] = useState<number | null>(null)\\\\\\\\n  const [dropIndex, setDropIndex] = useState<number | null>(null)\\\\\\\\n  const [dropPosition, setDropPosition] = useState<'before' | 'after' | null>(null)\\\\\\\\n  const { project, projectId } = useActiveProject()\\\\\\\\n  const {\\\\\\\\n    storiesById,\\\\\\\\n    updateStory,\\\\\\\\n    updateFeature,\\\\\\\\n    reorderFeatures,\\\\\\\\n    getBlockers,\\\\\\\\n    getBlockersOutbound,\\\\\\\\n  } = useStories()\\\\\\\\n  const { runsActive, startAgent } = useAgents()\\\\\\\\n\\\\\\\\n  // Tracks if the initial pointer down started within a .no-drag element to block parent row dragging\\\\\\\\n  const preventDragFromNoDragRef = useRef(false)\\\\\\\\n\\\\\\\\n  // Local search/sort/filter state (not persisted)\\\\\\\\n  const [query, setQuery] = useState('')\\\\\\\\n  const [statusFilter, setStatusFilter] = useState<'all' | 'not-done' | Status>('not-done')\\\\\\\\n  const [sortBy, setSortBy] = useState<FeatureSort>('index_asc')\\\\\\\\n  const [openFilter, setOpenFilter] = useState(false)\\\\\\\\n  const statusFilterRef = useRef<HTMLDivElement>(null)\\\\\\\\n\\\\\\\\n  // Git merge UI state\\\\\\\\n  const [gitBaseBranch, setGitBaseBranch] = useState<string | null>(null)\\\\\\\\n  const [hasUnmerged, setHasUnmerged] = useState<boolean>(false)\\\\\\\\n  const [checkingMerge, setCheckingMerge] = useState<boolean>(false)\\\\\\\\n  const [merging, setMerging] = useState<boolean>(false)\\\\\\\\n  const [mergeError, setMergeError] = useState<string | null>(null)\\\\\\\\n\\\\\\\\n  useEffect(() => {\\\\\\\\n    if (storyId && storiesById) {\\\\\\\\n      const t = storiesById[storyId]\\\\\\\\n      setStory(t)\\\\\\\\n    } else {\\\\\\\\n      setStory(null)\\\\\\\\n    }\\\\\\\\n  }, [storyId, storiesById])\\\\\\\\n\\\\\\\\n  //TODO: logic needs to be cleand up\\\\\\\\n  // useEffect(() => {\\\\\\\\n  //   let disposed = false\\\\\\\\n\\\\\\\\n  //   async function check() {\\\\\\\\n  //     if (!story) {\\\\\\\\n  //       setHasUnmerged(false)\\\\\\\\n  //       return\\\\\\\\n  //     }\\\\\\\\n  //     setCheckingMerge(true)\\\\\\\\n  //     try {\\\\\\\\n  //       const status = await gitMonitorService.getStatus()\\\\\\\\n  //       const base = status.currentBranch || null\\\\\\\\n  //       setGitBaseBranch(base)\\\\\\\\n  //       const branchName = `features/${story.id}`\\\\\\\\n  //       if (!base) {\\\\\\\\n  //         setHasUnmerged(false)\\\\\\\\n  //         return\\\\\\\\n  //       }\\\\\\\\n  //       const res = await gitMonitorService.hasUnmerged(branchName, base)\\\\\\\\n  //       if (!disposed) {\\\\\\\\n  //         setHasUnmerged(!!res.ok && !!res.hasUnmerged)\\\\\\\\n  //       }\\\\\\\\n  //     } catch (e) {\\\\\\\\n  //       if (!disposed) setHasUnmerged(false)\\\\\\\\n  //     } finally {\\\\\\\\n  //       if (!disposed) setCheckingMerge(false)\\\\\\\\n  //     }\\\\\\\\n  //   }\\\\\\\\n\\\\\\\\n  //   check()\\\\\\\\n  //   const unsubscribe = gitMonitorService.subscribe((_s) => {\\\\\\\\n  //     // Re-check on git status updates\\\\\\\\n  //     check()\\\\\\\\n  //   })\\\\\\\\n  //   return () => {\\\\\\\\n  //     disposed = true\\\\\\\\n  //     unsubscribe?.()\\\\\\\\n  //   }\\\\\\\\n  // }, [story])\\\\\\\\n\\\\\\\\n  const sortedFeaturesBase = useMemo(() => {\\\\\\\\n    if (!story) {\\\\\\\\n      return []\\\\\\\\n    }\\\\\\\\n    return [...story.features].sort(\\\\\\\\n      (a, b) => story.featureIdToDisplayIndex[a.id] - story.featureIdToDisplayIndex[b.id],\\\\\\\\n    )\\\\\\\\n  }, [story, storiesById])\\\\\\\\n\\\\\\\\n  const featuresSorted = useMemo(() => {\\\\\\\\n    let arr = [...sortedFeaturesBase]\\\\\\\\n    if (sortBy === 'index_asc') {\\\\\\\\n      // already asc\\\\\\\\n      return arr\\\\\\\\n    } else if (sortBy === 'index_desc') {\\\\\\\\n      return arr.slice().reverse()\\\\\\\\n    } else if (sortBy === 'status_asc') {\\\\\\\\n      const sVal = (f: Feature) => STATUS_ORDER.indexOf(f.status)\\\\\\\\n      return arr.sort(\\\\\\\\n        (a, b) =>\\\\\\\\n          sVal(a) - sVal(b) ||\\\\\\\\n          (story ? story.featureIdToDisplayIndex[a.id] - story.featureIdToDisplayIndex[b.id] : 0),\\\\\\\\n      )\\\\\\\\n    } else if (sortBy === 'status_desc') {\\\\\\\\n      const sVal = (f: Feature) => STATUS_ORDER.indexOf(f.status)\\\\\\\\n      return arr.sort(\\\\\\\\n        (a, b) =>\\\\\\\\n          sVal(b) - sVal(a) ||\\\\\\\\n          (story ? story.featureIdToDisplayIndex[b.id] - story.featureIdToDisplayIndex[a.id] : 0),\\\\\\\\n      )\\\\\\\\n    }\\\\\\\\n    return arr\\\\\\\\n  }, [sortedFeaturesBase, sortBy, story])\\\\\\\\n\\\\\\\\n  const featuresFiltered = useMemo(() => {\\\\\\\\n    return featuresSorted.filter((f) => {\\\\\\\\n      const byStatus =\\\\\\\\n        statusFilter === 'all'\\\\\\\\n          ? true\\\\\\\\n          : statusFilter === 'not-done'\\\\\\\\n            ? f.status !== '+' || f.rejection\\\\\\\\n            : f.status === statusFilter\\\\\\\\n      return byStatus && featureMatchesQuery(f, query)\\\\\\\\n    })\\\\\\\\n  }, [featuresSorted, statusFilter, query])\\\\\\\\n\\\\\\\\n  const isSearchFiltered = query !== ''\\\\\\\\n\\\\\\\\n  const storyRun = useMemo(\\\\\\\\n    () => (story ? runsActive.find((r) => r.storyId === story!.id) : undefined),\\\\\\\\n    [story, runsActive],\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const handleEditStory = () => {\\\\\\\\n    if (!story) return\\\\\\\\n    openModal({ type: 'story-edit', storyId: story.id })\\\\\\\\n  }\\\\\\\\n  const handleAddFeature = () => {\\\\\\\\n    if (!story) return\\\\\\\\n    openModal({ type: 'feature-create', storyId: story.id })\\\\\\\\n  }\\\\\\\\n  const handleEditFeature = (featureId: string) => {\\\\\\\\n    if (!story) return\\\\\\\\n    openModal({ type: 'feature-edit', storyId: story.id, featureId })\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleStoryStatusChange = async (storyId: string, status: Status) => {\\\\\\\\n    try {\\\\\\\\n      await updateStory(storyId, { status })\\\\\\\\n    } catch (e) {\\\\\\\\n      console.error('Failed to update status', e)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  const handleFeatureStatusChange = async (storyId: string, featureId: string, status: Status) => {\\\\\\\\n    try {\\\\\\\\n      await updateFeature(storyId, featureId, { status })\\\\\\\\n    } catch (e) {\\\\\\\\n      console.error('Failed to update status', e)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Allow DnD for index sorting when only the special 'not-done' filter is active (no search)\\\\\\\\n  const dndEnabled =\\\\\\\\n    (sortBy === 'index_asc' || sortBy === 'index_desc') && !isSearchFiltered && !saving\\\\\\\\n\\\\\\\\n  const handleMoveFeature = async (fromIndex: number, toIndex: number) => {\\\\\\\\n    if (!story) return\\\\\\\\n    setSaving(true)\\\\\\\\n    try {\\\\\\\\n      await reorderFeatures(story.id, { fromIndex, toIndex })\\\\\\\\n    } catch (e: any) {\\\\\\\\n      alert(`Failed to reorder feature: ${e.message || e}`)\\\\\\\\n    } finally {\\\\\\\\n      setSaving(false)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const computeDropForRow = (e: React.DragEvent<HTMLElement>, idx: number) => {\\\\\\\\n    const rect = (e.currentTarget as HTMLElement).getBoundingClientRect()\\\\\\\\n    const offsetY = e.clientY - rect.top\\\\\\\\n    let pos: 'before' | 'after' | null = offsetY < rect.height / 2 ? 'before' : 'after'\\\\\\\\n    if (\\\\\\\\n      draggingIndex != null &&\\\\\\\\n      (idx == draggingIndex ||\\\\\\\\n        (idx == draggingIndex - 1 && pos == 'after') ||\\\\\\\\n        (idx == draggingIndex + 1 && pos == 'before'))\\\\\\\\n    ) {\\\\\\\\n      pos = null\\\\\\\\n    }\\\\\\\\n    setDropIndex(idx)\\\\\\\\n    setDropPosition(pos)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const clearDndState = () => {\\\\\\\\n    setDragFeatureId(null)\\\\\\\\n    setDragging(false)\\\\\\\\n    setDraggingIndex(null)\\\\\\\\n    setDropIndex(null)\\\\\\\\n    setDropPosition(null)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const onRowKeyDown = (e: React.KeyboardEvent<HTMLDivElement>, featureId: string) => {\\\\\\\\n    if (e.key === 'Enter') {\\\\\\\\n      e.preventDefault()\\\\\\\\n      handleEditFeature(featureId)\\\\\\\\n      return\\\\\\\\n    }\\\\\\\\n    if (e.key !== 'ArrowDown' && e.key !== 'ArrowUp') return\\\\\\\\n    e.preventDefault()\\\\\\\\n    const ul = ulRef.current\\\\\\\\n    if (!ul) return\\\\\\\\n    const rows = Array.from(ul.querySelectorAll('.feature-row'))\\\\\\\\n    const current = e.currentTarget\\\\\\\\n    const i = rows.indexOf(current)\\\\\\\\n    if (i === -1) return\\\\\\\\n    let nextIndex = i + (e.key === 'ArrowDown' ? 1 : -1)\\\\\\\\n    if (nextIndex < 0) nextIndex = 0\\\\\\\\n    if (nextIndex >= rows.length) nextIndex = rows.length - 1\\\\\\\\n    ;(rows[nextIndex] as HTMLElement).focus()\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const highlightFeatureId =\\\\\\\\n    storiesRoute.name === 'details' && storiesRoute.storyId === storyId\\\\\\\\n      ? storiesRoute.highlightFeatureId\\\\\\\\n      : undefined\\\\\\\\n  const highlightStoryFlag =\\\\\\\\n    storiesRoute.name === 'details' && storiesRoute.storyId === storyId\\\\\\\\n      ? storiesRoute.highlightStory\\\\\\\\n      : undefined\\\\\\\\n\\\\\\\\n  useEffect(() => {\\\\\\\\n    if (highlightFeatureId) {\\\\\\\\n      const row = document.querySelector(`.feature-row[data-feature-id=\\\\\\\\\\\\\\\"${highlightFeatureId}\\\\\\\\\\\\\\\"]`)\\\\\\\\n      if (row) {\\\\\\\\n        row.scrollIntoView({ block: 'center', behavior: 'smooth' })\\\\\\\\n        ;(row as HTMLElement).classList.add('highlighted')\\\\\\\\n        setTimeout(() => (row as HTMLElement).classList.remove('highlighted'), 2000)\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  }, [highlightFeatureId])\\\\\\\\n\\\\\\\\n  useEffect(() => {\\\\\\\\n    if (highlightStoryFlag) {\\\\\\\\n      const element = document.querySelector('.details-header')\\\\\\\\n      if (element) {\\\\\\\\n        element.scrollIntoView({ block: 'start', behavior: 'smooth' })\\\\\\\\n        ;(element as HTMLElement).classList.add('highlighted')\\\\\\\\n        setTimeout(() => (element as HTMLElement).classList.remove('highlighted'), 2000)\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  }, [highlightStoryFlag])\\\\\\\\n\\\\\\\\n  const onClickMerge = async () => {\\\\\\\\n    if (!story) return\\\\\\\\n    setMergeError(null)\\\\\\\\n    setMerging(true)\\\\\\\\n    try {\\\\\\\\n      const status = await gitMonitorService.getStatus()\\\\\\\\n      const base = status.currentBranch\\\\\\\\n      const branchName = `features/${story.id}`\\\\\\\\n      if (!base) throw new Error('No base branch detected')\\\\\\\\n      const res = await gitMonitorService.mergeBranch(branchName, base)\\\\\\\\n      if (!res.ok) throw new Error(res.error || 'Merge failed')\\\\\\\\n      // Refresh and update button state\\\\\\\\n      await gitMonitorService.triggerPoll()\\\\\\\\n      const check = await gitMonitorService.hasUnmerged(branchName, base)\\\\\\\\n      setHasUnmerged(!!check.ok && !!check.hasUnmerged)\\\\\\\\n    } catch (e: any) {\\\\\\\\n      setMergeError(e?.message || String(e))\\\\\\\\n    } finally {\\\\\\\\n      setMerging(false)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (!story) {\\\\\\\\n    return (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"story-details flex flex-col flex-1 min-h-0 w-full overflow-hidden\\\\\\\\\\\\\\\">\\\\\\\\n        <header className=\\\\\\\\\\\\\\\"details-header shrink-0\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"details-header__bar\\\\\\\\\\\\\\\">\\\\\\\\n            <Button\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn-secondary\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                navigateView('Home')\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              <IconBack className=\\\\\\\\\\\\\\\"w-4 h-4\\\\\\\\\\\\\\\" />\\\\\\\\n              <span className=\\\\\\\\\\\\\\\"sr-only\\\\\\\\\\\\\\\">Back to Stories</span>\\\\\\\\n            </Button>\\\\\\\\n            <h1 className=\\\\\\\\\\\\\\\"details-title\\\\\\\\\\\\\\\">Story {storyId}</h1>\\\\\\\\n          </div>\\\\\\\\n        </header>\\\\\\\\n        <main className=\\\\\\\\\\\\\\\"details-content flex-1 min-h-0 overflow-auto p-4\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"empty\\\\\\\\\\\\\\\">Story {storyId} not found.</div>\\\\\\\\n        </main>\\\\\\\\n      </div>\\\\\\\\n    )\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const onListDrop = () => {\\\\\\\\n    if (!story) {\\\\\\\\n      clearDndState()\\\\\\\\n      return\\\\\\\\n    }\\\\\\\\n    if (\\\\\\\\n      dragFeatureId != null &&\\\\\\\\n      draggingIndex != null &&\\\\\\\\n      dropIndex != null &&\\\\\\\\n      dropPosition != null\\\\\\\\n    ) {\\\\\\\\n      // Map from feature id/display index back to absolute indices within the story\\\\\\\\n      const fromIndex = (story.featureIdToDisplayIndex[dragFeatureId] ?? 1) - 1\\\\\\\\n      const targetFeature = featuresFiltered[dropIndex]\\\\\\\\n      if (!targetFeature) {\\\\\\\\n        clearDndState()\\\\\\\\n        return\\\\\\\\n      }\\\\\\\\n      let toIndex = (story.featureIdToDisplayIndex[targetFeature.id] ?? 1) - 1\\\\\\\\n      if (dropPosition === 'after') {\\\\\\\\n        toIndex = toIndex + 1\\\\\\\\n      }\\\\\\\\n      handleMoveFeature(fromIndex, toIndex)\\\\\\\\n    }\\\\\\\\n    clearDndState()\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const storyBlockers = getBlockers(story.id)\\\\\\\\n  const storyBlockersOutbound = getBlockersOutbound(story.id)\\\\\\\\n\\\\\\\\n  const storyHasActiveRun = !!storyRun\\\\\\\\n  const hasRejectedFeatures = story.features.filter((f) => !!f.rejection).length > 0\\\\\\\\n  const storyDisplayIndex = project?.storyIdToDisplayIndex[story.id] ?? 0\\\\\\\\n\\\\\\\\n  const currentFilterLabel =\\\\\\\\n    statusFilter === 'all'\\\\\\\\n      ? 'All'\\\\\\\\n      : statusFilter === 'not-done'\\\\\\\\n        ? 'Not done'\\\\\\\\n        : `${STATUS_LABELS[statusFilter as Status]}`\\\\\\\\n  const k =\\\\\\\\n    statusFilter === 'all'\\\\\\\\n      ? 'queued'\\\\\\\\n      : statusFilter === 'not-done'\\\\\\\\n        ? 'queued'\\\\\\\\n        : statusKey(statusFilter as Status)\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div className='flex flex-row flex-1 min-h-0 w-full'>\\\\\\\\n    <div\\\\\\\\n      className=\\\\\\\\\\\\\\\"story-details flex flex-col flex-1 min-h-0 w-full overflow-hidden\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"region\\\\\\\\\\\\\\\"\\\\\\\\n      aria-labelledby=\\\\\\\\\\\\\\\"story-details-heading\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <header className=\\\\\\\\\\\\\\\"details-header shrink-0\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"details-header__bar\\\\\\\\\\\\\\\">\\\\\\\\n          <Button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn-secondary w-9 \\\\\\\\\\\\\\\"\\\\\\\\n            onClick={() => {\\\\\\\\n              navigateView('Home')\\\\\\\\n            }}\\\\\\\\n            aria-label=\\\\\\\\\\\\\\\"Back to Stories\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            <IconBack className=\\\\\\\\\\\\\\\"w-4 h-4\\\\\\\\\\\\\\\" />\\\\\\\\n          </Button>\\\\\\\\n\\\\\\\\n          <div\\\\\\\\n            className=\\\\\\\\\\\\\\\"col col-id flex flex-col items-center gap-1\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ gridRow: '1 / 4', alignSelf: 'center' }}\\\\\\\\n          >\\\\\\\\n            {hasRejectedFeatures && (\\\\\\\\n              <ExclamationChip\\\\\\\\n                title={'One or more features were rejected'}\\\\\\\\n                tooltip=\\\\\\\\\\\\\\\"Has rejection reason\\\\\\\\\\\\\\\"\\\\\\\\n              />\\\\\\\\n            )}\\\\\\\\n            <span className=\\\\\\\\\\\\\\\"id-chip\\\\\\\\\\\\\\\">{storyDisplayIndex}</span>\\\\\\\\n            <StatusControl\\\\\\\\n              status={story.status}\\\\\\\\n              className=\\\\\\\\\\\\\\\"ml-2\\\\\\\\\\\\\\\"\\\\\\\\n              onChange={(next) => handleStoryStatusChange(story.id, next)}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n\\\\\\\\n          <h1 id=\\\\\\\\\\\\\\\"story-details-heading\\\\\\\\\\\\\\\" className=\\\\\\\\\\\\\\\"details-title\\\\\\\\\\\\\\\">\\\\\\\\n            <RichText text={story.title || `Story ${storyDisplayIndex}`} />\\\\\\\\n          </h1>\\\\\\\\n\\\\\\\\n          <div\\\\\\\\n            className=\\\\\\\\\\\\\\\"flex flex-col gap-2 ml-2\\\\\\\\\\\\\\\"\\\\\\\\n            aria-label={`Blockers for Story ${storyDisplayIndex}`}\\\\\\\\n          >\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"chips-list\\\\\\\\\\\\\\\">\\\\\\\\n              <span className=\\\\\\\\\\\\\\\"chips-sub__label\\\\\\\\\\\\\\\">Blockers</span>\\\\\\\\n              {storyBlockers.length === 0 ? (\\\\\\\\n                <span className=\\\\\\\\\\\\\\\"chips-sub__label\\\\\\\\\\\\\\\" title=\\\\\\\\\\\\\\\"No dependencies\\\\\\\\\\\\\\\">\\\\\\\\n                  None\\\\\\\\n                </span>\\\\\\\\n              ) : (\\\\\\\\n                storyBlockers.map((d) => <DependencyBullet key={d.id} dependency={d.id} />)\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"chips-list\\\\\\\\\\\\\\\">\\\\\\\\n              <span className=\\\\\\\\\\\\\\\"chips-sub__label\\\\\\\\\\\\\\\">Blocks</span>\\\\\\\\n              {storyBlockersOutbound.length === 0 ? (\\\\\\\\n                <span className=\\\\\\\\\\\\\\\"chips-sub__label\\\\\\\\\\\\\\\" title=\\\\\\\\\\\\\\\"No dependents\\\\\\\\\\\\\\\">\\\\\\\\n                  None\\\\\\\\n                </span>\\\\\\\\n              ) : (\\\\\\\\n                storyBlockersOutbound.map((d) => (\\\\\\\\n                  <DependencyBullet key={d.id} dependency={d.id} isOutbound />\\\\\\\\n                ))\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"spacer\\\\\\\\\\\\\\\" />\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"flex items-center gap-3\\\\\\\\\\\\\\\">\\\\\\\\n            <Button\\\\\\\\n                className='btn-secondary'\\\\\\\\n                onClick={() => setIsChatOpen(!isChatOpen)}\\\\\\\\n            >\\\\\\\\n                <IconChat className='w-4 h-4' />\\\\\\\\n                Chat\\\\\\\\n            </Button>\\\\\\\\n            <ModelChip editable />\\\\\\\\n            {/* Replace RunAgentButton space with AgentRunBullet when active */}\\\\\\\\n            <div className={`flex items-center ${storyHasActiveRun ? 'is-sticky-visible' : ''}`}>\\\\\\\\n              {storyRun ? (\\\\\\\\n                <AgentRunBullet\\\\\\\\n                  key={storyRun.id}\\\\\\\\n                  run={storyRun}\\\\\\\\n                  onClick={(e) => {\\\\\\\\n                    e.stopPropagation()\\\\\\\\n                    navigateAgentRun(storyRun.id)\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              ) : (\\\\\\\\n                <RunAgentButton\\\\\\\\n                  onClick={(agentType) => {\\\\\\\\n                    if (!projectId || storyHasActiveRun) return\\\\\\\\n                    startAgent(agentType, projectId, story.id)\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </header>\\\\\\\\n\\\\\\\\n      {/* Top toolbars similar to StoriesListView: search/filter/sort and count/add */}\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"stories-toolbar shrink-0\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"control search-wrapper\\\\\\\\\\\\\\\">\\\\\\\\n            <input\\\\\\\\n              type=\\\\\\\\\\\\\\\"search\\\\\\\\\\\\\\\"\\\\\\\\n              placeholder=\\\\\\\\\\\\\\\"Search by id, title, or description\\\\\\\\\\\\\\\"\\\\\\\\n              aria-label=\\\\\\\\\\\\\\\"Search features\\\\\\\\\\\\\\\"\\\\\\\\n              value={query}\\\\\\\\n              onChange={(e) => setQuery(e.target.value)}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"control\\\\\\\\\\\\\\\">\\\\\\\\n            <div\\\\\\\\n              ref={statusFilterRef}\\\\\\\\n              className=\\\\\\\\\\\\\\\"status-filter-btn ui-select gap-2\\\\\\\\\\\\\\\"\\\\\\\\n              role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              aria-haspopup=\\\\\\\\\\\\\\\"menu\\\\\\\\\\\\\\\"\\\\\\\\n              aria-expanded={openFilter}\\\\\\\\n              aria-label=\\\\\\\\\\\\\\\"Filter by status\\\\\\\\\\\\\\\"\\\\\\\\n              tabIndex={0}\\\\\\\\n              onClick={() => setOpenFilter(true)}\\\\\\\\n              onKeyDown={(e) => {\\\\\\\\n                if (e.key === 'Enter' || e.key === ' ') setOpenFilter(true)\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              <span className={`status-bullet status-bullet--${k}`} aria-hidden />\\\\\\\\n              <span className=\\\\\\\\\\\\\\\"standard-picker__label\\\\\\\\\\\\\\\">{currentFilterLabel}</span>\\\\\\\\n            </div>\\\\\\\\n            {openFilter && statusFilterRef.current && (\\\\\\\\n              <StatusPicker\\\\\\\\n                anchorEl={statusFilterRef.current}\\\\\\\\n                value={statusFilter}\\\\\\\\n                isAllAllowed={true}\\\\\\\\n                includeNotDone={true}\\\\\\\\n                onSelect={(val) => {\\\\\\\\n                  setStatusFilter(val as any)\\\\\\\\n                  setOpenFilter(false)\\\\\\\\n                }}\\\\\\\\n                onClose={() => setOpenFilter(false)}\\\\\\\\n              />\\\\\\\\n            )}\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"control\\\\\\\\\\\\\\\">\\\\\\\\n            <select\\\\\\\\n              className=\\\\\\\\\\\\\\\"ui-select\\\\\\\\\\\\\\\"\\\\\\\\n              value={sortBy}\\\\\\\\n              onChange={(e) => setSortBy(e.target.value as FeatureSort)}\\\\\\\\n              aria-label=\\\\\\\\\\\\\\\"Sort features by\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <option value=\\\\\\\\\\\\\\\"index_asc\\\\\\\\\\\\\\\">Ascending ↓</option>\\\\\\\\n              <option value=\\\\\\\\\\\\\\\"index_desc\\\\\\\\\\\\\\\">Descending ↑</option>\\\\\\\\n              <option value=\\\\\\\\\\\\\\\"status_asc\\\\\\\\\\\\\\\">Status ↓</option>\\\\\\\\n              <option value=\\\\\\\\\\\\\\\"status_desc\\\\\\\\\\\\\\\">Status ↑</option>\\\\\\\\n            </select>\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"right\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn-secondary btn-icon\\\\\\\\\\\\\\\"\\\\\\\\n            aria-label=\\\\\\\\\\\\\\\"Edit story\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={handleEditStory}\\\\\\\\n          >\\\\\\\\n            <IconEdit className=\\\\\\\\\\\\\\\"w-4 h-4\\\\\\\\\\\\\\\" />\\\\\\\\n          </button>\\\\\\\\n          <button\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-icon\\\\\\\\\\\\\\\"\\\\\\\\n            aria-label=\\\\\\\\\\\\\\\"Add feature\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={handleAddFeature}\\\\\\\\n          >\\\\\\\\n            <IconPlus className=\\\\\\\\\\\\\\\"w-4 h-4\\\\\\\\\\\\\\\" />\\\\\\\\n          </button>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <main className=\\\\\\\\\\\\\\\"details-content flex flex-col flex-1 min-h-0 overflow-hidden\\\\\\\\\\\\\\\">\\\\\\\\n        <section className=\\\\\\\\\\\\\\\"panel shrink-0\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"section-header\\\\\\\\\\\\\\\">\\\\\\\\n            <button\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              className=\\\\\\\\\\\\\\\"collapse-toggle btn-icon\\\\\\\\\\\\\\\"\\\\\\\\n              aria-expanded={isOverviewExpanded}\\\\\\\\n              aria-controls=\\\\\\\\\\\\\\\"overview-content\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => setIsOverviewExpanded((prev) => !prev)}\\\\\\\\n            >\\\\\\\\n              <IconChevron\\\\\\\\n                className={`w-4 h-4 icon-chevron ${isOverviewExpanded ? 'expanded' : ''}`}\\\\\\\\n              />\\\\\\\\n            </button>\\\\\\\\n            <h2 className=\\\\\\\\\\\\\\\"section-title\\\\\\\\\\\\\\\">Overview</h2>\\\\\\\\n          </div>\\\\\\\\n          <div\\\\\\\\n            id=\\\\\\\\\\\\\\\"overview-content\\\\\\\\\\\\\\\"\\\\\\\\n            className={`overview-content ${isOverviewExpanded ? 'expanded' : 'collapsed'}`}\\\\\\\\n          >\\\\\\\\n            <p className=\\\\\\\\\\\\\\\"story-desc\\\\\\\\\\\\\\\">\\\\\\\\n              <RichText text={story.description || 'No description provided.'} />\\\\\\\\n            </p>\\\\\\\\n          </div>\\\\\\\\n        </section>\\\\\\\\n\\\\\\\\n        <section className=\\\\\\\\\\\\\\\"panel flex flex-col flex-1 min-h-0\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"section-header shrink-0\\\\\\\\\\\\\\\">\\\\\\\\n            <h2 className=\\\\\\\\\\\\\\\"section-title\\\\\\\\\\\\\\\">Features</h2>\\\\\\\\n          </div>\\\\\\\\n\\\\\\\\n          {featuresFiltered.length === 0 ? (\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"flex-1 min-h-0 overflow-y-auto empty\\\\\\\\\\\\\\\">No features found.</div>\\\\\\\\n          ) : (\\\\\\\\n            <ul\\\\\\\\n              className={`flex-1 min-h-0 overflow-y-auto features-list ${dragging ? 'dnd-active' : ''}`}\\\\\\\\n              role=\\\\\\\\\\\\\\\"list\\\\\\\\\\\\\\\"\\\\\\\\n              aria-label=\\\\\\\\\\\\\\\"Features\\\\\\\\\\\\\\\"\\\\\\\\n              ref={ulRef}\\\\\\\\n              onDragOver={(e) => {\\\\\\\\n                if (dndEnabled) {\\\\\\\\n                  e.preventDefault()\\\\\\\\n                  e.dataTransfer.dropEffect = 'move'\\\\\\\\n                }\\\\\\\\n              }}\\\\\\\\n              onDrop={(e) => {\\\\\\\\n                if (!dndEnabled || !dragging) return\\\\\\\\n                e.preventDefault()\\\\\\\\n                preventDragFromNoDragRef.current = false\\\\\\\\n                onListDrop()\\\\\\\\n              }}\\\\\\\\n              onDragEnd={() => {\\\\\\\\n                preventDragFromNoDragRef.current = false\\\\\\\\n                clearDndState()\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {featuresFiltered.map((f: Feature, idx: number) => {\\\\\\\\n                const blockers = getBlockers(story.id, f.id)\\\\\\\\n                const blockersOutbound = getBlockersOutbound(f.id)\\\\\\\\n\\\\\\\\n                const isDragSource = dragFeatureId === f.id\\\\\\\\n                const isDropBefore = dragging && dropIndex === idx && dropPosition === 'before'\\\\\\\\n                const isDropAfter = dragging && dropIndex === idx && dropPosition === 'after'\\\\\\\\n\\\\\\\\n                const featureHasActiveRun = !!storyRun?.conversations.find(\\\\\\\\n                  (c) => c.featureId === f.id,\\\\\\\\n                )\\\\\\\\n\\\\\\\\n                return (\\\\\\\\n                  <li key={f.id} className=\\\\\\\\\\\\\\\"feature-item\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"listitem\\\\\\\\\\\\\\\">\\\\\\\\n                    {isDropBefore && <div className=\\\\\\\\\\\\\\\"drop-indicator\\\\\\\\\\\\\\\" aria-hidden=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"></div>}\\\\\\\\n                    <div\\\\\\\\n                      className={`feature-row ${dndEnabled ? 'draggable' : ''} ${isDragSource ? 'is-dragging' : ''} ${dragging && dropIndex === idx ? 'is-drop-target' : ''} ${f.id === highlightFeatureId ? 'highlighted' : ''}`}\\\\\\\\n                      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                      tabIndex={0}\\\\\\\\n                      data-index={idx}\\\\\\\\n                      data-feature-id={f.id}\\\\\\\\n                      draggable={dndEnabled}\\\\\\\\n                      aria-grabbed={isDragSource}\\\\\\\\n                      onPointerDownCapture={(e) => {\\\\\\\\n                        const t = e.target as HTMLElement | null\\\\\\\\n                        preventDragFromNoDragRef.current = !!(t && t.closest('.no-drag'))\\\\\\\\n                      }}\\\\\\\\n                      onPointerUpCapture={() => {\\\\\\\\n                        preventDragFromNoDragRef.current = false\\\\\\\\n                      }}\\\\\\\\n                      onDragStart={(e) => {\\\\\\\\n                        // If the initial pointer down started on a non-draggable UI (e.g., action buttons), block row drag\\\\\\\\n                        if (preventDragFromNoDragRef.current) {\\\\\\\\n                          e.preventDefault()\\\\\\\\n                          e.stopPropagation()\\\\\\\\n                          preventDragFromNoDragRef.current = false\\\\\\\\n                          return\\\\\\\\n                        }\\\\\\\\n                        if (!dndEnabled) return\\\\\\\\n                        // Fallback: if somehow target is within .no-drag, block as well\\\\\\\\n                        const target = e.target as HTMLElement | null\\\\\\\\n                        if (target && target.closest('.no-drag')) {\\\\\\\\n                          e.preventDefault()\\\\\\\\n                          e.stopPropagation()\\\\\\\\n                          return\\\\\\\\n                        }\\\\\\\\n                        setDragFeatureId(f.id)\\\\\\\\n                        setDragging(true)\\\\\\\\n                        setDraggingIndex(idx)\\\\\\\\n                        e.dataTransfer.setData('text/plain', String(f.id))\\\\\\\\n                        e.dataTransfer.effectAllowed = 'move'\\\\\\\\n                      }}\\\\\\\\n                      onDragOver={(e) => {\\\\\\\\n                        if (!dndEnabled) return\\\\\\\\n                        e.preventDefault()\\\\\\\\n                        computeDropForRow(e, idx)\\\\\\\\n                      }}\\\\\\\\n                      onKeyDown={(e) => onRowKeyDown(e, f.id)}\\\\\\\\n                      onClick={(e) => {\\\\\\\\n                        // Ignore clicks if we were dragging or if clicking on specific action areas\\\\\\\\n                        if (dragging) return\\\\\\\\n                        const t = e.target as HTMLElement | null\\\\\\\\n                        if (t && t.closest('.no-drag')) return\\\\\\\\n                        handleEditFeature(f.id)\\\\\\\\n                      }}\\\\\\\\n                      aria-label={`Feature ${f.id}: ${f.title}. Status ${STATUS_LABELS[f.status as Status] || f.status}. ${blockers.length} items this feature is blocked by, ${blockersOutbound.length} items this feature is blocking.  Press Enter to edit.`}\\\\\\\\n                    >\\\\\\\\n                      <div className=\\\\\\\\\\\\\\\"col col-id\\\\\\\\\\\\\\\">\\\\\\\\n                        <span className=\\\\\\\\\\\\\\\"id-chip\\\\\\\\\\\\\\\">{story.featureIdToDisplayIndex[f.id]}</span>\\\\\\\\n                        <StatusControl\\\\\\\\n                          status={f.status}\\\\\\\\n                          onChange={(next) => handleFeatureStatusChange(story.id, f.id, next)}\\\\\\\\n                        />\\\\\\\\n                        {featureHasActiveRun && storyRun && (\\\\\\\\n                          <div className=\\\\\\\\\\\\\\\"no-drag mt-1\\\\\\\\\\\\\\\">\\\\\\\\n                            <AgentRunBullet\\\\\\\\n                              key={storyRun.id}\\\\\\\\n                              run={storyRun}\\\\\\\\n                              onClick={(e) => {\\\\\\\\n                                e.stopPropagation()\\\\\\\\n                                navigateAgentRun(storyRun.id)\\\\\\\\n                              }}\\\\\\\\n                            />\\\\\\\\n                          </div>\\\\\\\\n                        )}\\\\\\\\n                        {f.rejection && (\\\\\\\\n                          <ExclamationChip title={f.rejection} tooltip=\\\\\\\\\\\\\\\"Has rejection reason\\\\\\\\\\\\\\\" />\\\\\\\\n                        )}\\\\\\\\n                      </div>\\\\\\\\n\\\\\\\\n                      <div className=\\\\\\\\\\\\\\\"col col-title\\\\\\\\\\\\\\\">\\\\\\\\n                        <span className=\\\\\\\\\\\\\\\"title-text\\\\\\\\\\\\\\\">\\\\\\\\n                          <RichText text={f.title || ''} />\\\\\\\\n                        </span>\\\\\\\\n                      </div>\\\\\\\\n                      <div className=\\\\\\\\\\\\\\\"col col-description\\\\\\\\\\\\\\\" title={f.description || ''}>\\\\\\\\n                        <RichText text={f.description || ''} />\\\\\\\\n                      </div>\\\\\\\\n                      <div\\\\\\\\n                        className={`col col-actions ${featureHasActiveRun ? 'is-sticky-visible' : ''}`}\\\\\\\\n                      >\\\\\\\\n                        {!storyHasActiveRun && (\\\\\\\\n                          <RunAgentButton\\\\\\\\n                            onClick={(agentType) => {\\\\\\\\n                              if (!projectId || storyHasActiveRun) return\\\\\\\\n                              startAgent(agentType, projectId, story.id, f.id)\\\\\\\\n                            }}\\\\\\\\n                          />\\\\\\\\n                        )}\\\\\\\\n                      </div>\\\\\\\\n\\\\\\\\n                      <div\\\\\\\\n                        style={{ gridRow: 3, gridColumn: 2 }}\\\\\\\\n                        className=\\\\\\\\\\\\\\\"flex items-center justify-between gap-8\\\\\\\\\\\\\\\"\\\\\\\\n                        aria-label={`Blockers and actions for Feature ${f.id}`}\\\\\\\\n                      >\\\\\\\\n                        <div className=\\\\\\\\\\\\\\\"flex gap-8\\\\\\\\\\\\\\\">\\\\\\\\n                          <div className=\\\\\\\\\\\\\\\"chips-list\\\\\\\\\\\\\\\">\\\\\\\\n                            <span className=\\\\\\\\\\\\\\\"chips-sub__label\\\\\\\\\\\\\\\">References</span>\\\\\\\\n                            {blockers.length === 0 ? (\\\\\\\\n                              <span className=\\\\\\\\\\\\\\\"chips-sub__label\\\\\\\\\\\\\\\" title=\\\\\\\\\\\\\\\"No dependencies\\\\\\\\\\\\\\\">\\\\\\\\n                                None\\\\\\\\n                              </span>\\\\\\\\n                            ) : (\\\\\\\\n                              blockers.map((d) => <DependencyBullet key={d.id} dependency={d.id} />)\\\\\\\\n                            )}\\\\\\\\n                          </div>\\\\\\\\n                          <div className=\\\\\\\\\\\\\\\"chips-list\\\\\\\\\\\\\\\">\\\\\\\\n                            <span className=\\\\\\\\\\\\\\\"chips-sub__label\\\\\\\\\\\\\\\">Blocks</span>\\\\\\\\n                            {blockersOutbound.length === 0 ? (\\\\\\\\n                              <span className=\\\\\\\\\\\\\\\"chips-sub__label\\\\\\\\\\\\\\\" title=\\\\\\\\\\\\\\\"No dependents\\\\\\\\\\\\\\\">\\\\\\\\n                                None\\\\\\\\n                              </span>\\\\\\\\n                            ) : (\\\\\\\\n                              blockersOutbound.map((d) => (\\\\\\\\n                                <DependencyBullet key={d.id} dependency={d.id} isOutbound />\\\\\\\\n                              ))\\\\\\\\n                            )}\\\\\\\\n                          </div>\\\\\\\\n                        </div>\\\\\\\\n                        <div className=\\\\\\\\\\\\\\\"flex items-center gap-3 pr-2\\\\\\\\\\\\\\\">\\\\\\\\n                          {/* AgentRunBullet for features is now rendered in the actions column to replace the RunAgentButton when active */}\\\\\\\\n                        </div>\\\\\\\\n                      </div>\\\\\\\\n                    </div>\\\\\\\\n                    {isDropAfter && <div className=\\\\\\\\\\\\\\\"drop-indicator\\\\\\\\\\\\\\\" aria-hidden=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"></div>}\\\\\\\\n                  </li>\\\\\\\\n                )\\\\\\\\n              })}\\\\\\\\n            </ul>\\\\\\\\n          )}\\\\\\\\n        </section>\\\\\\\\n      </main>\\\\\\\\n\\\\\\\\n      {saving && (\\\\\\\\n        <div\\\\\\\\n          className=\\\\\\\\\\\\\\\"saving-indicator\\\\\\\\\\\\\\\"\\\\\\\\n          aria-live=\\\\\\\\\\\\\\\"polite\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ position: 'fixed', bottom: 12, right: 16 }}\\\\\\\\n        >\\\\\\\\n          Reordering…\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n    {isChatOpen && (\\\\\\\\n        <div className='chat-sidebar-placeholder'></div>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\"}}}],\\\\\\\"model_name\\\\\\\":\\\\\\\"claude-3-5-sonnet-20240620\\\\\\\",\\\\\\\"model_cost\\\\\\\":0.08882400000000001}\\\"}\",\"stacktrace\":\"Error: Received no agentResponse. Original message: {\\\"role\\\":\\\"assistant\\\",\\\"content\\\":\\\"{\\\\\\\"thoughts\\\\\\\":\\\\\\\"I will now modify `src/renderer/stories/StoryDetailsView.tsx` to include the chat functionality.\\\\\\\\n\\\\\\\\nHere's what I'll do:\\\\\\\\n1.  **Add `isChatOpen` state**: I'll add `const [isChatOpen, setIsChatOpen] = useState(false);` to manage the sidebar's visibility.\\\\\\\\n2.  **Add a \\\\\\\\\\\\\\\"Chat\\\\\\\\\\\\\\\" button**: I'll add a new `Button` in the header section (`<div class=\\\\\\\\\\\\\\\"flex items-center gap-3\\\\\\\\\\\\\\\">`). When clicked, it will toggle the `isChatOpen` state. I'll also add a chat icon.\\\\\\\\n3.  **Conditionally render the sidebar**: I'll add a placeholder for the `ChatSidebar` that will be rendered when `isChatOpen` is true. For now, it will be a simple `div`. I also need to make the main container a flex row to accommodate the sidebar.\\\\\\\\n4.  **Import `IconChat`**: I'll need to import a chat icon for the button from `src/renderer/components/ui/Icons.tsx`.\\\\\\\\n\\\\\\\\nLet's start by modifying `StoryDetailsView.tsx`.\\\\\\\",\\\\\\\"tool_calls\\\\\\\":[{\\\\\\\"tool_name\\\\\\\":\\\\\\\"write_file\\\\\\\",\\\\\\\"arguments\\\\\\\":{\\\\\\\"filename\\\\\\\":\\\\\\\"src/renderer/stories/StoryDetailsView.tsx\\\\\\\",\\\\\\\"content\\\\\\\":\\\\\\\"import { useEffect, useMemo, useRef, useState } from 'react'\\\\\\\\nimport { useNavigator } from '../navigation/Navigator'\\\\\\\\nimport DependencyBullet from '../components/stories/DependencyBullet'\\\\\\\\nimport StatusControl from '../components/stories/StatusControl'\\\\\\\\nimport { useActiveProject } from '../contexts/ProjectContext'\\\\\\\\nimport { useAgents } from '../contexts/AgentsContext'\\\\\\\\nimport AgentRunBullet from '../components/agents/AgentRunBullet'\\\\\\\\nimport { Feature, Status, Story } from 'thefactory-tools'\\\\\\\\nimport { IconBack, IconChat, IconChevron, IconEdit, IconPlus } from '../components/ui/Icons'\\\\\\\\nimport ExclamationChip from '../components/stories/ExclamationChip'\\\\\\\\nimport RunAgentButton from '../components/stories/RunAgentButton'\\\\\\\\nimport { RichText } from '../components/ui/RichText'\\\\\\\\nimport ModelChip from '../components/agents/ModelChip'\\\\\\\\nimport { StatusPicker, statusKey, STATUS_LABELS } from '../components/stories/StatusControl'\\\\\\\\nimport { gitMonitorService } from '../services/gitMonitorService'\\\\\\\\nimport { Button } from '../components/ui/Button'\\\\\\\\nimport { useStories } from '../contexts/StoriesContext'\\\\\\\\n\\\\\\\\nconst STATUS_ORDER: Status[] = ['-', '~', '+', '=', '?']\\\\\\\\n\\\\\\\\ntype FeatureSort = 'index_asc' | 'index_desc' | 'status_asc' | 'status_desc'\\\\\\\\n\\\\\\\\nfunction featureMatchesQuery(f: Feature, q: string) {\\\\\\\\n  if (!q) return true\\\\\\\\n  const s = q.trim().toLowerCase()\\\\\\\\n  if (!s) return true\\\\\\\\n  const idStr = String(f.id || '')\\\\\\\\n  return (\\\\\\\\n    idStr.includes(s) ||\\\\\\\\n    (f.title || '').toLowerCase().includes(s) ||\\\\\\\\n    (f.description || '').toLowerCase().includes(s)\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default function StoryDetailsView({ storyId }: { storyId: string }) {\\\\\\\\n  const [story, setStory] = useState<Story | null>(null)\\\\\\\\n  const [saving, setSaving] = useState(false)\\\\\\\\n  const { openModal, navigateView, storiesRoute, navigateAgentRun } = useNavigator()\\\\\\\\n  const ulRef = useRef<HTMLUListElement>(null)\\\\\\\\n  const [isOverviewExpanded, setIsOverviewExpanded] = useState(true)\\\\\\\\n  const [isChatOpen, setIsChatOpen] = useState(false)\\\\\\\\n\\\\\\\\n  const [dragFeatureId, setDragFeatureId] = useState<string | null>(null)\\\\\\\\n  const [dragging, setDragging] = useState(false)\\\\\\\\n  const [draggingIndex, setDraggingIndex] = useState<number | null>(null)\\\\\\\\n  const [dropIndex, setDropIndex] = useState<number | null>(null)\\\\\\\\n  const [dropPosition, setDropPosition] = useState<'before' | 'after' | null>(null)\\\\\\\\n  const { project, projectId } = useActiveProject()\\\\\\\\n  const {\\\\\\\\n    storiesById,\\\\\\\\n    updateStory,\\\\\\\\n    updateFeature,\\\\\\\\n    reorderFeatures,\\\\\\\\n    getBlockers,\\\\\\\\n    getBlockersOutbound,\\\\\\\\n  } = useStories()\\\\\\\\n  const { runsActive, startAgent } = useAgents()\\\\\\\\n\\\\\\\\n  // Tracks if the initial pointer down started within a .no-drag element to block parent row dragging\\\\\\\\n  const preventDragFromNoDragRef = useRef(false)\\\\\\\\n\\\\\\\\n  // Local search/sort/filter state (not persisted)\\\\\\\\n  const [query, setQuery] = useState('')\\\\\\\\n  const [statusFilter, setStatusFilter] = useState<'all' | 'not-done' | Status>('not-done')\\\\\\\\n  const [sortBy, setSortBy] = useState<FeatureSort>('index_asc')\\\\\\\\n  const [openFilter, setOpenFilter] = useState(false)\\\\\\\\n  const statusFilterRef = useRef<HTMLDivElement>(null)\\\\\\\\n\\\\\\\\n  // Git merge UI state\\\\\\\\n  const [gitBaseBranch, setGitBaseBranch] = useState<string | null>(null)\\\\\\\\n  const [hasUnmerged, setHasUnmerged] = useState<boolean>(false)\\\\\\\\n  const [checkingMerge, setCheckingMerge] = useState<boolean>(false)\\\\\\\\n  const [merging, setMerging] = useState<boolean>(false)\\\\\\\\n  const [mergeError, setMergeError] = useState<string | null>(null)\\\\\\\\n\\\\\\\\n  useEffect(() => {\\\\\\\\n    if (storyId && storiesById) {\\\\\\\\n      const t = storiesById[storyId]\\\\\\\\n      setStory(t)\\\\\\\\n    } else {\\\\\\\\n      setStory(null)\\\\\\\\n    }\\\\\\\\n  }, [storyId, storiesById])\\\\\\\\n\\\\\\\\n  //TODO: logic needs to be cleand up\\\\\\\\n  // useEffect(() => {\\\\\\\\n  //   let disposed = false\\\\\\\\n\\\\\\\\n  //   async function check() {\\\\\\\\n  //     if (!story) {\\\\\\\\n  //       setHasUnmerged(false)\\\\\\\\n  //       return\\\\\\\\n  //     }\\\\\\\\n  //     setCheckingMerge(true)\\\\\\\\n  //     try {\\\\\\\\n  //       const status = await gitMonitorService.getStatus()\\\\\\\\n  //       const base = status.currentBranch || null\\\\\\\\n  //       setGitBaseBranch(base)\\\\\\\\n  //       const branchName = `features/${story.id}`\\\\\\\\n  //       if (!base) {\\\\\\\\n  //         setHasUnmerged(false)\\\\\\\\n  //         return\\\\\\\\n  //       }\\\\\\\\n  //       const res = await gitMonitorService.hasUnmerged(branchName, base)\\\\\\\\n  //       if (!disposed) {\\\\\\\\n  //         setHasUnmerged(!!res.ok && !!res.hasUnmerged)\\\\\\\\n  //       }\\\\\\\\n  //     } catch (e) {\\\\\\\\n  //       if (!disposed) setHasUnmerged(false)\\\\\\\\n  //     } finally {\\\\\\\\n  //       if (!disposed) setCheckingMerge(false)\\\\\\\\n  //     }\\\\\\\\n  //   }\\\\\\\\n\\\\\\\\n  //   check()\\\\\\\\n  //   const unsubscribe = gitMonitorService.subscribe((_s) => {\\\\\\\\n  //     // Re-check on git status updates\\\\\\\\n  //     check()\\\\\\\\n  //   })\\\\\\\\n  //   return () => {\\\\\\\\n  //     disposed = true\\\\\\\\n  //     unsubscribe?.()\\\\\\\\n  //   }\\\\\\\\n  // }, [story])\\\\\\\\n\\\\\\\\n  const sortedFeaturesBase = useMemo(() => {\\\\\\\\n    if (!story) {\\\\\\\\n      return []\\\\\\\\n    }\\\\\\\\n    return [...story.features].sort(\\\\\\\\n      (a, b) => story.featureIdToDisplayIndex[a.id] - story.featureIdToDisplayIndex[b.id],\\\\\\\\n    )\\\\\\\\n  }, [story, storiesById])\\\\\\\\n\\\\\\\\n  const featuresSorted = useMemo(() => {\\\\\\\\n    let arr = [...sortedFeaturesBase]\\\\\\\\n    if (sortBy === 'index_asc') {\\\\\\\\n      // already asc\\\\\\\\n      return arr\\\\\\\\n    } else if (sortBy === 'index_desc') {\\\\\\\\n      return arr.slice().reverse()\\\\\\\\n    } else if (sortBy === 'status_asc') {\\\\\\\\n      const sVal = (f: Feature) => STATUS_ORDER.indexOf(f.status)\\\\\\\\n      return arr.sort(\\\\\\\\n        (a, b) =>\\\\\\\\n          sVal(a) - sVal(b) ||\\\\\\\\n          (story ? story.featureIdToDisplayIndex[a.id] - story.featureIdToDisplayIndex[b.id] : 0),\\\\\\\\n      )\\\\\\\\n    } else if (sortBy === 'status_desc') {\\\\\\\\n      const sVal = (f: Feature) => STATUS_ORDER.indexOf(f.status)\\\\\\\\n      return arr.sort(\\\\\\\\n        (a, b) =>\\\\\\\\n          sVal(b) - sVal(a) ||\\\\\\\\n          (story ? story.featureIdToDisplayIndex[b.id] - story.featureIdToDisplayIndex[a.id] : 0),\\\\\\\\n      )\\\\\\\\n    }\\\\\\\\n    return arr\\\\\\\\n  }, [sortedFeaturesBase, sortBy, story])\\\\\\\\n\\\\\\\\n  const featuresFiltered = useMemo(() => {\\\\\\\\n    return featuresSorted.filter((f) => {\\\\\\\\n      const byStatus =\\\\\\\\n        statusFilter === 'all'\\\\\\\\n          ? true\\\\\\\\n          : statusFilter === 'not-done'\\\\\\\\n            ? f.status !== '+' || f.rejection\\\\\\\\n            : f.status === statusFilter\\\\\\\\n      return byStatus && featureMatchesQuery(f, query)\\\\\\\\n    })\\\\\\\\n  }, [featuresSorted, statusFilter, query])\\\\\\\\n\\\\\\\\n  const isSearchFiltered = query !== ''\\\\\\\\n\\\\\\\\n  const storyRun = useMemo(\\\\\\\\n    () => (story ? runsActive.find((r) => r.storyId === story!.id) : undefined),\\\\\\\\n    [story, runsActive],\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const handleEditStory = () => {\\\\\\\\n    if (!story) return\\\\\\\\n    openModal({ type: 'story-edit', storyId: story.id })\\\\\\\\n  }\\\\\\\\n  const handleAddFeature = () => {\\\\\\\\n    if (!story) return\\\\\\\\n    openModal({ type: 'feature-create', storyId: story.id })\\\\\\\\n  }\\\\\\\\n  const handleEditFeature = (featureId: string) => {\\\\\\\\n    if (!story) return\\\\\\\\n    openModal({ type: 'feature-edit', storyId: story.id, featureId })\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleStoryStatusChange = async (storyId: string, status: Status) => {\\\\\\\\n    try {\\\\\\\\n      await updateStory(storyId, { status })\\\\\\\\n    } catch (e) {\\\\\\\\n      console.error('Failed to update status', e)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  const handleFeatureStatusChange = async (storyId: string, featureId: string, status: Status) => {\\\\\\\\n    try {\\\\\\\\n      await updateFeature(storyId, featureId, { status })\\\\\\\\n    } catch (e) {\\\\\\\\n      console.error('Failed to update status', e)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Allow DnD for index sorting when only the special 'not-done' filter is active (no search)\\\\\\\\n  const dndEnabled =\\\\\\\\n    (sortBy === 'index_asc' || sortBy === 'index_desc') && !isSearchFiltered && !saving\\\\\\\\n\\\\\\\\n  const handleMoveFeature = async (fromIndex: number, toIndex: number) => {\\\\\\\\n    if (!story) return\\\\\\\\n    setSaving(true)\\\\\\\\n    try {\\\\\\\\n      await reorderFeatures(story.id, { fromIndex, toIndex })\\\\\\\\n    } catch (e: any) {\\\\\\\\n      alert(`Failed to reorder feature: ${e.message || e}`)\\\\\\\\n    } finally {\\\\\\\\n      setSaving(false)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const computeDropForRow = (e: React.DragEvent<HTMLElement>, idx: number) => {\\\\\\\\n    const rect = (e.currentTarget as HTMLElement).getBoundingClientRect()\\\\\\\\n    const offsetY = e.clientY - rect.top\\\\\\\\n    let pos: 'before' | 'after' | null = offsetY < rect.height / 2 ? 'before' : 'after'\\\\\\\\n    if (\\\\\\\\n      draggingIndex != null &&\\\\\\\\n      (idx == draggingIndex ||\\\\\\\\n        (idx == draggingIndex - 1 && pos == 'after') ||\\\\\\\\n        (idx == draggingIndex + 1 && pos == 'before'))\\\\\\\\n    ) {\\\\\\\\n      pos = null\\\\\\\\n    }\\\\\\\\n    setDropIndex(idx)\\\\\\\\n    setDropPosition(pos)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const clearDndState = () => {\\\\\\\\n    setDragFeatureId(null)\\\\\\\\n    setDragging(false)\\\\\\\\n    setDraggingIndex(null)\\\\\\\\n    setDropIndex(null)\\\\\\\\n    setDropPosition(null)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const onRowKeyDown = (e: React.KeyboardEvent<HTMLDivElement>, featureId: string) => {\\\\\\\\n    if (e.key === 'Enter') {\\\\\\\\n      e.preventDefault()\\\\\\\\n      handleEditFeature(featureId)\\\\\\\\n      return\\\\\\\\n    }\\\\\\\\n    if (e.key !== 'ArrowDown' && e.key !== 'ArrowUp') return\\\\\\\\n    e.preventDefault()\\\\\\\\n    const ul = ulRef.current\\\\\\\\n    if (!ul) return\\\\\\\\n    const rows = Array.from(ul.querySelectorAll('.feature-row'))\\\\\\\\n    const current = e.currentTarget\\\\\\\\n    const i = rows.indexOf(current)\\\\\\\\n    if (i === -1) return\\\\\\\\n    let nextIndex = i + (e.key === 'ArrowDown' ? 1 : -1)\\\\\\\\n    if (nextIndex < 0) nextIndex = 0\\\\\\\\n    if (nextIndex >= rows.length) nextIndex = rows.length - 1\\\\\\\\n    ;(rows[nextIndex] as HTMLElement).focus()\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const highlightFeatureId =\\\\\\\\n    storiesRoute.name === 'details' && storiesRoute.storyId === storyId\\\\\\\\n      ? storiesRoute.highlightFeatureId\\\\\\\\n      : undefined\\\\\\\\n  const highlightStoryFlag =\\\\\\\\n    storiesRoute.name === 'details' && storiesRoute.storyId === storyId\\\\\\\\n      ? storiesRoute.highlightStory\\\\\\\\n      : undefined\\\\\\\\n\\\\\\\\n  useEffect(() => {\\\\\\\\n    if (highlightFeatureId) {\\\\\\\\n      const row = document.querySelector(`.feature-row[data-feature-id=\\\\\\\\\\\\\\\"${highlightFeatureId}\\\\\\\\\\\\\\\"]`)\\\\\\\\n      if (row) {\\\\\\\\n        row.scrollIntoView({ block: 'center', behavior: 'smooth' })\\\\\\\\n        ;(row as HTMLElement).classList.add('highlighted')\\\\\\\\n        setTimeout(() => (row as HTMLElement).classList.remove('highlighted'), 2000)\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  }, [highlightFeatureId])\\\\\\\\n\\\\\\\\n  useEffect(() => {\\\\\\\\n    if (highlightStoryFlag) {\\\\\\\\n      const element = document.querySelector('.details-header')\\\\\\\\n      if (element) {\\\\\\\\n        element.scrollIntoView({ block: 'start', behavior: 'smooth' })\\\\\\\\n        ;(element as HTMLElement).classList.add('highlighted')\\\\\\\\n        setTimeout(() => (element as HTMLElement).classList.remove('highlighted'), 2000)\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  }, [highlightStoryFlag])\\\\\\\\n\\\\\\\\n  const onClickMerge = async () => {\\\\\\\\n    if (!story) return\\\\\\\\n    setMergeError(null)\\\\\\\\n    setMerging(true)\\\\\\\\n    try {\\\\\\\\n      const status = await gitMonitorService.getStatus()\\\\\\\\n      const base = status.currentBranch\\\\\\\\n      const branchName = `features/${story.id}`\\\\\\\\n      if (!base) throw new Error('No base branch detected')\\\\\\\\n      const res = await gitMonitorService.mergeBranch(branchName, base)\\\\\\\\n      if (!res.ok) throw new Error(res.error || 'Merge failed')\\\\\\\\n      // Refresh and update button state\\\\\\\\n      await gitMonitorService.triggerPoll()\\\\\\\\n      const check = await gitMonitorService.hasUnmerged(branchName, base)\\\\\\\\n      setHasUnmerged(!!check.ok && !!check.hasUnmerged)\\\\\\\\n    } catch (e: any) {\\\\\\\\n      setMergeError(e?.message || String(e))\\\\\\\\n    } finally {\\\\\\\\n      setMerging(false)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (!story) {\\\\\\\\n    return (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"story-details flex flex-col flex-1 min-h-0 w-full overflow-hidden\\\\\\\\\\\\\\\">\\\\\\\\n        <header className=\\\\\\\\\\\\\\\"details-header shrink-0\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"details-header__bar\\\\\\\\\\\\\\\">\\\\\\\\n            <Button\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn-secondary\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                navigateView('Home')\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              <IconBack className=\\\\\\\\\\\\\\\"w-4 h-4\\\\\\\\\\\\\\\" />\\\\\\\\n              <span className=\\\\\\\\\\\\\\\"sr-only\\\\\\\\\\\\\\\">Back to Stories</span>\\\\\\\\n            </Button>\\\\\\\\n            <h1 className=\\\\\\\\\\\\\\\"details-title\\\\\\\\\\\\\\\">Story {storyId}</h1>\\\\\\\\n          </div>\\\\\\\\n        </header>\\\\\\\\n        <main className=\\\\\\\\\\\\\\\"details-content flex-1 min-h-0 overflow-auto p-4\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"empty\\\\\\\\\\\\\\\">Story {storyId} not found.</div>\\\\\\\\n        </main>\\\\\\\\n      </div>\\\\\\\\n    )\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const onListDrop = () => {\\\\\\\\n    if (!story) {\\\\\\\\n      clearDndState()\\\\\\\\n      return\\\\\\\\n    }\\\\\\\\n    if (\\\\\\\\n      dragFeatureId != null &&\\\\\\\\n      draggingIndex != null &&\\\\\\\\n      dropIndex != null &&\\\\\\\\n      dropPosition != null\\\\\\\\n    ) {\\\\\\\\n      // Map from feature id/display index back to absolute indices within the story\\\\\\\\n      const fromIndex = (story.featureIdToDisplayIndex[dragFeatureId] ?? 1) - 1\\\\\\\\n      const targetFeature = featuresFiltered[dropIndex]\\\\\\\\n      if (!targetFeature) {\\\\\\\\n        clearDndState()\\\\\\\\n        return\\\\\\\\n      }\\\\\\\\n      let toIndex = (story.featureIdToDisplayIndex[targetFeature.id] ?? 1) - 1\\\\\\\\n      if (dropPosition === 'after') {\\\\\\\\n        toIndex = toIndex + 1\\\\\\\\n      }\\\\\\\\n      handleMoveFeature(fromIndex, toIndex)\\\\\\\\n    }\\\\\\\\n    clearDndState()\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const storyBlockers = getBlockers(story.id)\\\\\\\\n  const storyBlockersOutbound = getBlockersOutbound(story.id)\\\\\\\\n\\\\\\\\n  const storyHasActiveRun = !!storyRun\\\\\\\\n  const hasRejectedFeatures = story.features.filter((f) => !!f.rejection).length > 0\\\\\\\\n  const storyDisplayIndex = project?.storyIdToDisplayIndex[story.id] ?? 0\\\\\\\\n\\\\\\\\n  const currentFilterLabel =\\\\\\\\n    statusFilter === 'all'\\\\\\\\n      ? 'All'\\\\\\\\n      : statusFilter === 'not-done'\\\\\\\\n        ? 'Not done'\\\\\\\\n        : `${STATUS_LABELS[statusFilter as Status]}`\\\\\\\\n  const k =\\\\\\\\n    statusFilter === 'all'\\\\\\\\n      ? 'queued'\\\\\\\\n      : statusFilter === 'not-done'\\\\\\\\n        ? 'queued'\\\\\\\\n        : statusKey(statusFilter as Status)\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div className='flex flex-row flex-1 min-h-0 w-full'>\\\\\\\\n    <div\\\\\\\\n      className=\\\\\\\\\\\\\\\"story-details flex flex-col flex-1 min-h-0 w-full overflow-hidden\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"region\\\\\\\\\\\\\\\"\\\\\\\\n      aria-labelledby=\\\\\\\\\\\\\\\"story-details-heading\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <header className=\\\\\\\\\\\\\\\"details-header shrink-0\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"details-header__bar\\\\\\\\\\\\\\\">\\\\\\\\n          <Button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn-secondary w-9 \\\\\\\\\\\\\\\"\\\\\\\\n            onClick={() => {\\\\\\\\n              navigateView('Home')\\\\\\\\n            }}\\\\\\\\n            aria-label=\\\\\\\\\\\\\\\"Back to Stories\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            <IconBack className=\\\\\\\\\\\\\\\"w-4 h-4\\\\\\\\\\\\\\\" />\\\\\\\\n          </Button>\\\\\\\\n\\\\\\\\n          <div\\\\\\\\n            className=\\\\\\\\\\\\\\\"col col-id flex flex-col items-center gap-1\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ gridRow: '1 / 4', alignSelf: 'center' }}\\\\\\\\n          >\\\\\\\\n            {hasRejectedFeatures && (\\\\\\\\n              <ExclamationChip\\\\\\\\n                title={'One or more features were rejected'}\\\\\\\\n                tooltip=\\\\\\\\\\\\\\\"Has rejection reason\\\\\\\\\\\\\\\"\\\\\\\\n              />\\\\\\\\n            )}\\\\\\\\n            <span className=\\\\\\\\\\\\\\\"id-chip\\\\\\\\\\\\\\\">{storyDisplayIndex}</span>\\\\\\\\n            <StatusControl\\\\\\\\n              status={story.status}\\\\\\\\n              className=\\\\\\\\\\\\\\\"ml-2\\\\\\\\\\\\\\\"\\\\\\\\n              onChange={(next) => handleStoryStatusChange(story.id, next)}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n\\\\\\\\n          <h1 id=\\\\\\\\\\\\\\\"story-details-heading\\\\\\\\\\\\\\\" className=\\\\\\\\\\\\\\\"details-title\\\\\\\\\\\\\\\">\\\\\\\\n            <RichText text={story.title || `Story ${storyDisplayIndex}`} />\\\\\\\\n          </h1>\\\\\\\\n\\\\\\\\n          <div\\\\\\\\n            className=\\\\\\\\\\\\\\\"flex flex-col gap-2 ml-2\\\\\\\\\\\\\\\"\\\\\\\\n            aria-label={`Blockers for Story ${storyDisplayIndex}`}\\\\\\\\n          >\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"chips-list\\\\\\\\\\\\\\\">\\\\\\\\n              <span className=\\\\\\\\\\\\\\\"chips-sub__label\\\\\\\\\\\\\\\">Blockers</span>\\\\\\\\n              {storyBlockers.length === 0 ? (\\\\\\\\n                <span className=\\\\\\\\\\\\\\\"chips-sub__label\\\\\\\\\\\\\\\" title=\\\\\\\\\\\\\\\"No dependencies\\\\\\\\\\\\\\\">\\\\\\\\n                  None\\\\\\\\n                </span>\\\\\\\\n              ) : (\\\\\\\\n                storyBlockers.map((d) => <DependencyBullet key={d.id} dependency={d.id} />)\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"chips-list\\\\\\\\\\\\\\\">\\\\\\\\n              <span className=\\\\\\\\\\\\\\\"chips-sub__label\\\\\\\\\\\\\\\">Blocks</span>\\\\\\\\n              {storyBlockersOutbound.length === 0 ? (\\\\\\\\n                <span className=\\\\\\\\\\\\\\\"chips-sub__label\\\\\\\\\\\\\\\" title=\\\\\\\\\\\\\\\"No dependents\\\\\\\\\\\\\\\">\\\\\\\\n                  None\\\\\\\\n                </span>\\\\\\\\n              ) : (\\\\\\\\n                storyBlockersOutbound.map((d) => (\\\\\\\\n                  <DependencyBullet key={d.id} dependency={d.id} isOutbound />\\\\\\\\n                ))\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"spacer\\\\\\\\\\\\\\\" />\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"flex items-center gap-3\\\\\\\\\\\\\\\">\\\\\\\\n            <Button\\\\\\\\n                className='btn-secondary'\\\\\\\\n                onClick={() => setIsChatOpen(!isChatOpen)}\\\\\\\\n            >\\\\\\\\n                <IconChat className='w-4 h-4' />\\\\\\\\n                Chat\\\\\\\\n            </Button>\\\\\\\\n            <ModelChip editable />\\\\\\\\n            {/* Replace RunAgentButton space with AgentRunBullet when active */}\\\\\\\\n            <div className={`flex items-center ${storyHasActiveRun ? 'is-sticky-visible' : ''}`}>\\\\\\\\n              {storyRun ? (\\\\\\\\n                <AgentRunBullet\\\\\\\\n                  key={storyRun.id}\\\\\\\\n                  run={storyRun}\\\\\\\\n                  onClick={(e) => {\\\\\\\\n                    e.stopPropagation()\\\\\\\\n                    navigateAgentRun(storyRun.id)\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              ) : (\\\\\\\\n                <RunAgentButton\\\\\\\\n                  onClick={(agentType) => {\\\\\\\\n                    if (!projectId || storyHasActiveRun) return\\\\\\\\n                    startAgent(agentType, projectId, story.id)\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </header>\\\\\\\\n\\\\\\\\n      {/* Top toolbars similar to StoriesListView: search/filter/sort and count/add */}\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"stories-toolbar shrink-0\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"control search-wrapper\\\\\\\\\\\\\\\">\\\\\\\\n            <input\\\\\\\\n              type=\\\\\\\\\\\\\\\"search\\\\\\\\\\\\\\\"\\\\\\\\n              placeholder=\\\\\\\\\\\\\\\"Search by id, title, or description\\\\\\\\\\\\\\\"\\\\\\\\n              aria-label=\\\\\\\\\\\\\\\"Search features\\\\\\\\\\\\\\\"\\\\\\\\n              value={query}\\\\\\\\n              onChange={(e) => setQuery(e.target.value)}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"control\\\\\\\\\\\\\\\">\\\\\\\\n            <div\\\\\\\\n              ref={statusFilterRef}\\\\\\\\n              className=\\\\\\\\\\\\\\\"status-filter-btn ui-select gap-2\\\\\\\\\\\\\\\"\\\\\\\\n              role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              aria-haspopup=\\\\\\\\\\\\\\\"menu\\\\\\\\\\\\\\\"\\\\\\\\n              aria-expanded={openFilter}\\\\\\\\n              aria-label=\\\\\\\\\\\\\\\"Filter by status\\\\\\\\\\\\\\\"\\\\\\\\n              tabIndex={0}\\\\\\\\n              onClick={() => setOpenFilter(true)}\\\\\\\\n              onKeyDown={(e) => {\\\\\\\\n                if (e.key === 'Enter' || e.key === ' ') setOpenFilter(true)\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              <span className={`status-bullet status-bullet--${k}`} aria-hidden />\\\\\\\\n              <span className=\\\\\\\\\\\\\\\"standard-picker__label\\\\\\\\\\\\\\\">{currentFilterLabel}</span>\\\\\\\\n            </div>\\\\\\\\n            {openFilter && statusFilterRef.current && (\\\\\\\\n              <StatusPicker\\\\\\\\n                anchorEl={statusFilterRef.current}\\\\\\\\n                value={statusFilter}\\\\\\\\n                isAllAllowed={true}\\\\\\\\n                includeNotDone={true}\\\\\\\\n                onSelect={(val) => {\\\\\\\\n                  setStatusFilter(val as any)\\\\\\\\n                  setOpenFilter(false)\\\\\\\\n                }}\\\\\\\\n                onClose={() => setOpenFilter(false)}\\\\\\\\n              />\\\\\\\\n            )}\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"control\\\\\\\\\\\\\\\">\\\\\\\\n            <select\\\\\\\\n              className=\\\\\\\\\\\\\\\"ui-select\\\\\\\\\\\\\\\"\\\\\\\\n              value={sortBy}\\\\\\\\n              onChange={(e) => setSortBy(e.target.value as FeatureSort)}\\\\\\\\n              aria-label=\\\\\\\\\\\\\\\"Sort features by\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <option value=\\\\\\\\\\\\\\\"index_asc\\\\\\\\\\\\\\\">Ascending ↓</option>\\\\\\\\n              <option value=\\\\\\\\\\\\\\\"index_desc\\\\\\\\\\\\\\\">Descending ↑</option>\\\\\\\\n              <option value=\\\\\\\\\\\\\\\"status_asc\\\\\\\\\\\\\\\">Status ↓</option>\\\\\\\\n              <option value=\\\\\\\\\\\\\\\"status_desc\\\\\\\\\\\\\\\">Status ↑</option>\\\\\\\\n            </select>\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"right\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn-secondary btn-icon\\\\\\\\\\\\\\\"\\\\\\\\n            aria-label=\\\\\\\\\\\\\\\"Edit story\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={handleEditStory}\\\\\\\\n          >\\\\\\\\n            <IconEdit className=\\\\\\\\\\\\\\\"w-4 h-4\\\\\\\\\\\\\\\" />\\\\\\\\n          </button>\\\\\\\\n          <button\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-icon\\\\\\\\\\\\\\\"\\\\\\\\n            aria-label=\\\\\\\\\\\\\\\"Add feature\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={handleAddFeature}\\\\\\\\n          >\\\\\\\\n            <IconPlus className=\\\\\\\\\\\\\\\"w-4 h-4\\\\\\\\\\\\\\\" />\\\\\\\\n          </button>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <main className=\\\\\\\\\\\\\\\"details-content flex flex-col flex-1 min-h-0 overflow-hidden\\\\\\\\\\\\\\\">\\\\\\\\n        <section className=\\\\\\\\\\\\\\\"panel shrink-0\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"section-header\\\\\\\\\\\\\\\">\\\\\\\\n            <button\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              className=\\\\\\\\\\\\\\\"collapse-toggle btn-icon\\\\\\\\\\\\\\\"\\\\\\\\n              aria-expanded={isOverviewExpanded}\\\\\\\\n              aria-controls=\\\\\\\\\\\\\\\"overview-content\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => setIsOverviewExpanded((prev) => !prev)}\\\\\\\\n            >\\\\\\\\n              <IconChevron\\\\\\\\n                className={`w-4 h-4 icon-chevron ${isOverviewExpanded ? 'expanded' : ''}`}\\\\\\\\n              />\\\\\\\\n            </button>\\\\\\\\n            <h2 className=\\\\\\\\\\\\\\\"section-title\\\\\\\\\\\\\\\">Overview</h2>\\\\\\\\n          </div>\\\\\\\\n          <div\\\\\\\\n            id=\\\\\\\\\\\\\\\"overview-content\\\\\\\\\\\\\\\"\\\\\\\\n            className={`overview-content ${isOverviewExpanded ? 'expanded' : 'collapsed'}`}\\\\\\\\n          >\\\\\\\\n            <p className=\\\\\\\\\\\\\\\"story-desc\\\\\\\\\\\\\\\">\\\\\\\\n              <RichText text={story.description || 'No description provided.'} />\\\\\\\\n            </p>\\\\\\\\n          </div>\\\\\\\\n        </section>\\\\\\\\n\\\\\\\\n        <section className=\\\\\\\\\\\\\\\"panel flex flex-col flex-1 min-h-0\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"section-header shrink-0\\\\\\\\\\\\\\\">\\\\\\\\n            <h2 className=\\\\\\\\\\\\\\\"section-title\\\\\\\\\\\\\\\">Features</h2>\\\\\\\\n          </div>\\\\\\\\n\\\\\\\\n          {featuresFiltered.length === 0 ? (\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"flex-1 min-h-0 overflow-y-auto empty\\\\\\\\\\\\\\\">No features found.</div>\\\\\\\\n          ) : (\\\\\\\\n            <ul\\\\\\\\n              className={`flex-1 min-h-0 overflow-y-auto features-list ${dragging ? 'dnd-active' : ''}`}\\\\\\\\n              role=\\\\\\\\\\\\\\\"list\\\\\\\\\\\\\\\"\\\\\\\\n              aria-label=\\\\\\\\\\\\\\\"Features\\\\\\\\\\\\\\\"\\\\\\\\n              ref={ulRef}\\\\\\\\n              onDragOver={(e) => {\\\\\\\\n                if (dndEnabled) {\\\\\\\\n                  e.preventDefault()\\\\\\\\n                  e.dataTransfer.dropEffect = 'move'\\\\\\\\n                }\\\\\\\\n              }}\\\\\\\\n              onDrop={(e) => {\\\\\\\\n                if (!dndEnabled || !dragging) return\\\\\\\\n                e.preventDefault()\\\\\\\\n                preventDragFromNoDragRef.current = false\\\\\\\\n                onListDrop()\\\\\\\\n              }}\\\\\\\\n              onDragEnd={() => {\\\\\\\\n                preventDragFromNoDragRef.current = false\\\\\\\\n                clearDndState()\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {featuresFiltered.map((f: Feature, idx: number) => {\\\\\\\\n                const blockers = getBlockers(story.id, f.id)\\\\\\\\n                const blockersOutbound = getBlockersOutbound(f.id)\\\\\\\\n\\\\\\\\n                const isDragSource = dragFeatureId === f.id\\\\\\\\n                const isDropBefore = dragging && dropIndex === idx && dropPosition === 'before'\\\\\\\\n                const isDropAfter = dragging && dropIndex === idx && dropPosition === 'after'\\\\\\\\n\\\\\\\\n                const featureHasActiveRun = !!storyRun?.conversations.find(\\\\\\\\n                  (c) => c.featureId === f.id,\\\\\\\\n                )\\\\\\\\n\\\\\\\\n                return (\\\\\\\\n                  <li key={f.id} className=\\\\\\\\\\\\\\\"feature-item\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"listitem\\\\\\\\\\\\\\\">\\\\\\\\n                    {isDropBefore && <div className=\\\\\\\\\\\\\\\"drop-indicator\\\\\\\\\\\\\\\" aria-hidden=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"></div>}\\\\\\\\n                    <div\\\\\\\\n                      className={`feature-row ${dndEnabled ? 'draggable' : ''} ${isDragSource ? 'is-dragging' : ''} ${dragging && dropIndex === idx ? 'is-drop-target' : ''} ${f.id === highlightFeatureId ? 'highlighted' : ''}`}\\\\\\\\n                      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                      tabIndex={0}\\\\\\\\n                      data-index={idx}\\\\\\\\n                      data-feature-id={f.id}\\\\\\\\n                      draggable={dndEnabled}\\\\\\\\n                      aria-grabbed={isDragSource}\\\\\\\\n                      onPointerDownCapture={(e) => {\\\\\\\\n                        const t = e.target as HTMLElement | null\\\\\\\\n                        preventDragFromNoDragRef.current = !!(t && t.closest('.no-drag'))\\\\\\\\n                      }}\\\\\\\\n                      onPointerUpCapture={() => {\\\\\\\\n                        preventDragFromNoDragRef.current = false\\\\\\\\n                      }}\\\\\\\\n                      onDragStart={(e) => {\\\\\\\\n                        // If the initial pointer down started on a non-draggable UI (e.g., action buttons), block row drag\\\\\\\\n                        if (preventDragFromNoDragRef.current) {\\\\\\\\n                          e.preventDefault()\\\\\\\\n                          e.stopPropagation()\\\\\\\\n                          preventDragFromNoDragRef.current = false\\\\\\\\n                          return\\\\\\\\n                        }\\\\\\\\n                        if (!dndEnabled) return\\\\\\\\n                        // Fallback: if somehow target is within .no-drag, block as well\\\\\\\\n                        const target = e.target as HTMLElement | null\\\\\\\\n                        if (target && target.closest('.no-drag')) {\\\\\\\\n                          e.preventDefault()\\\\\\\\n                          e.stopPropagation()\\\\\\\\n                          return\\\\\\\\n                        }\\\\\\\\n                        setDragFeatureId(f.id)\\\\\\\\n                        setDragging(true)\\\\\\\\n                        setDraggingIndex(idx)\\\\\\\\n                        e.dataTransfer.setData('text/plain', String(f.id))\\\\\\\\n                        e.dataTransfer.effectAllowed = 'move'\\\\\\\\n                      }}\\\\\\\\n                      onDragOver={(e) => {\\\\\\\\n                        if (!dndEnabled) return\\\\\\\\n                        e.preventDefault()\\\\\\\\n                        computeDropForRow(e, idx)\\\\\\\\n                      }}\\\\\\\\n                      onKeyDown={(e) => onRowKeyDown(e, f.id)}\\\\\\\\n                      onClick={(e) => {\\\\\\\\n                        // Ignore clicks if we were dragging or if clicking on specific action areas\\\\\\\\n                        if (dragging) return\\\\\\\\n                        const t = e.target as HTMLElement | null\\\\\\\\n                        if (t && t.closest('.no-drag')) return\\\\\\\\n                        handleEditFeature(f.id)\\\\\\\\n                      }}\\\\\\\\n                      aria-label={`Feature ${f.id}: ${f.title}. Status ${STATUS_LABELS[f.status as Status] || f.status}. ${blockers.length} items this feature is blocked by, ${blockersOutbound.length} items this feature is blocking.  Press Enter to edit.`}\\\\\\\\n                    >\\\\\\\\n                      <div className=\\\\\\\\\\\\\\\"col col-id\\\\\\\\\\\\\\\">\\\\\\\\n                        <span className=\\\\\\\\\\\\\\\"id-chip\\\\\\\\\\\\\\\">{story.featureIdToDisplayIndex[f.id]}</span>\\\\\\\\n                        <StatusControl\\\\\\\\n                          status={f.status}\\\\\\\\n                          onChange={(next) => handleFeatureStatusChange(story.id, f.id, next)}\\\\\\\\n                        />\\\\\\\\n                        {featureHasActiveRun && storyRun && (\\\\\\\\n                          <div className=\\\\\\\\\\\\\\\"no-drag mt-1\\\\\\\\\\\\\\\">\\\\\\\\n                            <AgentRunBullet\\\\\\\\n                              key={storyRun.id}\\\\\\\\n                              run={storyRun}\\\\\\\\n                              onClick={(e) => {\\\\\\\\n                                e.stopPropagation()\\\\\\\\n                                navigateAgentRun(storyRun.id)\\\\\\\\n                              }}\\\\\\\\n                            />\\\\\\\\n                          </div>\\\\\\\\n                        )}\\\\\\\\n                        {f.rejection && (\\\\\\\\n                          <ExclamationChip title={f.rejection} tooltip=\\\\\\\\\\\\\\\"Has rejection reason\\\\\\\\\\\\\\\" />\\\\\\\\n                        )}\\\\\\\\n                      </div>\\\\\\\\n\\\\\\\\n                      <div className=\\\\\\\\\\\\\\\"col col-title\\\\\\\\\\\\\\\">\\\\\\\\n                        <span className=\\\\\\\\\\\\\\\"title-text\\\\\\\\\\\\\\\">\\\\\\\\n                          <RichText text={f.title || ''} />\\\\\\\\n                        </span>\\\\\\\\n                      </div>\\\\\\\\n                      <div className=\\\\\\\\\\\\\\\"col col-description\\\\\\\\\\\\\\\" title={f.description || ''}>\\\\\\\\n                        <RichText text={f.description || ''} />\\\\\\\\n                      </div>\\\\\\\\n                      <div\\\\\\\\n                        className={`col col-actions ${featureHasActiveRun ? 'is-sticky-visible' : ''}`}\\\\\\\\n                      >\\\\\\\\n                        {!storyHasActiveRun && (\\\\\\\\n                          <RunAgentButton\\\\\\\\n                            onClick={(agentType) => {\\\\\\\\n                              if (!projectId || storyHasActiveRun) return\\\\\\\\n                              startAgent(agentType, projectId, story.id, f.id)\\\\\\\\n                            }}\\\\\\\\n                          />\\\\\\\\n                        )}\\\\\\\\n                      </div>\\\\\\\\n\\\\\\\\n                      <div\\\\\\\\n                        style={{ gridRow: 3, gridColumn: 2 }}\\\\\\\\n                        className=\\\\\\\\\\\\\\\"flex items-center justify-between gap-8\\\\\\\\\\\\\\\"\\\\\\\\n                        aria-label={`Blockers and actions for Feature ${f.id}`}\\\\\\\\n                      >\\\\\\\\n                        <div className=\\\\\\\\\\\\\\\"flex gap-8\\\\\\\\\\\\\\\">\\\\\\\\n                          <div className=\\\\\\\\\\\\\\\"chips-list\\\\\\\\\\\\\\\">\\\\\\\\n                            <span className=\\\\\\\\\\\\\\\"chips-sub__label\\\\\\\\\\\\\\\">References</span>\\\\\\\\n                            {blockers.length === 0 ? (\\\\\\\\n                              <span className=\\\\\\\\\\\\\\\"chips-sub__label\\\\\\\\\\\\\\\" title=\\\\\\\\\\\\\\\"No dependencies\\\\\\\\\\\\\\\">\\\\\\\\n                                None\\\\\\\\n                              </span>\\\\\\\\n                            ) : (\\\\\\\\n                              blockers.map((d) => <DependencyBullet key={d.id} dependency={d.id} />)\\\\\\\\n                            )}\\\\\\\\n                          </div>\\\\\\\\n                          <div className=\\\\\\\\\\\\\\\"chips-list\\\\\\\\\\\\\\\">\\\\\\\\n                            <span className=\\\\\\\\\\\\\\\"chips-sub__label\\\\\\\\\\\\\\\">Blocks</span>\\\\\\\\n                            {blockersOutbound.length === 0 ? (\\\\\\\\n                              <span className=\\\\\\\\\\\\\\\"chips-sub__label\\\\\\\\\\\\\\\" title=\\\\\\\\\\\\\\\"No dependents\\\\\\\\\\\\\\\">\\\\\\\\n                                None\\\\\\\\n                              </span>\\\\\\\\n                            ) : (\\\\\\\\n                              blockersOutbound.map((d) => (\\\\\\\\n                                <DependencyBullet key={d.id} dependency={d.id} isOutbound />\\\\\\\\n                              ))\\\\\\\\n                            )}\\\\\\\\n                          </div>\\\\\\\\n                        </div>\\\\\\\\n                        <div className=\\\\\\\\\\\\\\\"flex items-center gap-3 pr-2\\\\\\\\\\\\\\\">\\\\\\\\n                          {/* AgentRunBullet for features is now rendered in the actions column to replace the RunAgentButton when active */}\\\\\\\\n                        </div>\\\\\\\\n                      </div>\\\\\\\\n                    </div>\\\\\\\\n                    {isDropAfter && <div className=\\\\\\\\\\\\\\\"drop-indicator\\\\\\\\\\\\\\\" aria-hidden=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"></div>}\\\\\\\\n                  </li>\\\\\\\\n                )\\\\\\\\n              })}\\\\\\\\n            </ul>\\\\\\\\n          )}\\\\\\\\n        </section>\\\\\\\\n      </main>\\\\\\\\n\\\\\\\\n      {saving && (\\\\\\\\n        <div\\\\\\\\n          className=\\\\\\\\\\\\\\\"saving-indicator\\\\\\\\\\\\\\\"\\\\\\\\n          aria-live=\\\\\\\\\\\\\\\"polite\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ position: 'fixed', bottom: 12, right: 16 }}\\\\\\\\n        >\\\\\\\\n          Reordering…\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n    {isChatOpen && (\\\\\\\\n        <div className='chat-sidebar-placeholder'></div>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\"}}}],\\\\\\\"model_name\\\\\\\":\\\\\\\"claude-3-5-sonnet-20240620\\\\\\\",\\\\\\\"model_cost\\\\\\\":0.08882400000000001}\\\"}\\n    at runConversation (/Users/cloud/Documents/Work/overseer-local/.vite/build/main-BdLJcd3y.js:14019:15)\\n    at async runAgentOnFeature (/Users/cloud/Documents/Work/overseer-local/.vite/build/main-BdLJcd3y.js:14144:3)\\n    at async runOrchestrator (/Users/cloud/Documents/Work/overseer-local/.vite/build/main-BdLJcd3y.js:14207:5)\\n    at async runIsolatedOrchestrator (/Users/cloud/Documents/Work/overseer-local/.vite/build/main-BdLJcd3y.js:14239:5)\\n    at async /Users/cloud/Documents/Work/overseer-local/.vite/build/main-BdLJcd3y.js:13842:9\"}"
    },
    {
      "id": "09df5d7d-5d5b-4681-8ac2-2b903cd6dcb6",
      "status": "-",
      "title": "Implement LLM Communication for the Chat Sidebar",
      "description": "Connect the `ChatSidebar` to an LLM service. When a user sends a message, it should be sent to the LLM along with the chat history and the context-specific prompt. The LLM's response should then be displayed in the chat and saved to the history. This may involve adapting existing logic from @src/renderer/screens/ChatView.tsx or `thefactory-tools`.",
      "context": [
        "src/renderer/screens/ChatView.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.806Z",
      "updatedAt": "2025-09-24T17:55:41.890Z",
      "blockers": []
    },
    {
      "id": "91e943ca-515b-4ee4-a44d-cdcff61cc379",
      "status": "-",
      "title": "Create and Load Context-Specific System Prompts for Chats",
      "description": "Implement a mechanism to generate and provide a unique system prompt for each chat context (Project, Story, Feature, Tests, Agents). When a new chat is initiated, the appropriate prompt, containing relevant information about the context, should be used as the first message from the system.",
      "context": [],
      "createdAt": "2025-09-24T17:18:35.806Z",
      "updatedAt": "2025-09-24T17:18:35.806Z"
    },
    {
      "id": "02b401c9-5219-48ee-8fca-174c6702ff2f",
      "status": "-",
      "title": "Add a Chat Button and Sidebar to StoriesListView",
      "description": "Integrate the `ChatSidebar` into the @src/renderer/stories/StoriesListView.tsx . Add a \"Chat\" button to the view's header. This chat will be for the entire project context. Wire it up to use the Chat Storage Service with the `projectId`.",
      "context": [
        "src/renderer/stories/StoriesListView.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.807Z",
      "updatedAt": "2025-09-24T17:56:00.550Z",
      "blockers": []
    },
    {
      "id": "ba16d671-5c40-496f-b887-7c9d94694711",
      "status": "-",
      "title": "Add Chat Functionality to Story and Feature Edit Modals",
      "description": "Add a \"Chat\" button to the header of the story and feature creation/editing modals. Clicking the button will open the `ChatSidebar` to the right of the modal content. The chat context will be the specific story or feature being edited.",
      "context": [],
      "createdAt": "2025-09-24T17:18:35.807Z",
      "updatedAt": "2025-09-24T17:18:35.807Z"
    },
    {
      "id": "860c56c9-61e0-476f-8459-f7ccc4838ef3",
      "status": "-",
      "title": "Add Project-Level Chat Sidebars to Tests and Agents Views",
      "description": "Add a \"Chat\" button and the `ChatSidebar` to the @src/renderer/screens/TestsView.tsx and the @src/renderer/screens/AgentsView.tsx . The chat context for the @src/renderer/screens/TestsView.tsx  will be the project's tests, and for the @src/renderer/screens/AgentsView.tsx it will be the project's agents. Use the file paths `.factory/chats/projectId/tests.json` and `.factory/chats/projectId/agents.json` respectively.",
      "context": [
        "src/renderer/screens/TestsView.tsx",
        "src/renderer/screens/AgentsView.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.808Z",
      "updatedAt": "2025-09-24T17:56:52.164Z",
      "blockers": []
    },
    {
      "id": "ad2a21e1-d63e-43a4-b0d9-14faff1aa5ef",
      "status": "-",
      "title": "Implement Persistence for Chat Settings",
      "description": "Store the user-selected settings (model, tool configuration, auto-approve) for each chat context. The settings should be saved alongside the chat messages in the corresponding JSON file and reloaded when the user re-opens the chat.",
      "context": [],
      "createdAt": "2025-09-24T17:18:35.808Z",
      "updatedAt": "2025-09-24T17:18:35.808Z"
    },
    {
      "id": "441f4d8d-3daf-4a37-b18d-16a08b5b7992",
      "status": "+",
      "title": "Unify Chat Experience by Refactoring ChatView",
      "description": "Update the existing @src/renderer/screens/ChatView.tsx to use the newly created reusable chat component(s) from the `ChatSidebar`. This will ensure a consistent look, feel, and functionality for all chat interfaces across the application.",
      "context": [
        "src/renderer/screens/ChatView.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.808Z",
      "updatedAt": "2025-09-24T22:02:58.670Z",
      "blockers": [],
      "completedAt": "2025-09-24T22:02:58.670Z"
    }
  ],
  "featureIdToDisplayIndex": {
    "e2d1d322-7e72-49ad-9f8f-f7d6f4437c5b": 1,
    "8515f4d8-c436-4780-a5cc-7c3106e1efd3": 2,
    "441f4d8d-3daf-4a37-b18d-16a08b5b7992": 3,
    "856ac3c4-91d3-48f4-9a9f-f38260a3f9a7": 4,
    "bfe7399a-4e44-4455-b2f9-dd4ec412dde3": 5,
    "09df5d7d-5d5b-4681-8ac2-2b903cd6dcb6": 6,
    "91e943ca-515b-4ee4-a44d-cdcff61cc379": 7,
    "02b401c9-5219-48ee-8fca-174c6702ff2f": 8,
    "ba16d671-5c40-496f-b887-7c9d94694711": 9,
    "860c56c9-61e0-476f-8459-f7ccc4838ef3": 10,
    "ad2a21e1-d63e-43a4-b0d9-14faff1aa5ef": 11
  },
  "createdAt": "2025-09-18T23:01:33.481Z",
  "updatedAt": "2025-09-24T17:17:30.489Z"
}