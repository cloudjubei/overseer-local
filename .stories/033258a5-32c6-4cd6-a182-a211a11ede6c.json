{
  "id": "033258a5-32c6-4cd6-a182-a211a11ede6c",
  "status": "?",
  "title": "Better Chats with AI everywhere",
  "description": "We want the user to be able to have a conversation with an LLM about a given context in many places in the app. First, where do we want the user's to have chats available:\n- when editing or creating a story, there needs to be a chat button (at the top next to the close button) that will open the chat interface (in a sidebar to the right of the popup) \n- similarly, when editing or creating a feature\n- inside StoryDetailsView there needs to be a chat button (at the top next to the run agent button) that will open a sidebar (on the right) that will allow the user to talk about the given Story and its features.\n- inside StoriesListView there needs to be a chat button (at the top next to the run agent button) that will open a chat about the current project and its stories and features.\n- following StoryDetailsView and StoriesListView and opening the chat interface in a sidebar to the right, we need a chat button on other screens that will do a similar thing, we need it in Tests and Agents.\n\nSecond, each chat is tied to a particular context and must be stored so that whenever the user comes back to the screen where that chat should be shown - the messages history must be resumed. Thus, the contexts are a specific Feature, a specific Story, a specific ProjectSpec, a ProjectSpec's tests and ProjectSpec's Agents. Essentially all these contexts must store appropriate chats somewhere under `.factory/chats` so that they can be easily retrieved via ids. We need `.factory/chats/projectId.json` to be the chat for a specific project, `.factory/chats/projectId/storyId.json` to be the chat for a specific story, `.factory/chats/projectId/storyId/featureId.json` to be the chat for a specific feature, `.factory/chats/projectId/tests.json` to be the chat for a project's tests, `.factory/chats/projectId/agents.json` to be the chat for a project's agents.\nEach one of these chats for the different contexts needs to have a different prompt that will come loaded with different information relevant to the context.\n\nThis chat interface should be unified and feel familiar across the different projects, the user simply should have an indicator of what context they are in. In this interface the user must be able to choose some settings for that particular context (stored as an app wide setting) - allowing the agent to use certain tools and others not. Choosing the model (similar to how ChatView already does it). Allowing the agent to auto call tools or require user confirmation.\nThis UI needs to be used anywhere where chats are used (so ChatView needs to benefit from these improvements too).",
  "features": [
    {
      "id": "e2d1d322-7e72-49ad-9f8f-f7d6f4437c5b",
      "status": "+",
      "title": "Update ChatsManager, ChatsStorage and chatsService",
      "description": "@src/chat/ChatsManager.ts , @src/chat/ChatsStorage.js and @src/renderer/services/chatsService.ts  already handle storing chats and doing things with them - augment them to handle the requirements for this task - i.e. storing/retrieving contextual chats as well as the settings for them",
      "context": [
        "src/chat/ChatsManager.ts",
        "src/chat/ChatsStorage.js",
        "src/renderer/services/chatsService.ts"
      ],
      "createdAt": "2025-09-24T17:18:35.800Z",
      "updatedAt": "2025-09-25T09:04:29.240Z",
      "blockers": [],
      "completedAt": "2025-09-25T09:04:29.240Z"
    },
    {
      "id": "8515f4d8-c436-4780-a5cc-7c3106e1efd3",
      "status": "-",
      "title": "Develop a Reusable Chat Sidebar React Component",
      "description": "Create a new React component, @src/renderer/components/Chat/ChatSidebar.tsx , responsible for rendering a chat interface. This component will display a list of messages, a user input field with a send button, and the current chat context (e.g., \"Chatting about Story: 'User Login'\"). It should be a presentational component that receives its state and callbacks via props.\nThere already is an interface in @src/renderer/screens/ChatView.tsx that should be extracted/consolidated into this reusable one to be used by this Story.",
      "context": [
        "src/renderer/screens/ChatView.tsx",
        "src/renderer/components/Chat/ContextualChatSidebar.tsx",
        "src/renderer/contexts/ChatsContext.tsx",
        "src/renderer/components/Chat/ChatSidebar.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.801Z",
      "updatedAt": "2025-09-25T11:17:58.833Z",
      "blockers": [],
      "rejection": "During the last developer run\n@src/renderer/components/Chat/ContextualChatSidebar.tsx was created which should be merged with @src/renderer/components/Chat/ChatSidebar.tsx - as all chats require a context. The ChatSidebar needs to correctly use info provided by @src/renderer/contexts/ChatsContext.tsx"
    },
    {
      "id": "856ac3c4-91d3-48f4-9a9f-f38260a3f9a7",
      "status": "+",
      "title": "Add Chat Settings Controls to the Chat Sidebar",
      "description": "Enhance the @src/renderer/components/Chat/ContextualChatSidebar.tsx   component to include UI controls for chat settings. This includes a model selector dropdown, a mechanism for enabling/disabling tools, and a toggle for the agent's tool auto-approval. These settings will be passed in as props and will trigger callbacks when changed. Use @src/renderer/contexts/ChatsContext.tsx to modify the settings",
      "context": [
        "src/renderer/components/Chat/ContextualChatSidebar.tsx",
        "src/renderer/contexts/ChatsContext.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.803Z",
      "updatedAt": "2025-09-25T11:09:30.603Z",
      "blockers": [],
      "completedAt": "2025-09-25T11:09:30.603Z"
    },
    {
      "id": "bfe7399a-4e44-4455-b2f9-dd4ec412dde3",
      "status": "-",
      "title": "Add a Chat Button and Sidebar to StoryDetailsView",
      "description": "Integrate the `ChatSidebar` into the @src/renderer/stories/StoryDetailsView.tsx . Add a \"Chat\" button to the view's header. Clicking this button will toggle the visibility of the @src/renderer/components/Chat/ChatSidebar.tsx . Wire up the sidebar to the Chat Storage Service to load and save the chat history for the currently viewed story, using the `projectId` and `storyId` as context.",
      "context": [
        "src/renderer/stories/StoryDetailsView.tsx",
        "src/renderer/components/Chat/ChatSidebar.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.805Z",
      "updatedAt": "2025-09-25T11:18:47.303Z",
      "blockers": []
    },
    {
      "id": "09df5d7d-5d5b-4681-8ac2-2b903cd6dcb6",
      "status": "+",
      "title": "Implement LLM Communication for the Chat Sidebar",
      "description": "Connect the `ChatSidebar` to an LLM service. When a user sends a message, it should be sent to the LLM along with the chat history and the context-specific prompt. The LLM's response should then be displayed in the chat and saved to the history. This may involve adapting existing logic from @src/renderer/screens/ChatView.tsx or `thefactory-tools`.",
      "context": [
        "src/renderer/screens/ChatView.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.806Z",
      "updatedAt": "2025-09-24T22:08:46.852Z",
      "blockers": [],
      "completedAt": "2025-09-24T22:08:46.852Z"
    },
    {
      "id": "91e943ca-515b-4ee4-a44d-cdcff61cc379",
      "status": "+",
      "title": "Create and Load Context-Specific System Prompts for Chats",
      "description": "Implement a mechanism to generate and provide a unique system prompt for each chat context (Project, Story, Feature, Tests, Agents). When a new chat is initiated, the appropriate prompt, containing relevant information about the context, should be used as the first message from the system.\nThe user must be able to see these system prompts and edit them for future cases. There should be an option to go back to the default one always.\nThis means that @src/chat/ChatsManager.ts and @src/chat/ChatsStorage.ts and @src/renderer/services/chatsService.ts needs to be updated to hold information about the current prompts. There probably needs to be a sub-service for handling all sorts of prompts used by the application.",
      "context": [
        "src/chat/ChatsManager.ts",
        "src/chat/ChatsStorage.ts",
        "src/renderer/services/chatsService.ts"
      ],
      "createdAt": "2025-09-24T17:18:35.806Z",
      "updatedAt": "2025-09-25T09:07:46.534Z",
      "blockers": [],
      "completedAt": "2025-09-25T09:07:46.534Z"
    },
    {
      "id": "02b401c9-5219-48ee-8fca-174c6702ff2f",
      "status": "-",
      "title": "Add a Chat Button and Sidebar to StoriesListView",
      "description": "Integrate the @src/renderer/components/Chat/ChatSidebar.tsx  into the @src/renderer/stories/StoriesListView.tsx . Add a \"Chat\" button to the view's header. This chat will be for the entire project context. Wire it up to use the Chat Storage Service with the `projectId`.",
      "context": [
        "src/renderer/stories/StoriesListView.tsx",
        "src/renderer/components/Chat/ChatSidebar.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.807Z",
      "updatedAt": "2025-09-25T11:19:01.080Z",
      "blockers": []
    },
    {
      "id": "ba16d671-5c40-496f-b887-7c9d94694711",
      "status": "-",
      "title": "Add Chat Functionality to Story and Feature Edit Modals",
      "description": "Add a \"Chat\" button to the header of the story and feature creation/editing modals. Clicking the button will open the @src/renderer/components/Chat/ChatSidebar.tsx  to the right of the modal content. The chat context will be the specific story or feature being edited.",
      "context": [
        "src/renderer/components/Chat/ChatSidebar.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.807Z",
      "updatedAt": "2025-09-25T11:18:18.887Z",
      "rejection": "Make it use an icon instead of text. When opening closing - have it do so with a nice animation.\nThe chat must be scrollable and resizable in terms of width up to a certain amount.\nWhen opening - it shouldn't discard changes the user has in the Form input.",
      "blockers": []
    },
    {
      "id": "860c56c9-61e0-476f-8459-f7ccc4838ef3",
      "status": "-",
      "title": "Add Project-Level Chat Sidebars to Tests and Agents Views",
      "description": "Add a \"Chat\" button and the `ChatSidebar` to the @src/renderer/screens/TestsView.tsx and the @src/renderer/screens/AgentsView.tsx . The chat context for the @src/renderer/screens/TestsView.tsx  will be the project's tests, and for the @src/renderer/screens/AgentsView.tsx it will be the project's agents. Use the file paths `.factory/chats/projectId/tests.json` and `.factory/chats/projectId/agents.json` respectively.",
      "context": [
        "src/renderer/screens/TestsView.tsx",
        "src/renderer/screens/AgentsView.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.808Z",
      "updatedAt": "2025-09-25T09:42:05.783Z",
      "blockers": [],
      "rejection": "@src/renderer/screens/AgentsView.tsx still needs the button"
    },
    {
      "id": "ad2a21e1-d63e-43a4-b0d9-14faff1aa5ef",
      "status": "+",
      "title": "Implement Persistence for Chat Settings",
      "description": "Store the user-selected settings (model, tool configuration, auto-approve) for each chat context. The settings should be saved alongside the chat messages in the corresponding JSON file and reloaded when the user re-opens the chat.\nAugment @src/chat/ChatsManager.ts , @src/chat/ChatsStorage.ts , @src/renderer/services/chatsService.ts and @src/renderer/contexts/ChatsContext.tsx to allow modifying these setetings",
      "context": [
        "src/chat/ChatsManager.ts",
        "src/chat/ChatsStorage.ts",
        "src/renderer/services/chatsService.ts",
        "src/renderer/contexts/ChatsContext.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.808Z",
      "updatedAt": "2025-09-25T11:06:43.320Z",
      "blockers": [],
      "completedAt": "2025-09-25T11:06:43.320Z"
    },
    {
      "id": "441f4d8d-3daf-4a37-b18d-16a08b5b7992",
      "status": "+",
      "title": "Unify Chat Experience by Refactoring ChatView",
      "description": "Update the existing @src/renderer/screens/ChatView.tsx to use the newly created reusable chat component(s) from the `ChatSidebar`. This will ensure a consistent look, feel, and functionality for all chat interfaces across the application.",
      "context": [
        "src/renderer/screens/ChatView.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.808Z",
      "updatedAt": "2025-09-24T22:02:58.670Z",
      "blockers": [],
      "completedAt": "2025-09-24T22:02:58.670Z"
    },
    {
      "id": "92ea6113-9709-4f89-9e62-24a5c7c5b4ee",
      "status": "?",
      "title": "The input box needs improving",
      "description": "In the @src/renderer/components/Chat/ChatInput.tsx the send button should be an icon -  create one in @src/renderer/components/ui/Icons.tsx . There should also be an appropriate icon for the Attach button.\nBoth of the buttons should be part of the input view (in the footer with the hints) so that it can take as much space horizontally as possible with just a little bit of padding. The input box should only grow to 30% of the total chat view - no matter where it is used.",
      "context": [
        "src/renderer/components/Chat/ChatInput.tsx",
        "src/renderer/components/ui/Icons.tsx"
      ],
      "blockers": [],
      "createdAt": "2025-09-25T00:42:13.695Z",
      "updatedAt": "2025-09-25T09:19:57.441Z"
    },
    {
      "id": "e30f1aae-50de-416d-8f67-05c6f7687590",
      "status": "?",
      "title": "Create speccer chat",
      "description": "",
      "context": [],
      "blockers": [],
      "createdAt": "2025-09-25T00:49:25.269Z",
      "updatedAt": "2025-09-25T00:49:25.269Z"
    },
    {
      "id": "57d3f1bc-ccd0-4101-873c-4c3758c5fa5a",
      "status": "+",
      "title": "Create a chatsContext",
      "description": "Instead of @src/renderer/hooks/useChats.tsx there should be a @src/renderer/contexts/ChatsContext.tsx  that follows the same patterns as @src/renderer/contexts/ProjectContext.tsx or @src/renderer/contexts/FilesContext.tsx .\n@src/renderer/contexts/ChatsContext.tsx needs to be the interface for using @src/renderer/services/chatsService.ts (just like the other contexts use their services).",
      "context": [
        "src/renderer/hooks/useChats.tsx",
        "src/renderer/contexts/ProjectContext.tsx",
        "src/renderer/contexts/FilesContext.tsx",
        "src/renderer/contexts/ChatsContext.tsx",
        "src/renderer/services/chatsService.ts"
      ],
      "blockers": [],
      "createdAt": "2025-09-25T09:17:18.893Z",
      "updatedAt": "2025-09-25T11:21:57.619Z",
      "rejection": "@src/renderer/contexts/ChatsContext.tsx needs to be updated to serve the chats now based on context. All legacy code or needs should be ignored/removed - all chats should now require a context.",
      "completedAt": "2025-09-25T11:21:57.619Z"
    }
  ],
  "featureIdToDisplayIndex": {
    "57d3f1bc-ccd0-4101-873c-4c3758c5fa5a": 1,
    "ad2a21e1-d63e-43a4-b0d9-14faff1aa5ef": 2,
    "8515f4d8-c436-4780-a5cc-7c3106e1efd3": 3,
    "441f4d8d-3daf-4a37-b18d-16a08b5b7992": 4,
    "09df5d7d-5d5b-4681-8ac2-2b903cd6dcb6": 5,
    "e2d1d322-7e72-49ad-9f8f-f7d6f4437c5b": 6,
    "91e943ca-515b-4ee4-a44d-cdcff61cc379": 7,
    "856ac3c4-91d3-48f4-9a9f-f38260a3f9a7": 8,
    "bfe7399a-4e44-4455-b2f9-dd4ec412dde3": 9,
    "02b401c9-5219-48ee-8fca-174c6702ff2f": 10,
    "ba16d671-5c40-496f-b887-7c9d94694711": 11,
    "860c56c9-61e0-476f-8459-f7ccc4838ef3": 12,
    "92ea6113-9709-4f89-9e62-24a5c7c5b4ee": 13,
    "e30f1aae-50de-416d-8f67-05c6f7687590": 14
  },
  "createdAt": "2025-09-18T23:01:33.481Z",
  "updatedAt": "2025-09-24T17:17:30.489Z"
}