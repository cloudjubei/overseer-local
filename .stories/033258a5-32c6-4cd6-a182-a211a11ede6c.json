{
  "id": "033258a5-32c6-4cd6-a182-a211a11ede6c",
  "status": "?",
  "title": "Better Chats with AI everywhere",
  "description": "We want the user to be able to have a conversation with an LLM about a given context in many places in the app. First, where do we want the user's to have chats available:\n- when editing or creating a story, there needs to be a chat button (at the top next to the close button) that will open the chat interface (in a sidebar to the right of the popup) \n- similarly, when editing or creating a feature\n- inside StoryDetailsView there needs to be a chat button (at the top next to the run agent button) that will open a sidebar (on the right) that will allow the user to talk about the given Story and its features.\n- inside StoriesListView there needs to be a chat button (at the top next to the run agent button) that will open a chat about the current project and its stories and features.\n- following StoryDetailsView and StoriesListView and opening the chat interface in a sidebar to the right, we need a chat button on other screens that will do a similar thing, we need it in Tests and Agents.\n\nSecond, each chat is tied to a particular context and must be stored so that whenever the user comes back to the screen where that chat should be shown - the messages history must be resumed. Thus, the contexts are a specific Feature, a specific Story, a specific ProjectSpec, a ProjectSpec's tests and ProjectSpec's Agents. Essentially all these contexts must store appropriate chats somewhere under `.factory/chats` so that they can be easily retrieved via ids. We need `.factory/chats/projectId.json` to be the chat for a specific project, `.factory/chats/projectId/storyId.json` to be the chat for a specific story, `.factory/chats/projectId/storyId/featureId.json` to be the chat for a specific feature, `.factory/chats/projectId/tests.json` to be the chat for a project's tests, `.factory/chats/projectId/agents.json` to be the chat for a project's agents.\nEach one of these chats for the different contexts needs to have a different prompt that will come loaded with different information relevant to the context.\n\nThis chat interface should be unified and feel familiar across the different projects, the user simply should have an indicator of what context they are in. In this interface the user must be able to choose some settings for that particular context (stored as an app wide setting) - allowing the agent to use certain tools and others not. Choosing the model (similar to how ChatView already does it). Allowing the agent to auto call tools or require user confirmation.\nThis UI needs to be used anywhere where chats are used (so ChatView needs to benefit from these improvements too).",
  "features": [
    {
      "id": "e2d1d322-7e72-49ad-9f8f-f7d6f4437c5b",
      "status": "+",
      "title": "Update ChatsManager, ChatsStorage and chatsService",
      "description": "@src/chat/ChatsManager.ts , @src/chat/ChatsStorage.js and @src/renderer/services/chatsService.ts  already handle storing chats and doing things with them - augment them to handle the requirements for this task - i.e. storing/retrieving contextual chats as well as the settings for them",
      "context": [
        "src/chat/ChatsManager.ts",
        "src/chat/ChatsStorage.js",
        "src/renderer/services/chatsService.ts"
      ],
      "createdAt": "2025-09-24T17:18:35.800Z",
      "updatedAt": "2025-09-25T09:04:29.240Z",
      "blockers": [],
      "completedAt": "2025-09-25T09:04:29.240Z"
    },
    {
      "id": "8515f4d8-c436-4780-a5cc-7c3106e1efd3",
      "status": "+",
      "title": "Develop a Reusable Chat Sidebar React Component",
      "description": "Create a new React component, @src/renderer/components/Chat/ChatSidebar.tsx , responsible for rendering a chat interface. This component will display a list of messages, a user input field with a send button, and the current chat context (e.g., \"Chatting about Story: 'User Login'\"). It should be a presentational component that receives its state and callbacks via props.\nThere already is an interface in @src/renderer/screens/ChatView.tsx that should be extracted/consolidated into this reusable one to be used by this Story.",
      "context": [
        "src/renderer/screens/ChatView.tsx",
        "src/renderer/components/Chat/ChatSidebar.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.801Z",
      "updatedAt": "2025-09-25T13:22:24.146Z",
      "blockers": [],
      "completedAt": "2025-09-25T13:03:07.604Z"
    },
    {
      "id": "856ac3c4-91d3-48f4-9a9f-f38260a3f9a7",
      "status": "+",
      "title": "Add Chat Settings Controls to the Chat Sidebar",
      "description": "Enhance the @src/renderer/components/Chat/ContextualChatSidebar.tsx   component to include UI controls for chat settings. This includes a model selector dropdown, a mechanism for enabling/disabling tools, and a toggle for the agent's tool auto-approval. These settings will be passed in as props and will trigger callbacks when changed. Use @src/renderer/contexts/ChatsContext.tsx to modify the settings",
      "context": [
        "src/renderer/components/Chat/ContextualChatSidebar.tsx",
        "src/renderer/contexts/ChatsContext.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.803Z",
      "updatedAt": "2025-09-25T11:09:30.603Z",
      "blockers": [],
      "completedAt": "2025-09-25T11:09:30.603Z"
    },
    {
      "id": "bfe7399a-4e44-4455-b2f9-dd4ec412dde3",
      "status": "+",
      "title": "Add a Chat Button and Sidebar to StoryDetailsView",
      "description": "Integrate the `ChatSidebar` into the @src/renderer/stories/StoryDetailsView.tsx . Add a \"Chat\" button to the view's header. Clicking this button will toggle the visibility of the @src/renderer/components/Chat/ChatSidebar.tsx . Wire up the sidebar to the Chat Storage Service to load and save the chat history for the currently viewed story, using the `projectId` and `storyId` as context.",
      "context": [
        "src/renderer/stories/StoryDetailsView.tsx",
        "src/renderer/components/Chat/ChatSidebar.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.805Z",
      "updatedAt": "2025-09-25T11:29:58.947Z",
      "blockers": [],
      "completedAt": "2025-09-25T11:29:58.947Z"
    },
    {
      "id": "09df5d7d-5d5b-4681-8ac2-2b903cd6dcb6",
      "status": "+",
      "title": "Implement LLM Communication for the Chat Sidebar",
      "description": "Connect the `ChatSidebar` to an LLM service. When a user sends a message, it should be sent to the LLM along with the chat history and the context-specific prompt. The LLM's response should then be displayed in the chat and saved to the history. This may involve adapting existing logic from @src/renderer/screens/ChatView.tsx or `thefactory-tools`.",
      "context": [
        "src/renderer/screens/ChatView.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.806Z",
      "updatedAt": "2025-09-24T22:08:46.852Z",
      "blockers": [],
      "completedAt": "2025-09-24T22:08:46.852Z"
    },
    {
      "id": "91e943ca-515b-4ee4-a44d-cdcff61cc379",
      "status": "+",
      "title": "Create and Load Context-Specific System Prompts for Chats",
      "description": "Implement a mechanism to generate and provide a unique system prompt for each chat context (Project, Story, Feature, Tests, Agents). When a new chat is initiated, the appropriate prompt, containing relevant information about the context, should be used as the first message from the system.\nThe user must be able to see these system prompts and edit them for future cases. There should be an option to go back to the default one always.\nThis means that @src/chat/ChatsManager.ts and @src/chat/ChatsStorage.ts and @src/renderer/services/chatsService.ts needs to be updated to hold information about the current prompts. There probably needs to be a sub-service for handling all sorts of prompts used by the application.",
      "context": [
        "src/chat/ChatsManager.ts",
        "src/chat/ChatsStorage.ts",
        "src/renderer/services/chatsService.ts"
      ],
      "createdAt": "2025-09-24T17:18:35.806Z",
      "updatedAt": "2025-09-25T09:07:46.534Z",
      "blockers": [],
      "completedAt": "2025-09-25T09:07:46.534Z"
    },
    {
      "id": "02b401c9-5219-48ee-8fca-174c6702ff2f",
      "status": "+",
      "title": "Add a Chat Button and Sidebar to StoriesListView",
      "description": "Integrate the @src/renderer/components/Chat/ChatSidebar.tsx  into the @src/renderer/stories/StoriesListView.tsx . Add a \"Chat\" button to the view's header. This chat will be for the entire project context. Wire it up to use the Chat Storage Service with the `projectId`.",
      "context": [
        "src/renderer/stories/StoriesListView.tsx",
        "src/renderer/components/Chat/ChatSidebar.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.807Z",
      "updatedAt": "2025-09-25T11:35:56.872Z",
      "blockers": [],
      "completedAt": "2025-09-25T11:35:56.872Z"
    },
    {
      "id": "ba16d671-5c40-496f-b887-7c9d94694711",
      "status": "+",
      "title": "Add Chat Functionality to Story and Feature Edit Modals",
      "description": "Add a \"Chat\" button to the header of the story and feature creation/editing modals. Clicking the button will open the @src/renderer/components/Chat/ChatSidebar.tsx  to the right of the modal content. The chat context will be the specific story or feature being edited.",
      "context": [
        "src/renderer/components/Chat/ChatSidebar.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.807Z",
      "updatedAt": "2025-09-25T13:22:19.965Z",
      "blockers": [],
      "completedAt": "2025-09-25T13:06:18.807Z"
    },
    {
      "id": "860c56c9-61e0-476f-8459-f7ccc4838ef3",
      "status": "+",
      "title": "Add Project-Level Chat Sidebars to Tests and Agents Views",
      "description": "Add a \"Chat\" button and the `ChatSidebar` to the @src/renderer/screens/TestsView.tsx and the @src/renderer/screens/AgentsView.tsx . The chat context for the @src/renderer/screens/TestsView.tsx  will be the project's tests, and for the @src/renderer/screens/AgentsView.tsx it will be the project's agents. Use the file paths `.factory/chats/projectId/tests.json` and `.factory/chats/projectId/agents.json` respectively.",
      "context": [
        "src/renderer/screens/TestsView.tsx",
        "src/renderer/screens/AgentsView.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.808Z",
      "updatedAt": "2025-09-25T13:24:01.997Z",
      "blockers": [],
      "completedAt": "2025-09-25T13:08:36.615Z"
    },
    {
      "id": "ad2a21e1-d63e-43a4-b0d9-14faff1aa5ef",
      "status": "+",
      "title": "Implement Persistence for Chat Settings",
      "description": "Store the user-selected settings (model, tool configuration, auto-approve) for each chat context. The settings should be saved alongside the chat messages in the corresponding JSON file and reloaded when the user re-opens the chat.\nAugment @src/chat/ChatsManager.ts , @src/chat/ChatsStorage.ts , @src/renderer/services/chatsService.ts and @src/renderer/contexts/ChatsContext.tsx to allow modifying these setetings",
      "context": [
        "src/chat/ChatsManager.ts",
        "src/chat/ChatsStorage.ts",
        "src/renderer/services/chatsService.ts",
        "src/renderer/contexts/ChatsContext.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.808Z",
      "updatedAt": "2025-09-25T11:06:43.320Z",
      "blockers": [],
      "completedAt": "2025-09-25T11:06:43.320Z"
    },
    {
      "id": "441f4d8d-3daf-4a37-b18d-16a08b5b7992",
      "status": "+",
      "title": "Unify Chat Experience by Refactoring ChatView",
      "description": "Update the existing @src/renderer/screens/ChatView.tsx to use the newly created reusable chat component(s) from the `ChatSidebar`. This will ensure a consistent look, feel, and functionality for all chat interfaces across the application.",
      "context": [
        "src/renderer/screens/ChatView.tsx"
      ],
      "createdAt": "2025-09-24T17:18:35.808Z",
      "updatedAt": "2025-09-24T22:02:58.670Z",
      "blockers": [],
      "completedAt": "2025-09-24T22:02:58.670Z"
    },
    {
      "id": "92ea6113-9709-4f89-9e62-24a5c7c5b4ee",
      "status": "+",
      "title": "The input box needs improving",
      "description": "In the @src/renderer/src/components/chat/ChatInput.tsx  the send button should be an icon -  create one in @src/renderer/src/components/ui/Icons.tsx  . There should also be an appropriate icon for the Attach button.\nBoth of the buttons should be part of the input view (in the footer with the hints) so that it can take as much space horizontally as possible with just a little bit of padding. The input box should only grow to 30% of the total chat view - no matter where it is used.",
      "context": [
        "src/renderer/src/components/chat/ChatInput.tsx",
        "src/renderer/src/components/ui/Icons.tsx"
      ],
      "blockers": [],
      "createdAt": "2025-09-25T00:42:13.695Z",
      "updatedAt": "2025-09-29T19:10:40.239Z",
      "completedAt": "2025-09-29T19:10:40.239Z"
    },
    {
      "id": "e30f1aae-50de-416d-8f67-05c6f7687590",
      "status": "?",
      "title": "Create speccer chat",
      "description": "",
      "context": [],
      "blockers": [],
      "createdAt": "2025-09-25T00:49:25.269Z",
      "updatedAt": "2025-09-25T00:49:25.269Z"
    },
    {
      "id": "57d3f1bc-ccd0-4101-873c-4c3758c5fa5a",
      "status": "+",
      "title": "Create a chatsContext",
      "description": "Instead of @src/renderer/hooks/useChats.tsx there should be a @src/renderer/contexts/ChatsContext.tsx  that follows the same patterns as @src/renderer/contexts/StoriesContext.tsx (giving helpers to resolved contexts per project/story/feature )\n@src/renderer/contexts/ChatsContext.tsx needs to be the interface for using @src/renderer/services/chatsService.ts (just like the other contexts use their services).",
      "context": [
        "src/renderer/hooks/useChats.tsx",
        "src/renderer/contexts/ChatsContext.tsx",
        "src/renderer/services/chatsService.ts",
        "src/renderer/contexts/StoriesContext.tsx"
      ],
      "blockers": [],
      "createdAt": "2025-09-25T09:17:18.893Z",
      "updatedAt": "2025-09-25T13:21:47.309Z",
      "completedAt": "2025-09-25T13:00:48.819Z"
    },
    {
      "id": "95c7a067-9e9b-4e54-b786-6d3997dfff30",
      "status": "+",
      "title": "Improve the chat sidebar ui on normal screen",
      "description": "So in @src/renderer/src/screens/stories/StoryDetailsView.tsx , @src/renderer/src/screens/stories/StoriesListView.tsx , @src/renderer/src/screens/TestsView.tsx and @src/renderer/src/screens/AgentsView.tsx - the chat button is in the top right and it makes the chat appear - this should slide out in a nice animation. It should also out collapse the @src/renderer/src/navigation/SidebarView.tsx  as to give more room to the @src/renderer/src/components/chat/ChatSidebar.tsx .\nThe whole area/window where the ChatSidebar is should be draggable up to a certain point (50% of the screen) so that it can be expanded or shrunk (up to a certain meaningful minimum - similar to the width the Sidebar is, so. that they are symmetrical). This width setting should be recorded and whenever such a chat is open this width should be resumed.",
      "context": [
        "src/renderer/src/screens/stories/StoryDetailsView.tsx",
        "src/renderer/src/screens/stories/StoriesListView.tsx",
        "src/renderer/src/screens/TestsView.tsx",
        "src/renderer/src/screens/AgentsView.tsx",
        "src/renderer/src/navigation/SidebarView.tsx",
        "src/renderer/src/components/chat/ChatSidebar.tsx"
      ],
      "blockers": [],
      "createdAt": "2025-09-25T13:24:33.055Z",
      "updatedAt": "2025-09-30T00:44:12.067Z",
      "completedAt": "2025-09-30T00:29:56.487Z"
    },
    {
      "id": "f50d7e7c-034c-4455-8772-81afac6c660c",
      "status": "+",
      "title": "Improve the chat UI on popups",
      "description": "In @src/renderer/src/screens/stories/FeatureCreateView.tsx , @src/renderer/src/screens/stories/FeatureEditView.tsx , @src/renderer/src/screens/stories/StoryCreateView.tsx and @src/renderer/src/screens/stories/StoryEditView.tsx - the chat button at the top opens the chat sidebar in the middle. That's not correct. The way it should be, it's as if the chat sidebar is a 2nd popup that slides out of the current popup to the maximum right the screen has available without changing the popup it slides from. Currently the input box doesn't show in all of these popups when chat is open - it has to be showing.\nThe chat sidebar when showing should appear sliding from under the popup and to the right - its height should be the height of the popup.",
      "context": [
        "src/renderer/src/screens/stories/FeatureCreateView.tsx",
        "src/renderer/src/screens/stories/FeatureEditView.tsx",
        "src/renderer/src/screens/stories/StoryCreateView.tsx",
        "src/renderer/src/screens/stories/StoryEditView.tsx"
      ],
      "blockers": [],
      "createdAt": "2025-09-25T13:24:43.049Z",
      "updatedAt": "2025-09-30T00:41:10.219Z",
      "completedAt": "2025-09-30T00:26:05.355Z"
    },
    {
      "id": "c3804c5f-ec19-410e-b866-3d0229cb354a",
      "status": "+",
      "title": "Improve the top buttons in ChatSidebar",
      "description": "When the chat is showing in the sidebar, we don't need to display the title but instead we should show a circular \"i\" icon, that when clicked will show a tooltip that will show the current context (project, story, feature etc). This should be a reusable component.\nThe Chat Model selection is currently saving the setting as the overall app model - these two should be separate. The chat model selection should use the same component as elsewhere i.e. like in @src/renderer/src/screens/stories/StoriesListView.tsx the @src/renderer/src/components/agents/ModelChip.tsx is used. It should just have a blue border to separate it from the agent config.\nThe settings button should be an icon button with the `IconSettings` image.",
      "context": [
        "src/renderer/src/screens/stories/StoriesListView.tsx",
        "src/renderer/src/components/agents/ModelChip.tsx"
      ],
      "blockers": [],
      "createdAt": "2025-09-25T13:29:28.459Z",
      "updatedAt": "2025-09-30T00:42:35.491Z",
      "completedAt": "2025-09-30T00:28:03.178Z"
    },
    {
      "id": "4fdbae23-ff2f-4616-a7cf-61d831dc8377",
      "status": "+",
      "title": "ChatInput bottom area",
      "description": "In @src/renderer/components/Chat/ChatInput.tsx no need to mention Shift+Enter as normal Enter creates a newline. There should be a little round info button (i) below the send button, that when clicked will show a tooltip of all such shortcuts and helpers that are available in the chat input (which there will be more in the future). The bottom area should hide after over 3 lines have been typed in, making more space for the text. It should reappear if the text is back to 3 lines or less.\nThe info that is displayed in the area should be always displaying 1 hint per line, where the area can have at most 4 such infos (top left, top right, bottom left, bottom right). Or if there's just one info shown on one side then it would show it centered.\nFor now we want to show:\n\"Use @ for file references\" and \"Use # for stories & features\" on the left and on the right just \"CMD/Ctrl + Enter to send\" where CMD/CTRL is replaced with the appropriate icon for the system.\n\nThe buttons: |ATTACH FILE| SEND| INFO| Should be in a vertical section to the right of the chat input box - they should not be a part of the bottom area.",
      "context": [
        "src/renderer/components/Chat/ChatInput.tsx"
      ],
      "blockers": [],
      "createdAt": "2025-09-25T13:34:26.711Z",
      "updatedAt": "2025-09-29T23:41:45.924Z",
      "completedAt": "2025-09-29T23:06:51.556Z"
    },
    {
      "id": "35267358-0316-4f6e-a5d0-aafaec8b04c0",
      "status": "+",
      "title": "Make the default prompts be fillable with data",
      "description": "in @src/logic/chat/ChatsManager.ts there's `getContextPrompt` and it uses a pattern replacement system for the prompts. The prompts in @src/logic/chat/promptTemplates.ts need to be updated to accommodate for these.",
      "context": [
        "src/logic/chat/ChatsManager.ts",
        "src/logic/chat/promptTemplates.ts"
      ],
      "blockers": [],
      "createdAt": "2025-09-28T01:44:37.135Z",
      "updatedAt": "2025-09-28T01:49:33.659Z",
      "completedAt": "2025-09-28T01:49:33.659Z"
    },
    {
      "id": "7d6e9811-8e3a-4e0a-abc9-fd5846858d84",
      "status": "+",
      "title": "ChatSidebar needs fixing",
      "description": "@src/renderer/src/contexts/ChatsContext.tsx was updated to use `thefactory-tools` contextual chats implementation, now the @src/renderer/src/components/chat/ChatSidebar.tsx needs to be updated to accomodate for the changes.",
      "context": [
        "src/renderer/src/contexts/ChatsContext.tsx",
        "src/renderer/src/components/chat/ChatSidebar.tsx"
      ],
      "blockers": [],
      "createdAt": "2025-09-28T01:46:00.994Z",
      "updatedAt": "2025-09-28T01:51:20.496Z",
      "completedAt": "2025-09-28T01:51:20.496Z"
    },
    {
      "id": "d5fb1e96-fbb4-44c4-be63-6f008cd29918",
      "status": "+",
      "title": "The chat sidebar on normal screens should be a mirror of the regular sidebar",
      "description": "What it means is that the @src/renderer/src/components/chat/ChatSidebar.tsx on screens like @src/renderer/src/screens/stories/StoryDetailsView.tsx, @src/renderer/src/screens/stories/StoriesListView.tsx , @src/renderer/src/screens/TestsView.tsx or @src/renderer/src/screens/AgentsView.tsx should be in a vertical panel when collapsed (just like the @src/renderer/src/navigation/SidebarView.tsx when it's collapsed) and expanded the same way as it is now.\nThe opening button when collapsed should have a left chevron icon - it should be placed analogously to how the opening for the Sidebar is.\nWhen opened, the chat button should transform into a close button - it should be the chevron pointing down.\nWhen the chat area is collapsed - there should be a chat button in the middle of it that will open the chat sidebar.",
      "context": [
        "src/renderer/src/components/chat/ChatSidebar.tsx",
        "src/renderer/src/screens/stories/StoryDetailsView.tsx",
        "src/renderer/src/screens/stories/StoriesListView.tsx",
        "src/renderer/src/screens/TestsView.tsx",
        "src/renderer/src/screens/AgentsView.tsx",
        "src/renderer/src/navigation/SidebarView.tsx"
      ],
      "blockers": [],
      "createdAt": "2025-09-30T00:53:12.441Z",
      "updatedAt": "2025-09-30T09:24:15.747Z",
      "completedAt": "2025-09-30T01:52:06.548Z"
    },
    {
      "id": "9621b87e-23b2-48cd-be7f-454543d6b212",
      "status": "+",
      "title": "ChatsManager should utilise 'thefactory-tools'",
      "description": "'thefactory-tools' now exposes saving chat settings and getting prompts - @src/logic/chat/ChatsManager.ts is already exposing the appropriate APIs and so is @src/renderer/src/services/chatsService.ts . Now @src/renderer/src/contexts/ChatsContext.tsx can have the functionality which can be used inside @src/renderer/src/components/chat/ChatSidebar.tsx and the settings panel in there to toggle tools to be available or not, and to be auto called or not (via 2 separate toggles). The settings panel must also give the option to edit the prompt that is assigned to that ChatContext and inside @src/renderer/src/components/chat/ChatSidebar.tsx to show it before any messages are sent.\nAll the necessary files from 'thefactory-tools' can be found under the path `node_modules/thefactory-tools/src/chats`",
      "context": [
        "src/logic/chat/ChatsManager.ts",
        "src/renderer/src/services/chatsService.ts",
        "src/renderer/src/contexts/ChatsContext.tsx",
        "src/renderer/src/components/chat/ChatSidebar.tsx"
      ],
      "blockers": [],
      "createdAt": "2025-09-30T00:55:34.058Z",
      "updatedAt": "2025-09-30T10:32:38.885Z",
      "rejection": "This is not done at all.",
      "completedAt": "2025-09-30T10:32:38.885Z"
    },
    {
      "id": "4115f6ec-a85b-4a5d-bf23-14df6314c7c7",
      "status": "-",
      "title": "The Chat screen needs an overhaul",
      "description": "The @src/renderer/src/screens/ChatView.tsx needs to now list chats according to context so a user can easily find all chats based on the different contexts.\nThe sidebar showing the different chats should be split into two sections - at the top will be the type selection (so a scrollable list with tiles representing the different Context Type combinations) and at the bottom the list of chats for that type. Clicking on a chat will open it in the main area.\nCreating a new chat, always creates a new General chat with the current timestamp.",
      "context": [
        "src/renderer/src/screens/ChatView.tsx"
      ],
      "blockers": [],
      "createdAt": "2025-09-30T01:20:42.316Z",
      "updatedAt": "2025-09-30T10:12:34.646Z"
    },
    {
      "id": "b5acbe79-2d92-438c-9850-15cee05fbea9",
      "status": "+",
      "title": "ChatSidebar rework",
      "description": "The @src/renderer/src/components/chat/ChatSidebar.tsx doesn't work properly - it stays collapsed in the panel - in @src/renderer/src/components/chat/ChatSidebarOverlay.tsx . The way to solve it, is that ChatSidebar must get a parameter `isCollapsible` passed in - then it would display its own collapse button which would via callback call the setCollapse of whoever is calling it. For instance in @src/renderer/src/screens/ChatView.tsx it won't be passed in because there it stays fully open and taking up the whole screen.\nChatSidebarOverlay needs to be renamed to ChatSidebarPanel and it will control the `setCollapsed`. It should be further split/refactored to a separate component ChatSidebarModalPanel that will only contain the logic for handling Modals/popups as used for instance in @src/renderer/src/screens/stories/FeatureEditView.tsx .",
      "context": [
        "src/renderer/src/components/chat/ChatSidebar.tsx",
        "src/renderer/src/components/chat/ChatSidebarOverlay.tsx",
        "src/renderer/src/screens/ChatView.tsx",
        "src/renderer/src/screens/stories/FeatureEditView.tsx"
      ],
      "blockers": [],
      "createdAt": "2025-09-30T09:27:46.491Z",
      "updatedAt": "2025-09-30T10:25:21.044Z",
      "completedAt": "2025-09-30T10:25:21.044Z"
    }
  ],
  "featureIdToDisplayIndex": {
    "57d3f1bc-ccd0-4101-873c-4c3758c5fa5a": 1,
    "ad2a21e1-d63e-43a4-b0d9-14faff1aa5ef": 2,
    "8515f4d8-c436-4780-a5cc-7c3106e1efd3": 3,
    "441f4d8d-3daf-4a37-b18d-16a08b5b7992": 4,
    "09df5d7d-5d5b-4681-8ac2-2b903cd6dcb6": 5,
    "e2d1d322-7e72-49ad-9f8f-f7d6f4437c5b": 6,
    "91e943ca-515b-4ee4-a44d-cdcff61cc379": 7,
    "856ac3c4-91d3-48f4-9a9f-f38260a3f9a7": 8,
    "bfe7399a-4e44-4455-b2f9-dd4ec412dde3": 9,
    "02b401c9-5219-48ee-8fca-174c6702ff2f": 10,
    "ba16d671-5c40-496f-b887-7c9d94694711": 11,
    "860c56c9-61e0-476f-8459-f7ccc4838ef3": 12,
    "35267358-0316-4f6e-a5d0-aafaec8b04c0": 13,
    "7d6e9811-8e3a-4e0a-abc9-fd5846858d84": 14,
    "92ea6113-9709-4f89-9e62-24a5c7c5b4ee": 15,
    "4fdbae23-ff2f-4616-a7cf-61d831dc8377": 16,
    "f50d7e7c-034c-4455-8772-81afac6c660c": 17,
    "c3804c5f-ec19-410e-b866-3d0229cb354a": 18,
    "95c7a067-9e9b-4e54-b786-6d3997dfff30": 19,
    "d5fb1e96-fbb4-44c4-be63-6f008cd29918": 20,
    "b5acbe79-2d92-438c-9850-15cee05fbea9": 21,
    "9621b87e-23b2-48cd-be7f-454543d6b212": 22,
    "4115f6ec-a85b-4a5d-bf23-14df6314c7c7": 23,
    "e30f1aae-50de-416d-8f67-05c6f7687590": 24
  },
  "createdAt": "2025-09-18T23:01:33.481Z",
  "updatedAt": "2025-09-29T13:57:25.137Z"
}