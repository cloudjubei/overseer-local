{
  "id": "0aab94ca-1802-4cd4-a873-5b339a6d20ca",
  "status": "+",
  "title": "First online connectivity feature - Agent prices",
  "description": "factory-ts must have a way of getting latest prices, this project Overseer must have a new Sidebar option -> \"Live Data\".\nInside this new screen, all services that should be updated can be controlled.\nThe first such service will be getting all common provider+model prices, as well as user configured ones (so there must be a way for a user to configure such a service to specify the details of what items it should get).\nWhen entering the screen, it should be possible to see each service, when was it last updated and whether the latest data is up to date. For each service there should be standard update settings available that can specify when data is deemed fresh (daily, weekly, monthly) and whether to do an automated check when this freshness expires (on app launch or at a set time).",
  "features": [
    {
      "id": "ae580ac2-b3f0-4a7b-a580-9d34e67a31f4",
      "status": "+",
      "title": "Add 'Live Data' to Sidebar and Create New Screen",
      "description": "Create a new sidebar navigation item titled 'Live Data'. This item should navigate to a new, empty screen component that will serve as the container for the live data services management UI.",
      "plan": "",
      "context": [],
      "acceptance": [],
      "createdAt": "2025-09-16T13:05:37.972Z",
      "completedAt": "2025-09-14T19:03:30.461Z",
      "updatedAt": "2025-09-16T13:05:37.972Z"
    },
    {
      "id": "168c2aaa-13a9-45d5-873c-b633cb716dfc",
      "status": "+",
      "title": "Define Data Structure for Live Data Services",
      "description": "Define and type the data structure for a generic live data service. This should include fields for service ID, name, description, last updated timestamp, freshness policy (e.g., 'daily', 'weekly', 'monthly'), and auto-update settings (e.g., enabled, trigger).",
      "plan": "",
      "context": [],
      "acceptance": [],
      "createdAt": "2025-09-16T13:05:37.972Z",
      "completedAt": "2025-09-15T01:49:09.058Z",
      "updatedAt": "2025-09-16T13:05:37.972Z"
    },
    {
      "id": "80a2e471-25cf-456e-a03a-b37d428dd621",
      "status": "+",
      "title": "Implement Price Fetching in factory-ts",
      "description": "Enhance `factory-ts` with a new module to fetch LLM provider and model prices from a canonical source. The module should be designed to also support user-configurable sources in the future.",
      "plan": "",
      "context": [],
      "acceptance": [],
      "createdAt": "2025-09-16T13:05:37.972Z",
      "completedAt": "2025-09-14T19:58:37.682Z",
      "updatedAt": "2025-09-16T13:05:37.972Z"
    },
    {
      "id": "19e53643-537f-4bbf-9ba6-268baeedcb4f",
      "status": "+",
      "title": "Create Main Process Service for Live Data Management",
      "description": "Implement a main process service to manage the lifecycle of live data services. This includes loading configurations from storage, saving them, and exposing methods to the renderer via IPC to get service status and trigger updates.\nCurrently we have @src/live-data/liveDataService.js already in place with some obvious missing functions.\nThe view to render this is @src/renderer/screens/LiveDataView.tsx \nThe types are defined in @src/live-data/types.ts",
      "plan": "",
      "context": [
        "src/live-data/liveDataService.js",
        "src/renderer/screens/LiveDataView.tsx",
        "src/live-data/types.ts"
      ],
      "acceptance": [],
      "blockers": [],
      "createdAt": "2025-09-16T13:05:37.972Z",
      "completedAt": "2025-09-15T01:07:32.660Z",
      "updatedAt": "2025-09-16T13:05:37.972Z"
    },
    {
      "id": "2e00148d-cb4c-4c4b-9388-448b171ff42e",
      "status": "+",
      "title": "Implement UI to List Live Data Services",
      "description": "On the 'Live Data' screen, create a UI component that lists all configured live data services. Each item in the list should display the service name, its last updated timestamp, and its freshness status (e.g., 'Up to date', 'Stale').\n\nThe view to render this is @src/renderer/screens/LiveDataView.tsx \nThe types are defined in @src/live-data/types.ts",
      "plan": "",
      "context": [],
      "acceptance": [],
      "blockers": [],
      "createdAt": "2025-09-16T13:05:37.972Z",
      "completedAt": "2025-09-14T23:38:44.497Z",
      "updatedAt": "2025-09-16T13:05:37.972Z"
    },
    {
      "id": "3bb6a463-3ec8-48dc-9a1f-f70e8797da27",
      "status": "+",
      "title": "Implement UI for Service Configuration",
      "description": "For each service in the list, create a UI component that allows the user to configure its settings. This includes setting the freshness policy (daily, weekly, monthly) and toggling automated checks on or off.\n\nThe view to render this in is somwhere inside @src/renderer/screens/LiveDataView.tsx \nThe types are defined in @src/live-data/types.ts",
      "plan": "",
      "context": [],
      "acceptance": [],
      "blockers": [],
      "createdAt": "2025-09-16T13:05:37.972Z",
      "completedAt": "2025-09-14T22:57:24.548Z",
      "updatedAt": "2025-09-16T13:05:37.972Z"
    },
    {
      "id": "5b140303-e3c9-467f-a26e-2b09919612c4",
      "status": "+",
      "title": "Implement Manual Update Trigger",
      "description": "Add a button to each service in the UI that allows the user to manually trigger an update. This button will use IPC to call the main process service to fetch the latest data for that specific service.\n\nThe view to render this in should be in @src/renderer/screens/LiveDataView.tsx \nThe types are defined in @src/live-data/types.ts",
      "plan": "",
      "context": [],
      "acceptance": [],
      "blockers": [],
      "createdAt": "2025-09-16T13:05:37.972Z",
      "completedAt": "2025-09-14T22:11:42.749Z",
      "updatedAt": "2025-09-16T13:05:37.972Z"
    },
    {
      "id": "abcb8eae-c3ab-424a-9853-b5372f04633f",
      "status": "+",
      "title": "Implement Automated Update Logic",
      "description": "Implement the logic in the main process to automatically check for updates based on each service's configuration. This should run on application launch and check if any service's data has expired according to its freshness policy.\nThe logic for this should use @src/live-data/liveDataService.js or @src/live-data/liveDataManager.js - any renderer side view will use @src/renderer/hooks/useLiveData.tsx so this might need updating too.",
      "plan": "",
      "context": [
        "src/live-data/liveDataService.js",
        "src/live-data/liveDataManager.js",
        "src/renderer/hooks/useLiveData.tsx"
      ],
      "acceptance": [],
      "blockers": [],
      "createdAt": "2025-09-16T13:05:37.972Z",
      "completedAt": "2025-09-14T19:37:56.128Z",
      "updatedAt": "2025-09-16T13:05:37.972Z"
    },
    {
      "id": "ef5fc45d-0d09-41ab-9500-0ad2882d1275",
      "status": "+",
      "title": "Basic json viewer for current live data",
      "description": "Inside @src/renderer/screens/LiveDataView.tsx we need a way to view the data that is the latest as a simple json viewer.",
      "plan": "",
      "context": [
        "src/renderer/screens/LiveDataView.tsx"
      ],
      "acceptance": [],
      "blockers": [],
      "createdAt": "2025-09-16T13:05:37.972Z",
      "completedAt": "2025-09-14T18:09:19.960Z",
      "updatedAt": "2025-09-16T13:05:37.972Z"
    },
    {
      "id": "6199040d-7927-44fc-a1ad-71782484d82a",
      "status": "+",
      "title": "LiveData should integrate with thefactory-tools refresh prices",
      "description": "Inside the local package thefactory-tools we have exposed functions for updating the prices for the price manager that is used by all agents to determine token prices. Whenever @src/renderer/services/liveDataService.ts or @src/live-data/liveDataManager.js retrieves fresh prices, it has to update thefactory-tools appropriately (via the price manager) so that it has the latest data.\nThis is just the case for this project, but for further livedataservices we need to have an interface by which we can wire up the consumers for the datas of such services.",
      "plan": "",
      "context": [
        "src/renderer/services/liveDataService.ts",
        "src/live-data/liveDataManager.js"
      ],
      "acceptance": [],
      "blockers": [],
      "createdAt": "2025-09-16T13:05:37.972Z",
      "completedAt": "2025-09-14T20:21:59.869Z",
      "updatedAt": "2025-09-16T13:05:37.972Z"
    },
    {
      "id": "0638a729-4402-4823-9d04-90b92789e980",
      "status": "+",
      "title": "Create a future-proof, well architected and clean interface and setup for adding new live data services",
      "description": "Currently it's impossible to add a new live data service - it should be possible to do so, by specifying the url and the same update settings as now. The data should be stored in a easily retrievable place. If at any point any new service or view would like to read this data while the app is running - they should be able to.\nAn internal service like the pricing manager needs to be wired in code for it to work - clean up @src/live-data/liveDataManager.js to make it easy to add future live data providers and the services that consume them.",
      "plan": "",
      "context": [
        "src/live-data/liveDataManager.js"
      ],
      "acceptance": [],
      "blockers": [],
      "createdAt": "2025-09-16T13:05:37.972Z",
      "completedAt": "2025-09-15T02:29:47.462Z",
      "updatedAt": "2025-09-16T13:05:37.972Z"
    },
    {
      "id": "f337aa98-ee80-45e9-bb7b-4df74595a342",
      "status": "-",
      "title": "Create a way of adding a live data provider",
      "description": "In @src/renderer/screens/LiveDataView.tsx there has to be a \"+\" button, that allows a user to add a live data provider that will be stored.",
      "plan": "",
      "context": [
        "src/renderer/screens/LiveDataView.tsx"
      ],
      "acceptance": [],
      "blockers": [],
      "createdAt": "2025-09-16T13:05:37.972Z",
      "updatedAt": "2025-09-16T13:05:37.972Z"
    }
  ],
  "featureIdToDisplayIndex": {
    "ae580ac2-b3f0-4a7b-a580-9d34e67a31f4": 1,
    "168c2aaa-13a9-45d5-873c-b633cb716dfc": 2,
    "80a2e471-25cf-456e-a03a-b37d428dd621": 3,
    "19e53643-537f-4bbf-9ba6-268baeedcb4f": 4,
    "2e00148d-cb4c-4c4b-9388-448b171ff42e": 5,
    "3bb6a463-3ec8-48dc-9a1f-f70e8797da27": 6,
    "5b140303-e3c9-467f-a26e-2b09919612c4": 7,
    "abcb8eae-c3ab-424a-9853-b5372f04633f": 8,
    "ef5fc45d-0d09-41ab-9500-0ad2882d1275": 9,
    "6199040d-7927-44fc-a1ad-71782484d82a": 10,
    "0638a729-4402-4823-9d04-90b92789e980": 11,
    "f337aa98-ee80-45e9-bb7b-4df74595a342": 12
  },
  "createdAt": "2025-09-16T13:05:37.972Z",
  "completedAt": "2025-09-16T13:05:37.972Z",
  "updatedAt": "2025-09-16T13:05:37.972Z"
}
