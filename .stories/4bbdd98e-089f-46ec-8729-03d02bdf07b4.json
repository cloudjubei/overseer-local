{
  "id": "4bbdd98e-089f-46ec-8729-03d02bdf07b4",
  "status": "-",
  "title": "Improve chat",
  "description": "We need to make chat more user friendly and easy to use.\n- The main chat window should be of constant size and the messages should be horizontally scrollable and extend vertically as far as they need.\n- While waiting for a response there's a spinner showing the agent thinking.\n- We need to show how long the agent took to respond.\n- We get the full message content, but we want it to appear as if it was streamed in (written on the ago), create an appropriate animation\n- if the user is at the bottom of the chat window, then if there's a new message, only scroll a little bit so that the user can start reading and not chase the newly appearing text.\n- The message the user sends needs to appear instantly with a nice popping animation.\n- There needs to be a sound for sending a message and receiving a message.\n- The input needs to be reworked to be more like the FeatureForm, it should allow fast lookup of files and references to stories and features (when hitting @ for files and # for stories/features).\n- Whenever a file is references via @ in the text (whether the input box or in a message, it should be displayed with a nice chip. In the input box, if the caret is at the end of the chip and the user presses backspace - the view transforms into text, deletes the last character and goes back into showing file lookup. The equivalent thing should also happen for story/feature references.\n- if there's an error in the chat, show an appropriate error bubble\n- whenever the agent invokes tool calls, show it via a custom view that will allow inspection of the tool call (arguments and results and time taken)\n\nThe main Chat view component is:\nsrc/renderer/screens/ChatView.tsx",
  "features": [
    {
      "id": "b6cdf920-004a-4ff2-8a9f-8bc56c1047f7",
      "status": "-",
      "title": "Improve Chat Window",
      "description": "Modify the main chat window component @src/renderer/screens/ChatView.tsx to always fill up its parent container to max height and all available width. Ensure the main message list scrolls vertically. Individual messages that are too long should wrap, not scroll horizontally, to maintain readability - but they should display markdown and if there are tables or code inside (i.e. not text) than that item should scroll on its own within the message.",
      "context": [
        "src/renderer/screens/ChatView.tsx"
      ],
      "createdAt": "2025-09-22T23:55:31.958Z",
      "updatedAt": "2025-09-24T16:56:20.120Z",
      "blockers": []
    },
    {
      "id": "57606b53-c938-4b37-8478-46ef4e081d8a",
      "status": "+",
      "title": "Display a Spinner While Awaiting Agent Response",
      "description": "Implement a loading indicator (spinner) that is displayed in the chat UI when the application is waiting for a response from the agent. This provides visual feedback to the user that their request is being processed. This will require tracking the 'thinking' state of the agent.",
      "context": [],
      "createdAt": "2025-09-22T23:55:31.966Z",
      "updatedAt": "2025-09-23T00:26:46.365Z",
      "completedAt": "2025-09-23T00:26:46.365Z"
    },
    {
      "id": "38ba647b-9f8f-40f0-ab1c-666c65e06034",
      "status": "+",
      "title": "Animate Incoming Messages with a Typewriter Effect",
      "description": "Create a 'typewriter' animation for incoming agent messages. Instead of the full message appearing at once, the text should be revealed character by character to simulate live typing. This will likely involve creating a new component or hook to handle the animation logic.\nThe @src/renderer/components/ui/TypewriterText.tsx and @src/renderer/hooks/useTypewriter.ts have been created - they need to be used in @src/renderer/screens/ChatView.tsx",
      "context": [
        "src/renderer/components/ui/TypewriterText.tsx",
        "src/renderer/hooks/useTypewriter.ts",
        "src/renderer/screens/ChatView.tsx"
      ],
      "createdAt": "2025-09-22T23:55:31.972Z",
      "updatedAt": "2025-09-23T09:46:23.851Z",
      "blockers": [],
      "completedAt": "2025-09-23T09:46:23.851Z"
    },
    {
      "id": "1da817b7-bbab-4246-9576-70d2fbba6c2d",
      "status": "+",
      "title": "Refine Chat Auto-Scrolling on New Messages",
      "description": "In @src/renderer/screens/ChatView.tsx  adjust the auto-scroll behavior for new messages. When a new message arrives and the user is scrolled to the bottom, the view should scroll just enough to reveal the start of the new message, preventing the user from having to 'chase' the text as it animates in.",
      "context": [
        "src/renderer/screens/ChatView.tsx"
      ],
      "createdAt": "2025-09-22T23:55:31.984Z",
      "updatedAt": "2025-09-23T09:52:41.178Z",
      "blockers": [],
      "completedAt": "2025-09-23T09:52:41.178Z"
    },
    {
      "id": "70dacc08-74b0-4296-887c-6f70422c11c3",
      "status": "+",
      "title": "Add a 'Pop-in' Animation for User Messages",
      "description": "In @src/renderer/screens/ChatView.tsx  implement a subtle 'pop-in' animation for new messages sent by the user to provide instant visual feedback that the message has been added to the conversation. Use CSS transitions for this effect on the user message bubble. The css styles in\n@src/styles/components/chat.css need to be adapted appropriately.",
      "context": [
        "src/renderer/screens/ChatView.tsx",
        "src/styles/components/chat.css"
      ],
      "createdAt": "2025-09-22T23:55:32.060Z",
      "updatedAt": "2025-09-23T09:57:01.849Z",
      "blockers": [],
      "completedAt": "2025-09-23T09:57:01.849Z"
    },
    {
      "id": "b1cddab1-8fa2-43a4-a20e-98d10ca1d771",
      "status": "+",
      "title": "Implement Sound Notifications for Chat Messages",
      "description": "In @src/renderer/screens/ChatView.tsx  add audio cues for chat events. A sound should be played when the user sends a message, and a different sound should be played when a new message is received from the agent. This involves adding sound files and triggering them from the UI.\nAdd the two new sounds under `assets` and import them.\nFind appropriate sounds online and place them here.",
      "context": [
        "src/renderer/screens/ChatView.tsx"
      ],
      "createdAt": "2025-09-22T23:55:32.078Z",
      "updatedAt": "2025-09-23T11:09:27.101Z",
      "blockers": [],
      "completedAt": "2025-09-23T11:09:27.101Z"
    },
    {
      "id": "09d03ceb-884a-453b-bb21-3c2beea95527",
      "status": "+",
      "title": "Create an Error Bubble for Chat Failures",
      "description": "Implement a dedicated error bubble component. When an error occurs during the agent's turn (e.g., a failed tool call or an API error), display the error message in a distinctively styled bubble within the chat conversation.",
      "context": [],
      "createdAt": "2025-09-22T23:55:32.102Z",
      "updatedAt": "2025-09-23T00:39:44.142Z",
      "completedAt": "2025-09-23T00:39:44.142Z"
    },
    {
      "id": "c1215925-dd57-4655-8168-8ae0f1276dc6",
      "status": "+",
      "title": "Inspection View for Agent Tool Calls",
      "description": "Similarly to the `ToolCallRow` in @src/renderer/components/agents/ChatConversation.tsx (which is used for AgentRuns) we need to have a nice display for tool calls in user chat in @src/renderer/screens/ChatView.tsx . Add the time taken for each individual tool call to complete. Make the layout for better readability of arguments and results, with syntax highlighting for JSON.",
      "context": [
        "src/renderer/components/agents/ChatConversation.tsx",
        "src/renderer/screens/ChatView.tsx"
      ],
      "createdAt": "2025-09-22T23:55:32.125Z",
      "updatedAt": "2025-09-23T10:04:36.542Z",
      "blockers": [],
      "completedAt": "2025-09-23T10:04:36.542Z"
    },
    {
      "id": "c53d5f00-cd0e-47f7-bcde-6f74d5081850",
      "status": "+",
      "title": "Render File and Story/Feature Mentions as Chips",
      "description": "Update the message rendering logic to detect `@<file_path>` and `#<storyId>.<feature_id>` mentions in message content. These mentions should be displayed as styled, non-interactive 'chips' within the message bubble for better readability. This will likely involve modifying the @src/renderer/components/ui/RichText.tsx  component.",
      "context": [
        "src/renderer/components/ui/RichText.tsx"
      ],
      "createdAt": "2025-09-22T23:55:32.126Z",
      "updatedAt": "2025-09-23T10:06:52.336Z",
      "blockers": [],
      "completedAt": "2025-09-23T10:06:52.336Z"
    },
    {
      "id": "3e8a3f07-5983-4c9c-ad27-ae001eb9e683",
      "status": "-",
      "title": "Create an Advanced Chat Input with Mention Support",
      "description": "Improve the @src/renderer/components/Chat/ChatInput.tsx  with a component that supports autocompletion. It should trigger a file lookup panel when the user types `@` and a story/feature lookup panel when the user types `#` - we already have an input that works well inside @src/renderer/components/stories/FeatureForm.tsx . The component for this should be isolated and reused in both of these places.",
      "context": [
        "src/renderer/components/stories/FeatureForm.tsx",
        "src/renderer/components/Chat/ChatInput.tsx"
      ],
      "createdAt": "2025-09-22T23:55:32.129Z",
      "updatedAt": "2025-09-24T16:58:26.308Z",
      "blockers": []
    },
    {
      "id": "95bd507b-3644-4c61-aaba-2d8781514767",
      "status": "-",
      "title": "Add Interactive Mention Chips to the Chat Input",
      "description": "Building on the advanced chat input @src/renderer/components/Chat/ChatInput.tsx , make the file and story/feature mentions appear as interactive chips *within the input box itself*. Currently they are already implemented as chips in @src/renderer/components/ui/RichText.tsx . Implement the behavior where pressing backspace at the end of a chip converts it back to editable text.",
      "context": [
        "src/renderer/components/Chat/ChatInput.tsx",
        "src/renderer/components/ui/RichText.tsx"
      ],
      "createdAt": "2025-09-22T23:55:32.130Z",
      "updatedAt": "2025-09-23T11:52:54.320Z",
      "blockers": []
    },
    {
      "id": "c21bb932-1f29-49f8-ae61-44bf83bba8b5",
      "status": "+",
      "title": "Refactor",
      "description": "Go over all the code in @src/renderer/screens/ChatView.tsx and @src/renderer/components/Chat/ChatInput.tsx and refactor it to make it more modular and easy to handle (these files have grown massively).",
      "context": [
        "src/renderer/screens/ChatView.tsx",
        "src/renderer/components/Chat/ChatInput.tsx"
      ],
      "createdAt": "2025-09-23T10:29:38.591Z",
      "updatedAt": "2025-09-23T11:17:59.002Z",
      "blockers": [],
      "completedAt": "2025-09-23T11:17:59.002Z"
    }
  ],
  "featureIdToDisplayIndex": {
    "b6cdf920-004a-4ff2-8a9f-8bc56c1047f7": 1,
    "57606b53-c938-4b37-8478-46ef4e081d8a": 2,
    "38ba647b-9f8f-40f0-ab1c-666c65e06034": 3,
    "1da817b7-bbab-4246-9576-70d2fbba6c2d": 4,
    "70dacc08-74b0-4296-887c-6f70422c11c3": 5,
    "b1cddab1-8fa2-43a4-a20e-98d10ca1d771": 6,
    "09d03ceb-884a-453b-bb21-3c2beea95527": 7,
    "c1215925-dd57-4655-8168-8ae0f1276dc6": 8,
    "c53d5f00-cd0e-47f7-bcde-6f74d5081850": 9,
    "3e8a3f07-5983-4c9c-ad27-ae001eb9e683": 10,
    "95bd507b-3644-4c61-aaba-2d8781514767": 11,
    "c21bb932-1f29-49f8-ae61-44bf83bba8b5": 12
  },
  "createdAt": "2025-09-22T23:49:45.348Z",
  "updatedAt": "2025-09-23T10:29:27.711Z"
}