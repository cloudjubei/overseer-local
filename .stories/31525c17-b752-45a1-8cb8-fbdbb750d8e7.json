{
  "id": "31525c17-b752-45a1-8cb8-fbdbb750d8e7",
  "status": "?",
  "title": "Create Sourcetree replacement - a popular version control management app",
  "description": "Goal Provide built-in Git workflows so users do not need external tools (e.g., SourceTree) for routine tasks: viewing repo status and branches, reviewing diffs (working tree, staged, and branch-to-base), running focused tests, merging, and resolving conflicts. Scope for this iteration - Navigation and views: - Add a Git section with two subviews: 'Current project' and 'All projects'. - Current project shows pending operations for the active repo; All projects aggregates across all known projects from ProjectContext (src/renderer/src/contexts/ProjectContext.tsx). - Pending operations definition: - A pending operation is a feature branch with commits ahead of the base branch (default base is the current branch). Feature branches follow the existing convention 'features/<storyId>' where storyId is a UUID. We may later extend to 'features/<storyId>.<featureId>' but uniqueness is already guaranteed by storyId. - Merge flow: - Clicking a pending item opens a Git Merge popup that shows context (project/story/branch), per-file diffs, and analysis placeholders: compilation impact, tests impact, and diff coverage across changed lines. These analyses start as stubs/adapters and should degrade gracefully when not available. On conflicts, the flow should transition into the conflict resolution UI. - Integration notes: - Reuse GitMonitor for status and add aggregation to compute ahead/behind and feature branches across projects. - Reuse/extend existing functions in src/logic/git-monitor/storyBranchNaming.js to resolve story IDs from branch names and expose this mapping to the renderer. - Respect current behavior where agents run from the branch they started; do not force checkouts. All operations must be safe-by-default with timeouts and clear error surfacing. Out of scope for this iteration - Remote PR management, stash workflows, and hunk-level staging (planned separately). Acceptance (high level) - Users can navigate to a Git panel, see pending branches grouped appropriately, open a merge popup with diffs and analysis placeholders, execute a merge, and resolve conflicts without leaving the app.\n\nAll the relevant types from `thefactory-tools` i.e. `GitTools` can be found in the local copy at:\n`src/logic/git/gitTypes.copy.ts`",
  "features": [
    {
      "id": "e507c3e6-bef1-48d3-a746-446a0f099584",
      "status": "+",
      "title": "Refactor Git credentials management to the main process",
      "description": "Move Git credentials logic from the renderer (`GitHubCredentialsContext.tsx`, `utils/GitHubCredentialsManager.ts`) to the main process. Create a new `CredentialsManager.ts` in `src/logic/git/` similar to `SettingsManager.ts`. This manager will handle storing and retrieving Git credentials securely. Expose its functionality to the renderer via IPC.",
      "context": [],
      "createdAt": "2025-10-24T14:04:15.877Z",
      "updatedAt": "2025-10-24T14:47:00.620Z",
      "completedAt": "2025-10-24T14:47:00.620Z"
    },
    {
      "id": "d318f7e4-4116-4f31-8813-15004bd380ff",
      "status": "+",
      "title": "Implement Backend Git Service for Repository Monitoring",
      "description": "Develop the core logic within `src/logic/git/GitManager.ts`. This service will monitor all project repositories. It will implement a `StoryResolver` function that parses branch names following the `features/<storyId>` convention to extract story IDs. This resolver will be used with the `resolveChangesToStories` method from `GitTools` to identify feature branches, calculate their ahead/behind status, and aggregate this data for the renderer.",
      "context": [],
      "createdAt": "2025-10-24T14:06:40.308Z",
      "updatedAt": "2025-10-24T14:50:21.444Z",
      "completedAt": "2025-10-24T14:50:21.444Z"
    },
    {
      "id": "5c721227-f437-4766-8160-addfc5fe08db",
      "status": "+",
      "title": "Establish IPC Layer for Git Service Communication",
      "description": "Create the necessary IPC channels to connect the backend `GitManager` service with the renderer. This involves defining channel keys in `src/preload/ipcHandlersKeys.ts`, implementing main process handlers, exposing the interface in `src/preload/index.ts`, and defining the service type in `src/renderer/src/services/gitService.ts`.",
      "context": [],
      "createdAt": "2025-10-24T14:06:40.311Z",
      "updatedAt": "2025-10-24T14:51:47.921Z",
      "completedAt": "2025-10-24T14:51:47.921Z"
    },
    {
      "id": "37dd96d8-3be1-46d0-a038-37a0901af4f7",
      "status": "+",
      "title": "Create Frontend State Management for Git Data",
      "description": "Implement frontend state management for Git data by creating a `GitContext.tsx` in `src/renderer/src/contexts/` and a `useGit.tsx` hook in `src/renderer/src/hooks/`. The hook will use the `gitService` to fetch and provide data to the context, following the pattern of existing hooks like `useLiveData.tsx`.",
      "context": [],
      "createdAt": "2025-10-24T14:06:40.312Z",
      "updatedAt": "2025-10-24T14:52:47.353Z",
      "completedAt": "2025-10-24T14:52:47.353Z"
    },
    {
      "id": "2f65bc15-c493-44bb-82be-83c661e00b9b",
      "status": "+",
      "title": "Implement Git Panel UI with Project Views",
      "description": "Build the main UI components for the Git feature. Add a 'Git' section to the navigation with two subviews: 'Current project' and 'All projects'. These views will display pending feature branches for the active project and all projects, respectively, using data from the `useGit` hook.",
      "context": [],
      "createdAt": "2025-10-24T14:06:40.313Z",
      "updatedAt": "2025-10-24T14:58:56.020Z",
      "completedAt": "2025-10-24T14:58:56.020Z"
    },
    {
      "id": "e37e222e-2727-4240-baf7-c336b087c4bf",
      "status": "+",
      "title": "Design and Implement Git Merge Popup",
      "description": "Create a modal component for the Git merge workflow. This popup will show contextual information (Project, Story, Branch), a per-file diff viewer, and placeholders for future analysis features like 'Compilation Impact', 'Tests Impact', and 'Diff Coverage'.",
      "context": [],
      "createdAt": "2025-10-24T14:06:40.314Z",
      "updatedAt": "2025-10-24T15:04:52.932Z",
      "completedAt": "2025-10-24T15:04:52.932Z"
    },
    {
      "id": "d08e8344-e4bd-4552-8a87-d41e7a4ce814",
      "status": "+",
      "title": "Implement Merge and Conflict Resolution Logic",
      "description": "Develop the backend logic in `GitManager.ts` and the frontend UI flow for handling merges and conflicts. The backend method must be robust with timeouts and clear error handling. If a merge results in conflicts, the UI will transition to a dedicated conflict resolution view.",
      "context": [],
      "createdAt": "2025-10-24T14:06:40.315Z",
      "updatedAt": "2025-10-24T15:11:43.480Z",
      "completedAt": "2025-10-24T15:11:43.480Z"
    },
    {
      "id": "da291627-6b44-4e5d-a19a-30d923410493",
      "status": "+",
      "title": "Expose GitManager Methods via IPC",
      "description": "Update `src/preload/ipcHandlersKeys.ts` to define a comprehensive set of IPC channels for Git operations. Ensure the following keys are present, adding them if they are missing: `GIT_TODO` (for fetching pending branches), `GIT_GET_BRANCH_DIFF_SUMMARY`, `GIT_GET_MERGE_PLAN`, `GIT_APPLY_MERGE`, and `GIT_GET_LOCAL_STATUS`. These keys will create a complete contract between the main and renderer processes for the required Git functionality.",
      "context": [],
      "createdAt": "2025-10-24T15:36:03.838Z",
      "updatedAt": "2025-10-24T15:41:35.371Z",
      "completedAt": "2025-10-24T15:41:35.371Z"
    },
    {
      "id": "39bc8bed-a411-4e3b-ac83-00da808e5a5c",
      "status": "?",
      "title": "Implement GitManager Methods using GitTools",
      "description": "Implement the corresponding handler methods in `src/logic/git/GitManager.ts` for the IPC keys defined in `ipcHandlersKeys.ts`. Each handler should invoke the appropriate method from the `GitTools` instance. For example, the handler for `GIT_GET_BRANCH_DIFF_SUMMARY` should call `tools.getBranchDiffSummary`, and the handler for `GIT_APPLY_MERGE` should call `tools.applyMerge`. Ensure that all arguments are passed correctly and results are returned to the renderer.",
      "context": [],
      "createdAt": "2025-10-24T15:36:03.840Z",
      "updatedAt": "2025-10-24T15:42:19.661Z",
      "rejection": "Blocked: Awaiting the content of 'src/logic/BaseManager.ts' to implement and register the Git IPC handlers following the project's BaseManager pattern."
    },
    {
      "id": "b39ea9e9-306e-459c-9a8e-c17b277e2d5a",
      "status": "-",
      "title": "Connect Renderer Git Service to Main Process",
      "description": "Bridge the main and renderer processes. First, in `src/preload/index.ts`, update the `GIT_API` object to expose all the new Git methods, mapping them to their respective `IPC_HANDLER_KEYS`. Second, update the `GitService` type definition in `src/renderer/src/services/gitService.ts` to include the signatures for all the newly exposed methods, ensuring type safety in the renderer.",
      "context": [],
      "createdAt": "2025-10-24T15:36:03.840Z",
      "updatedAt": "2025-10-24T15:38:13.160Z"
    },
    {
      "id": "4bba9a50-5e90-45a4-b69e-55cec5d9c236",
      "status": "-",
      "title": "Implement GitContext for UI State Management",
      "description": "Refactor the frontend state management for Git. First, delete the redundant hook file at `src/renderer/src/hooks/useGit.tsx`. Second, enhance `src/renderer/src/contexts/GitContext.tsx` to manage all Git state and actions. The context should not only provide data (e.g., `allProjects`) but also expose action functions (e.g., `applyMerge`, `getDiff`) that call the corresponding methods from `gitService`. Move any derived state logic (like `pendingAll` and `pendingCurrent`) into the context provider. Finally, ensure the `useGit` hook is exported from the context file itself for convenient access.",
      "context": [],
      "createdAt": "2025-10-24T15:36:03.841Z",
      "updatedAt": "2025-10-24T15:38:13.161Z"
    }
  ],
  "featureIdToDisplayIndex": {
    "e507c3e6-bef1-48d3-a746-446a0f099584": 1,
    "d318f7e4-4116-4f31-8813-15004bd380ff": 2,
    "5c721227-f437-4766-8160-addfc5fe08db": 3,
    "37dd96d8-3be1-46d0-a038-37a0901af4f7": 4,
    "2f65bc15-c493-44bb-82be-83c661e00b9b": 5,
    "e37e222e-2727-4240-baf7-c336b087c4bf": 6,
    "d08e8344-e4bd-4552-8a87-d41e7a4ce814": 7,
    "da291627-6b44-4e5d-a19a-30d923410493": 8,
    "39bc8bed-a411-4e3b-ac83-00da808e5a5c": 9,
    "b39ea9e9-306e-459c-9a8e-c17b277e2d5a": 10,
    "4bba9a50-5e90-45a4-b69e-55cec5d9c236": 11
  },
  "createdAt": "2025-10-21T17:28:55.063Z",
  "updatedAt": "2025-10-24T13:30:54.142Z"
}