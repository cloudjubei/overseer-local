{
  "id": "31525c17-b752-45a1-8cb8-fbdbb750d8e7",
  "status": "-",
  "title": "Create Sourcetree replacement - a popular version control management app",
  "description": "Goal Provide built-in Git workflows so users do not need external tools (e.g., SourceTree) for routine tasks: viewing repo status and branches, reviewing diffs (working tree, staged, and branch-to-base), running focused tests, merging, and resolving conflicts. Scope for this iteration - Navigation and views: - Add a Git section with two subviews: 'Current project' and 'All projects'. - Current project shows pending operations for the active repo; All projects aggregates across all known projects from ProjectContext (src/renderer/src/contexts/ProjectContext.tsx). - Pending operations definition: - A pending operation is a feature branch with commits ahead of the base branch (default base is the current branch). Feature branches follow the existing convention 'features/<storyId>' where storyId is a UUID. We may later extend to 'features/<storyId>.<featureId>' but uniqueness is already guaranteed by storyId. - Merge flow: - Clicking a pending item opens a Git Merge popup that shows context (project/story/branch), per-file diffs, and analysis placeholders: compilation impact, tests impact, and diff coverage across changed lines. These analyses start as stubs/adapters and should degrade gracefully when not available. On conflicts, the flow should transition into the conflict resolution UI. - Integration notes: - Reuse GitMonitor for status and add aggregation to compute ahead/behind and feature branches across projects. - Reuse/extend existing functions in src/logic/git-monitor/storyBranchNaming.js to resolve story IDs from branch names and expose this mapping to the renderer. - Respect current behavior where agents run from the branch they started; do not force checkouts. All operations must be safe-by-default with timeouts and clear error surfacing. Out of scope for this iteration - Remote PR management, stash workflows, and hunk-level staging (planned separately). Acceptance (high level) - Users can navigate to a Git panel, see pending branches grouped appropriately, open a merge popup with diffs and analysis placeholders, execute a merge, and resolve conflicts without leaving the app.\n\nThe main process class responsible for interfacing with `thefactory-tools` which provides all git operations is @src/logic/git/GitManager.ts . GitManager interfaces with the renderer via @src/renderer/src/services/gitService.ts and @src/preload/ipcHandlersKeys.ts and @src/preload/index.ts . And the forefront interface for all views that is making the usage of all git operations easy is @src/renderer/src/contexts/GitContext.tsx .\n\nAll the relevant types from `thefactory-tools` i.e. `GitTools` can be found in the local copy at:\n`src/logic/git/gitTypes.copy.ts`",
  "features": [
    {
      "id": "e507c3e6-bef1-48d3-a746-446a0f099584",
      "status": "+",
      "title": "Refactor Git credentials management to the main process",
      "description": "Move Git credentials logic from the renderer (`GitHubCredentialsContext.tsx`, `utils/GitHubCredentialsManager.ts`) to the main process. Create a new `CredentialsManager.ts` in `src/logic/git/` similar to `SettingsManager.ts`. This manager will handle storing and retrieving Git credentials securely. Expose its functionality to the renderer via IPC.",
      "context": [],
      "createdAt": "2025-10-24T14:04:15.877Z",
      "updatedAt": "2025-10-24T14:47:00.620Z",
      "completedAt": "2025-10-24T14:47:00.620Z"
    },
    {
      "id": "d318f7e4-4116-4f31-8813-15004bd380ff",
      "status": "+",
      "title": "Implement Backend Git Service for Repository Monitoring",
      "description": "Develop the core logic within `src/logic/git/GitManager.ts`. This service will monitor all project repositories. It will implement a `StoryResolver` function that parses branch names following the `features/<storyId>` convention to extract story IDs. This resolver will be used with the `resolveChangesToStories` method from `GitTools` to identify feature branches, calculate their ahead/behind status, and aggregate this data for the renderer.",
      "context": [],
      "createdAt": "2025-10-24T14:06:40.308Z",
      "updatedAt": "2025-10-24T14:50:21.444Z",
      "completedAt": "2025-10-24T14:50:21.444Z"
    },
    {
      "id": "5c721227-f437-4766-8160-addfc5fe08db",
      "status": "+",
      "title": "Establish IPC Layer for Git Service Communication",
      "description": "Create the necessary IPC channels to connect the backend `GitManager` service with the renderer. This involves defining channel keys in `src/preload/ipcHandlersKeys.ts`, implementing main process handlers, exposing the interface in `src/preload/index.ts`, and defining the service type in `src/renderer/src/services/gitService.ts`.",
      "context": [],
      "createdAt": "2025-10-24T14:06:40.311Z",
      "updatedAt": "2025-10-24T14:51:47.921Z",
      "completedAt": "2025-10-24T14:51:47.921Z"
    },
    {
      "id": "37dd96d8-3be1-46d0-a038-37a0901af4f7",
      "status": "+",
      "title": "Create Frontend State Management for Git Data",
      "description": "Implement frontend state management for Git data by creating a `GitContext.tsx` in `src/renderer/src/contexts/` and a `useGit.tsx` hook in `src/renderer/src/hooks/`. The hook will use the `gitService` to fetch and provide data to the context, following the pattern of existing hooks like `useLiveData.tsx`.",
      "context": [],
      "createdAt": "2025-10-24T14:06:40.312Z",
      "updatedAt": "2025-10-24T14:52:47.353Z",
      "completedAt": "2025-10-24T14:52:47.353Z"
    },
    {
      "id": "2f65bc15-c493-44bb-82be-83c661e00b9b",
      "status": "+",
      "title": "Implement Git Panel UI with Project Views",
      "description": "Build the main UI components for the Git feature. Add a 'Git' section to the navigation with two subviews: 'Current project' and 'All projects'. These views will display pending feature branches for the active project and all projects, respectively, using data from the `useGit` hook.",
      "context": [],
      "createdAt": "2025-10-24T14:06:40.313Z",
      "updatedAt": "2025-10-24T14:58:56.020Z",
      "completedAt": "2025-10-24T14:58:56.020Z"
    },
    {
      "id": "e37e222e-2727-4240-baf7-c336b087c4bf",
      "status": "+",
      "title": "Design and Implement Git Merge Popup",
      "description": "Create a modal component for the Git merge workflow. This popup will show contextual information (Project, Story, Branch), a per-file diff viewer, and placeholders for future analysis features like 'Compilation Impact', 'Tests Impact', and 'Diff Coverage'.",
      "context": [],
      "createdAt": "2025-10-24T14:06:40.314Z",
      "updatedAt": "2025-10-24T15:04:52.932Z",
      "completedAt": "2025-10-24T15:04:52.932Z"
    },
    {
      "id": "d08e8344-e4bd-4552-8a87-d41e7a4ce814",
      "status": "+",
      "title": "Implement Merge and Conflict Resolution Logic",
      "description": "Develop the backend logic in `GitManager.ts` and the frontend UI flow for handling merges and conflicts. The backend method must be robust with timeouts and clear error handling. If a merge results in conflicts, the UI will transition to a dedicated conflict resolution view.",
      "context": [],
      "createdAt": "2025-10-24T14:06:40.315Z",
      "updatedAt": "2025-10-24T15:11:43.480Z",
      "completedAt": "2025-10-24T15:11:43.480Z"
    },
    {
      "id": "da291627-6b44-4e5d-a19a-30d923410493",
      "status": "+",
      "title": "Expose GitManager Methods via IPC",
      "description": "Update `src/preload/ipcHandlersKeys.ts` to define a comprehensive set of IPC channels for Git operations. Ensure the following keys are present, adding them if they are missing: `GIT_TODO` (for fetching pending branches), `GIT_GET_BRANCH_DIFF_SUMMARY`, `GIT_GET_MERGE_PLAN`, `GIT_APPLY_MERGE`, and `GIT_GET_LOCAL_STATUS`. These keys will create a complete contract between the main and renderer processes for the required Git functionality.",
      "context": [],
      "createdAt": "2025-10-24T15:36:03.838Z",
      "updatedAt": "2025-10-24T15:41:35.371Z",
      "completedAt": "2025-10-24T15:41:35.371Z"
    },
    {
      "id": "39bc8bed-a411-4e3b-ac83-00da808e5a5c",
      "status": "+",
      "title": "Implement GitManager Methods using GitTools",
      "description": "Implement the corresponding handler methods in `src/logic/git/GitManager.ts` for the IPC keys defined in `ipcHandlersKeys.ts`. Each handler should invoke the appropriate method from the `GitTools` instance. For example, the handler for `GIT_GET_BRANCH_DIFF_SUMMARY` should call `tools.getBranchDiffSummary`, and the handler for `GIT_APPLY_MERGE` should call `tools.applyMerge`. Ensure that all arguments are passed correctly and results are returned to the renderer.",
      "context": [],
      "createdAt": "2025-10-24T15:36:03.840Z",
      "updatedAt": "2025-10-27T09:59:55.884Z",
      "blockers": [],
      "completedAt": "2025-10-27T09:59:55.884Z"
    },
    {
      "id": "b39ea9e9-306e-459c-9a8e-c17b277e2d5a",
      "status": "+",
      "title": "Connect Renderer Git Service to Main Process",
      "description": "Bridge the main and renderer processes. First, in `src/preload/index.ts`, update the `GIT_API` object to expose all the new Git methods, mapping them to their respective `IPC_HANDLER_KEYS`. Second, update the `GitService` type definition in `src/renderer/src/services/gitService.ts` to include the signatures for all the newly exposed methods, ensuring type safety in the renderer.",
      "context": [],
      "createdAt": "2025-10-24T15:36:03.840Z",
      "updatedAt": "2025-10-24T15:45:51.531Z",
      "completedAt": "2025-10-24T15:45:51.531Z"
    },
    {
      "id": "4bba9a50-5e90-45a4-b69e-55cec5d9c236",
      "status": "+",
      "title": "Implement GitContext for UI State Management",
      "description": "Refactor the frontend state management for Git. First, delete the redundant hook file at `src/renderer/src/hooks/useGit.tsx`. Second, enhance `src/renderer/src/contexts/GitContext.tsx` to manage all Git state and actions. The context should not only provide data (e.g., `allProjects`) but also expose action functions (e.g., `applyMerge`, `getDiff`) that call the corresponding methods from `gitService`. Move any derived state logic (like `pendingAll` and `pendingCurrent`) into the context provider. Finally, ensure the `useGit` hook is exported from the context file itself for convenient access.",
      "context": [],
      "createdAt": "2025-10-24T15:36:03.841Z",
      "updatedAt": "2025-10-24T15:48:47.261Z",
      "completedAt": "2025-10-24T15:48:47.261Z"
    },
    {
      "id": "93aa7e98-7cb8-4426-8842-c1a2c200c5bb",
      "status": "+",
      "title": "Fix GitView Compilation and Implement Data Fetching in GitContext",
      "description": "`src/renderer/src/screens/GitView.tsx` has compilation errors because it expects git status data (`currentProject`, `allProjects`) and a `refresh` function from the `useGit` hook, but `GitContext` does not provide them. This feature will implement the necessary data fetching and state management logic within `GitContext.tsx`. It will fetch the git status for both the current project and all projects, manage loading/error states, and expose the data and a `refresh` function to the `GitView` component, thereby fixing the compilation errors and making the view functional.",
      "context": [],
      "createdAt": "2025-10-27T11:12:37.255Z",
      "updatedAt": "2025-10-27T11:17:25.063Z",
      "completedAt": "2025-10-27T11:17:25.063Z"
    },
    {
      "id": "af235bbc-3a5d-42ad-8eea-1d77c65caa04",
      "status": "+",
      "title": "Remove Refresh Button from GitView",
      "description": "The 'Refresh' button in '@src/renderer/src/screens/GitView.tsx' is no longer necessary as the view is now updated automatically by the GitMonitor service. This feature involves removing the button and any associated logic from the component.",
      "context": [],
      "createdAt": "2025-10-27T14:22:25.551Z",
      "updatedAt": "2025-10-27T14:32:34.235Z",
      "completedAt": "2025-10-27T14:32:34.235Z"
    },
    {
      "id": "284a207d-b6ac-421e-8199-6d02ccbe9ea6",
      "status": "+",
      "title": "Add Action Buttons to Branch Rows in GitView",
      "description": "Implement an actions section at the end of each branch row in the GitView. This section will contain three buttons:\n- **Quick Merge**: Merges the feature branch into its base branch using a default merge strategy.\n- **View**: On hover, a tooltip will display a summary of the changes in the branch.\n- **Delete**: Deletes the branch after a confirmation prompt.",
      "context": [],
      "createdAt": "2025-10-27T14:22:25.554Z",
      "updatedAt": "2025-10-27T14:36:33.276Z",
      "completedAt": "2025-10-27T14:36:33.276Z"
    },
    {
      "id": "6edc73b1-b1fa-4541-9d45-a71128a2e775",
      "status": "-",
      "title": "Refactor GitMergeModal to Use GitContext",
      "description": "The `GitMergeModal.tsx` component at '@src/renderer/src/screens/git/GitMergeModal.tsx' currently interacts directly with `gitService`. This should be refactored to use the `GitContext` for all Git operations and state management, aligning it with the application's architecture.",
      "context": [],
      "createdAt": "2025-10-27T14:22:25.556Z",
      "updatedAt": "2025-10-27T14:22:25.556Z"
    },
    {
      "id": "85ba3de7-7c40-4e6f-ac77-8f7f9ce2ad35",
      "status": "-",
      "title": "Implement Merge Functionality in GitMergeModal",
      "description": "Add the logic to the `GitMergeModal` to execute a merge operation. This will involve calling the appropriate function from the `GitContext`, handling the success and failure states of the merge, and transitioning to the conflict resolution UI if necessary.",
      "context": [],
      "createdAt": "2025-10-27T14:22:25.557Z",
      "updatedAt": "2025-10-27T14:22:25.557Z"
    },
    {
      "id": "70a7778e-a8fb-46fd-be5f-5dc1738b4881",
      "status": "-",
      "title": "Add Color-Coded Diffs to GitMergeModal",
      "description": "Enhance the diff viewer within `GitMergeModal.tsx`. The view should visually distinguish between code insertions and deletions by color-coding them. Insertions should be highlighted in green, and deletions in red.",
      "context": [],
      "createdAt": "2025-10-27T14:22:25.559Z",
      "updatedAt": "2025-10-27T14:22:25.559Z"
    },
    {
      "id": "2d942460-1b9d-409b-9b22-b692a7eea38a",
      "status": "-",
      "title": "Implement Analysis Tabs in GitMergeModal",
      "description": "The bottom section of the `GitMergeModal` currently shows placeholders ('Not available') for 'Compilation Impact', 'Tests Impact', and 'Diff Coverage'. This feature is dedicated to implementing the underlying analysis for these sections and displaying the results. Each analysis will be presented in its own tab.",
      "context": [],
      "createdAt": "2025-10-27T14:22:25.560Z",
      "updatedAt": "2025-10-27T14:22:25.560Z"
    },
    {
      "id": "df27b5ca-a8b3-4a65-a05c-595db51743ff",
      "status": "-",
      "title": "Redesign GitMergeModal Layout with Sticky Tabs",
      "description": "Rework the layout of `GitMergeModal.tsx`. The main sections (Changes, Compilation Impact, Tests Impact, Diff Coverage) should be organized into a tabbed interface. The tab headers must remain fixed at the top of the modal, while the content of the selected tab should be scrollable.",
      "context": [],
      "createdAt": "2025-10-27T14:22:25.561Z",
      "updatedAt": "2025-10-27T14:22:25.561Z"
    }
  ],
  "featureIdToDisplayIndex": {
    "e507c3e6-bef1-48d3-a746-446a0f099584": 1,
    "d318f7e4-4116-4f31-8813-15004bd380ff": 2,
    "5c721227-f437-4766-8160-addfc5fe08db": 3,
    "37dd96d8-3be1-46d0-a038-37a0901af4f7": 4,
    "2f65bc15-c493-44bb-82be-83c661e00b9b": 5,
    "e37e222e-2727-4240-baf7-c336b087c4bf": 6,
    "d08e8344-e4bd-4552-8a87-d41e7a4ce814": 7,
    "da291627-6b44-4e5d-a19a-30d923410493": 8,
    "39bc8bed-a411-4e3b-ac83-00da808e5a5c": 9,
    "b39ea9e9-306e-459c-9a8e-c17b277e2d5a": 10,
    "4bba9a50-5e90-45a4-b69e-55cec5d9c236": 11,
    "93aa7e98-7cb8-4426-8842-c1a2c200c5bb": 12,
    "af235bbc-3a5d-42ad-8eea-1d77c65caa04": 13,
    "284a207d-b6ac-421e-8199-6d02ccbe9ea6": 14,
    "6edc73b1-b1fa-4541-9d45-a71128a2e775": 15,
    "85ba3de7-7c40-4e6f-ac77-8f7f9ce2ad35": 16,
    "70a7778e-a8fb-46fd-be5f-5dc1738b4881": 17,
    "2d942460-1b9d-409b-9b22-b692a7eea38a": 18,
    "df27b5ca-a8b3-4a65-a05c-595db51743ff": 19
  },
  "createdAt": "2025-10-21T17:28:55.063Z",
  "updatedAt": "2025-10-27T09:51:40.369Z"
}