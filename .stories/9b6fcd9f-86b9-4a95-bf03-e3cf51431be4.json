{
  "id": "9b6fcd9f-86b9-4a95-bf03-e3cf51431be4",
  "status": "-",
  "title": "Git Monitor and version control in-app",
  "description": "The status of the stories isn't updated\nWhen the Agent runs it updates the status in its own local copy.\nThis project's stories/features statuses should update too.\nAs a later part, we also want to be observing git commits - if there's a commit in the appropriate branch (named after the story) with a given featureId specified, it should be possible to see the story.json inside there and update info HERE in this project based off it.\nAs a further improvement - we can make a 1-click merge solution so that the commit tied to the feature will get merged with the current code base.\nThe non-renderer code should be placed under src/git-monitor whereas renderer related things under src/renderer/services/getService.ts and in appropriate screens/components",
  "features": [
    {
      "id": "9de723a2-db03-4ff0-aab8-8615b9473664",
      "status": "+",
      "title": "Create a Git Monitoring Manager in the Main Process",
      "description": "Implement a service in the Electron main process to periodically monitor the local git repository for changes. This service will be the foundation for tracking story progress. It should be able to fetch updates from remotes and check for new commits on branches. Following other managers, such as @src/factory-tools/FactoryToolsManager.js and its renderer counterpart @src/renderer/services/factoryService.ts  - create a file @src/git-monitor/GitMonitorManager.js and @src/renderer/services/gitMonitorService.ts . Make sure to update @src/ipcHandlersKeys.js , @src/managers.js , @src/preload.js and @src/types/external.d.ts - following the same exact pattern that other Managers and their renderer Services take.",
      "context": [
        "src/factory-tools/FactoryToolsManager.js",
        "src/ipcHandlersKeys.js",
        "src/managers.js",
        "src/preload.js",
        "src/types/external.d.ts",
        "src/renderer/services/factoryService.ts"
      ],
      "blockers": [],
      "createdAt": "2025-09-16T13:05:37.980Z",
      "completedAt": "2025-09-16T14:45:45.915Z",
      "updatedAt": "2025-09-16T13:05:37.980Z"
    },
    {
      "id": "d242f688-3d1d-4d49-b4e4-41f62aec33fd",
      "status": "+",
      "title": "Implement Story-to-Branch Naming Convention Logic",
      "description": "Create a utility module that maps a story ID to a specific git branch name, following the convention `features/<storyId>`. This will be used by the Git Monitoring Service to identify which branches to watch for updates related to active stories.\nThis should live close to the new manager in @src/git-monitor/GitMonitorManager.js",
      "context": [],
      "blockers": [],
      "createdAt": "2025-09-16T13:05:37.980Z",
      "completedAt": "2025-09-16T13:30:49.665Z",
      "updatedAt": "2025-09-16T13:05:37.980Z"
    },
    {
      "id": "db4124ad-21e9-460b-854c-f4a885688400",
      "status": "+",
      "title": "Develop Commit Analyzer to Extract Feature Status",
      "description": "Build a module that can inspect a given git commit on a story branch. It will search for a `story.json` file within the commit's file tree. If the file exists, it will parse it to extract the status and details of the features associated with the story. This will use git commands to view file contents at a specific revision without checking out the entire branch.\nThis should live close to the new manager in @src/git-monitor/GitMonitorManager.js",
      "context": [],
      "blockers": [],
      "createdAt": "2025-09-16T13:05:37.980Z",
      "completedAt": "2025-09-16T11:38:58.998Z",
      "updatedAt": "2025-09-16T13:05:37.980Z"
    },
    {
      "id": "7b9c8ad9-05ec-4281-bbc4-11354a121ecb",
      "status": "+",
      "title": "Implement Logic to Update Local Story State from Commit Data",
      "description": "Create a function that takes the data extracted from a commit's `story.json` and updates the corresponding local `.stories/<storyId>/story.json` file. The update should focus on syncing feature statuses and any other relevant metadata from the agent's work-in-progress commit.\nThis should live close to the new manager in @src/git-monitor/GitMonitorManager.js",
      "context": [],
      "blockers": [],
      "createdAt": "2025-09-16T13:05:37.980Z",
      "completedAt": "2025-09-16T16:07:05.038Z",
      "updatedAt": "2025-09-16T13:05:37.980Z"
    },
    {
      "id": "f75ee4d1-8928-4634-bb6d-56b2f2f63ad2",
      "status": "+",
      "title": "Add 'Merge' Button to Story UI for Completed Features",
      "description": "In the renderer process, add a 'Merge' button to the story view. This button will be enabled when the Git Monitoring Service detects that a story branch has unmerged commits. Clicking the button will trigger an IPC call to the main process to execute a git merge of the story branch into the current main development branch.",
      "context": [],
      "blockers": [],
      "createdAt": "2025-09-16T13:05:37.980Z",
      "completedAt": "2025-09-16T11:05:32.792Z",
      "updatedAt": "2025-09-16T13:05:37.980Z"
    },
    {
      "id": "2e442f2c-e7db-445a-8cfd-755260749820",
      "status": "+",
      "title": "Use the commitAnalyzer and updateLocalStoryStateFromCommit inside GitMonitorManager",
      "description": "@src/git-monitor/GitMonitorManager.js needs to be updated to use the two files that serve as huge utils.\nAdditionaly, all git related logic should moved to a file @src/git-monitor/gitHelper.js . If @src/git-monitor/storyBranchNaming.js is not useful then get rid off it or make use of it. Perhaps all three files - @src/git-monitor/updateLocalStoryStateFromCommit.js , @src/git-monitor/CommitAnalyzer.js and  @src/git-monitor/storyBranchNaming.js  should be simply moved to a file @src/git-monitor/gitMonitorUtils.js",
      "plan": "",
      "context": [
        "src/git-monitor/GitMonitorManager.js",
        "src/git-monitor/storyBranchNaming.js",
        "src/git-monitor/updateLocalStoryStateFromCommit.js",
        "src/git-monitor/CommitAnalyzer.js"
      ],
      "acceptance": [],
      "blockers": [],
      "createdAt": "2025-09-16T13:05:37.980Z",
      "completedAt": "2025-09-16T17:40:03.645Z",
      "updatedAt": "2025-09-16T13:05:37.980Z"
    },
    {
      "id": "dca334a0-9739-4026-9980-765ec6423b79",
      "status": "-",
      "title": "Create Sourcetree replacement - a popular version control management app",
      "description": "We want a user to not have the need to switch between this app and an app like SourceTree to perform all the tasks needed with merging, resolving conflicts, seeing updates, seeing diffs and seeing diff tests.",
      "plan": "",
      "context": [],
      "acceptance": [],
      "blockers": [],
      "createdAt": "2025-09-16T13:05:37.980Z",
      "updatedAt": "2025-09-30T12:21:24.530Z"
    }
  ],
  "featureIdToDisplayIndex": {
    "9de723a2-db03-4ff0-aab8-8615b9473664": 1,
    "d242f688-3d1d-4d49-b4e4-41f62aec33fd": 2,
    "db4124ad-21e9-460b-854c-f4a885688400": 3,
    "7b9c8ad9-05ec-4281-bbc4-11354a121ecb": 4,
    "f75ee4d1-8928-4634-bb6d-56b2f2f63ad2": 5,
    "2e442f2c-e7db-445a-8cfd-755260749820": 6,
    "dca334a0-9739-4026-9980-765ec6423b79": 7
  },
  "createdAt": "2025-09-16T13:05:37.980Z",
  "updatedAt": "2025-09-30T12:21:52.382Z"
}