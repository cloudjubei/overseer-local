[
  {
    "role": "user",
    "content": "# Speccer Agent Task Execution\n\nYou are the Speccer Agent. Your single responsibility is to analyze a user-provided task description and break it down into a series of atomic, implementable features. Your goal is to produce a complete and logical plan for the Developer agents to follow. You should try to tailor the feature titles and descriptions to be the best for LLMs to follow.\n\n## Workflow\n\n1.  **Analyze**: Carefully read the task's title and description to fully understand the goal. Consider the project's existing structure and conventions.\n2.  **Consult the File Structure**: Use the provided `docs/FILE_ORGANISATION.md` to understand the project context.\n3.  **Investigate**: Use the `list_files` and `search_files` tools for all file operations to understand the project further.\n4.  **Create Features**: Formulate a list of consecutive, atomic features required to accomplish the task. Each feature should be a small, logical, and testable unit of work. Use the `create_feature` tool for each one you identify.\n3.  **Finish**: Once the features are created, you **MUST** call the `finish_spec` tool to complete your assignment.\n4.  **Handle Blockers**: If you cannot proceed, you **MUST** use `block_task` to explain the reason for being stuck - this signals that you are blocked and ready for a new assignment.\n\n## Notes\n\nFor context on the overall project structure, including how tasks and features are organized, refer to `docs/FILE_ORGANISATION.md`. You should always update this file with new major directory changes.\n\n#CURRENT TASK (ID: f67e8921-b197-40c9-9154-e95db8f27deb)\n##TITLE:\nUI Improvements\n##DESCRIPTION:\nVarious UI improvements to the app\n\n\n\n\n\n\n\n\n#TOOL SIGNATURES:\n- read_files(paths: list[str]) -> list[str] - Read the content of one or more files at the given relative paths. Returns an array of strings (one per file).\n- search_files(query: str, path: str = '.') -> list[str] - Search for files by name or textual content under the given path. Returns matching relative paths. The query input must be a space separated list of keywords\n- block_feature(reason: str) - Stop work on the current feature and report why you are blocked (e.g., missing context, unclear requirements).\n- finish_feature() - Mark the current feature as complete and end the run. Use only when the work fully meets the acceptance criteria.\n- list_files(path: str) - List files and directories at a relative path from the project root.\n- create_feature(title: str, description: str) - Define and add a new, atomic feature to the task. Include a concise title and a clear description.\n- finish_spec() - Signal that the feature specification is complete for the current task.\n- block_task() - Stop work on the task and report why you are blocked at the task level.\n\n#RESPONSE FORMAT INSTRUCTIONS:\nYou **MUST** respond in a single, valid JSON object. This object must adhere to the following structure:\n```json\n{\n  \"thoughts\": \"A string explaining your reasoning, analysis, and plan for this step. For example: 'I need to create the main application file and then add the basic boilerplate.'\",\n  \"tool_calls\": [\n    {\n      \"tool_name\": \"name_of_the_tool_to_call\",\n      \"arguments\": {\n        \"arg1\": \"value1\",\n        \"arg2\": \"value2\"\n      }\n    }\n  ]\n}\n```\nThe thoughts field is for your reasoning, and tool_calls is a list of actions to execute.\nYour response will be parsed as JSON. Do not include any text outside of this JSON object.\nAs responses to the tool calls you will send, you will also receive JSON objects in the form:\n```json\n{\n\"name\":\"tool_name\",\n\"result\":\"...\"\n}\n```\n\n#CONTEXT FILES PROVIDED:\n{\"docs/FILE_ORGANISATION.md\":\"# File Organisation\\n\\nPurpose\\n- Provide a high-level map of the repository so contributors and agents can quickly find the right area.\\n- This is not a change log and not a per-file inventory.\\n\\nEditing Rules (read before updating)\\n- Only document major directories and subsystems. Do not list individual files.\\n- Keep bullets short (one sentence) and avoid \\\"New:\\\" or historical notes.\\n- When adding/removing a major directory or moving a subsystem, update a single bullet here.\\n- Prefer linking or pointing to deeper docs (README/OVERVIEW) rather than describing internals here.\\n- Never document build related artifacts.\\n\\nTop-Level Layout\\n- docs/: Project-wide documentation and specs; single source of truth for protocols and workflows.\\n- src/: Application source (Electron app: main, preload, renderer, and tooling).\\n  - renderer/: React UI (components, screens, hooks, services, navigation, preview runtime).\\n    - components/agents/: Agent-specific UI (status chips, run bullets, model selectors, project/cost/token chips).\\n    - services/: Renderer-side services (e.g., pricingService for LLM price lookup via IPC).\\n    - hooks/useShortcuts: Keyboard shortcuts provider; respects user-selected modifier and avoids interfering with text input.\\n  - tools/: Developer and agent tooling (preview analyzer, factory integration, helpers).\\n  - main.js: Electron main process entry.\\n  - preload.js: Safe IPC surface exposed to the renderer.\\n- packages/: Local monorepo packages.\\n  - factory-ts/: Agent orchestration library (orchestrator, pricing, history, completion, git integration).\\n- scripts/: Project automation scripts and CLIs.\\n- Root config files: package.json, tsconfig.json, tailwind/postcss configs, vite configs, forge config, .env.\\n\\nWhere to Learn More\\n- Agents and roles: packages/factory-ts/docs (AGENT_*.md).\\n- Factory TS overview and APIs: packages/factory-ts (see README/OVERVIEW files in that package).\\n- Preview system: see src/renderer/preview and related docs in docs/ (preview usage and analyzer).\\n- IPC and factory integration: src/tools/factory (renderer bridge and main process handlers).\\n\\nConventions (brief)\\n- Keep cross-cutting documentation in docs/; place domain-specific or area-specific READMEs next to the code they describe.\\n- Use descriptive directory names and keep responsibilities separated by area (renderer vs main vs tools vs packages).\\n\\nEnvironment & Credentials\\n- .env at the repo root is used for local development (e.g., credentials consumed by tooling and factory-ts).\\n\\nNotes\\n- If you are unsure whether something belongs here, it probably belongs in a local README under its directory, with this file providing only a one-line pointer to that area.\\n\"}\n\nBegin now."
  },
  {
    "role": "assistant",
    "content": "{\n  \"thoughts\": \"The task 'UI Improvements' is vague. I need to inspect the repository structure and existing UI code (React renderer) to propose concrete, atomic UI enhancement features that align with current patterns (Tailwind, Electron, specific components like status chips, model selectors, etc.). I will list and search the renderer directory to identify key UI areas and then create a set of small, testable features (e.g., consistent theming, accessibility pass, loading states, keyboard shortcuts hints, tooltips, responsive tweaks). After defining a reasonable set of atomic features, I will finish the spec.\",\n  \"tool_calls\": [\n    {\n      \"tool_name\": \"list_files\",\n      \"arguments\": {\n        \"path\": \"src\"\n      }\n    },\n    {\n      \"tool_name\": \"list_files\",\n      \"arguments\": {\n        \"path\": \"src/renderer\"\n      }\n    },\n    {\n      \"tool_name\": \"list_files\",\n      \"arguments\": {\n        \"path\": \"src/renderer/components\"\n      }\n    },\n    {\n      \"tool_name\": \"list_files\",\n      \"arguments\": {\n        \"path\": \"src/renderer/components/agents\"\n      }\n    },\n    {\n      \"tool_name\": \"list_files\",\n      \"arguments\": {\n        \"path\": \"src/renderer/services\"\n      }\n    },\n    {\n      \"tool_name\": \"list_files\",\n      \"arguments\": {\n        \"path\": \"src/renderer/hooks\"\n      }\n    },\n    {\n      \"tool_name\": \"search_files\",\n      \"arguments\": {\n        \"query\": \"TODO FIXME accessibility aria\",\n        \"path\": \"src/renderer\"\n      }\n    },\n    {\n      \"tool_name\": \"search_files\",\n      \"arguments\": {\n        \"query\": \"loading spinner skeleton\",\n        \"path\": \"src/renderer\"\n      }\n    },\n    {\n      \"tool_name\": \"search_files\",\n      \"arguments\": {\n        \"query\": \"tooltip title aria-label\",\n        \"path\": \"src/renderer\"\n      }\n    },\n    {\n      \"tool_name\": \"search_files\",\n      \"arguments\": {\n        \"query\": \"dark mode theme tailwind\",\n        \"path\": \"src\"\n      }\n    }\n  ]\n}"
  },
  {
    "role": "user",
    "content": "[{\"name\":\"list_files\",\"result\":[\"capture\",\"chat\",\"files\",\"index.css\",\"ipcHandlersKeys.js\",\"main.js\",\"managers.js\",\"notifications\",\"preload.js\",\"projects\",\"renderer\",\"settings\",\"styles\",\"tasks\",\"tools\",\"types\"]},{\"name\":\"list_files\",\"result\":[\"App.tsx\",\"components\",\"hooks\",\"navigation\",\"preview\",\"projects\",\"screens\",\"services\",\"tasks\",\"types.ts\",\"utils\"]},{\"name\":\"list_files\",\"result\":[\"agents\",\"files\",\"tasks\",\"ui\"]},{\"name\":\"list_files\",\"result\":[\"AgentModelQuickSelect.tsx\",\"AgentRunBullet.tsx\",\"AgentRunRow.tsx\",\"ChatConversation.tsx\",\"CostChip.tsx\",\"ModelChip.tsx\",\"ProjectChip.tsx\",\"StatusChip.tsx\",\"TokensChip.tsx\",\"TurnChip.tsx\"]},{\"name\":\"list_files\",\"result\":[\"agentsService.ts\",\"chatsService.ts\",\"filesService.ts\",\"notificationsService.ts\",\"pricingService.ts\",\"projectsService.ts\",\"serviceResult.ts\",\"settingsService.ts\",\"tasksService.ts\"]},{\"name\":\"list_files\",\"result\":[\"useAgents.ts\",\"useAppSettings.ts\",\"useChats.tsx\",\"useFiles.tsx\",\"useFilesAutocomplete.ts\",\"useLLMConfig.ts\",\"useNotifications.ts\",\"useProjectSettings.ts\",\"useReferencesAutocomplete.ts\",\"useShortcuts.tsx\",\"useTasks.tsx\",\"useTheme.ts\"]},{\"name\":\"search_files\",\"result\":[\"src/renderer/components/agents/AgentModelQuickSelect.tsx\",\"src/renderer/components/agents/AgentRunBullet.tsx\",\"src/renderer/components/agents/AgentRunRow.tsx\",\"src/renderer/components/agents/ChatConversation.tsx\",\"src/renderer/components/agents/CostChip.tsx\",\"src/renderer/components/agents/ModelChip.tsx\",\"src/renderer/components/agents/ProjectChip.tsx\",\"src/renderer/components/agents/StatusChip.tsx\",\"src/renderer/components/agents/TurnChip.tsx\",\"src/renderer/components/tasks/ExclamationChip.tsx\",\"src/renderer/components/tasks/FeatureForm.tsx\",\"src/renderer/components/tasks/RunAgentButton.tsx\",\"src/renderer/components/tasks/StatusControl.tsx\",\"src/renderer/components/tasks/TaskCard.tsx\",\"src/renderer/components/tasks/TaskForm.tsx\",\"src/renderer/components/tasks/WarningChip.tsx\",\"src/renderer/components/ui/Alert.tsx\",\"src/renderer/components/ui/Button.tsx\",\"src/renderer/components/ui/CollapsibleSidebar.tsx\",\"src/renderer/components/ui/CommandMenu.tsx\",\"src/renderer/components/ui/FileDisplay.tsx\",\"src/renderer/components/ui/FileMentionsTextarea.tsx\",\"src/renderer/components/ui/FileSelector.tsx\",\"src/renderer/components/ui/Icons.tsx\",\"src/renderer/components/ui/Input.tsx\",\"src/renderer/components/ui/Modal.tsx\",\"src/renderer/components/ui/SegmentedControl.tsx\",\"src/renderer/components/ui/Select.tsx\",\"src/renderer/components/ui/ShortcutsHelp.tsx\",\"src/renderer/components/ui/Skeleton.tsx\",\"src/renderer/components/ui/Spinner.tsx\",\"src/renderer/components/ui/Switch.tsx\",\"src/renderer/components/ui/Toast.tsx\",\"src/renderer/components/ui/Tooltip.tsx\",\"src/renderer/components/ui/previews.tsx\",\"src/renderer/navigation/SidebarView.tsx\",\"src/renderer/preview/mocks/coreMocks.tsx\",\"src/renderer/preview/previewHost.tsx\",\"src/renderer/preview/previewTypes.ts\",\"src/renderer/projects/ProjectManagerModal.tsx\",\"src/renderer/screens/ChatView.tsx\",\"src/renderer/screens/FilesView.tsx\",\"src/renderer/screens/NotificationsView.tsx\",\"src/renderer/screens/SettingsView.tsx\",\"src/renderer/services/pricingService.ts\",\"src/renderer/tasks/BoardView.tsx\",\"src/renderer/tasks/FeatureCreateView.tsx\",\"src/renderer/tasks/FeatureEditView.tsx\",\"src/renderer/tasks/TaskCreateView.tsx\",\"src/renderer/tasks/TaskDetailsView.tsx\",\"src/renderer/tasks/TaskEditView.tsx\",\"src/renderer/tasks/TasksListView.tsx\",\"src/renderer/utils/status.js\"]},{\"name\":\"search_files\",\"result\":[\"src/renderer/components/files/BasicFileViewer.tsx\",\"src/renderer/components/files/MarkdownEditor.tsx\",\"src/renderer/components/tasks/DependencySelector.tsx\",\"src/renderer/components/ui/Button.tsx\",\"src/renderer/components/ui/FileDisplay.tsx\",\"src/renderer/components/ui/Skeleton.tsx\",\"src/renderer/components/ui/Spinner.tsx\",\"src/renderer/components/ui/previews.tsx\",\"src/renderer/preview/previewHost.tsx\",\"src/renderer/screens/FilesView.tsx\",\"src/renderer/screens/SettingsView.tsx\",\"src/renderer/tasks/BoardView.tsx\",\"src/renderer/tasks/FeatureEditView.tsx\",\"src/renderer/tasks/TaskEditView.tsx\",\"src/renderer/tasks/TasksListView.tsx\"]},{\"name\":\"search_files\",\"result\":[\"src/renderer/components/agents/AgentModelQuickSelect.tsx\",\"src/renderer/components/agents/AgentRunBullet.tsx\",\"src/renderer/components/agents/AgentRunRow.tsx\",\"src/renderer/components/agents/ChatConversation.tsx\",\"src/renderer/components/agents/CostChip.tsx\",\"src/renderer/components/agents/ModelChip.tsx\",\"src/renderer/components/agents/ProjectChip.tsx\",\"src/renderer/components/agents/StatusChip.tsx\",\"src/renderer/components/agents/TokensChip.tsx\",\"src/renderer/components/tasks/ContextFileChip.tsx\",\"src/renderer/components/tasks/DependencyBullet.tsx\",\"src/renderer/components/tasks/DependencySelector.tsx\",\"src/renderer/components/tasks/ExclamationChip.tsx\",\"src/renderer/components/tasks/FeatureForm.tsx\",\"src/renderer/components/tasks/FeatureSummaryCallout.tsx\",\"src/renderer/components/tasks/FeatureSummaryCard.tsx\",\"src/renderer/components/tasks/RunAgentButton.tsx\",\"src/renderer/components/tasks/StatusControl.tsx\",\"src/renderer/components/tasks/TaskCard.tsx\",\"src/renderer/components/tasks/TaskForm.tsx\",\"src/renderer/components/tasks/TaskSummaryCallout.tsx\",\"src/renderer/components/tasks/TaskSummaryCard.tsx\",\"src/renderer/components/tasks/WarningChip.tsx\",\"src/renderer/components/ui/Alert.tsx\",\"src/renderer/components/ui/CollapsibleSidebar.tsx\",\"src/renderer/components/ui/CommandMenu.tsx\",\"src/renderer/components/ui/FileDisplay.tsx\",\"src/renderer/components/ui/FileMentionsTextarea.tsx\",\"src/renderer/components/ui/FileSelector.tsx\",\"src/renderer/components/ui/Modal.tsx\",\"src/renderer/components/ui/RichText.tsx\",\"src/renderer/components/ui/SegmentedControl.tsx\",\"src/renderer/components/ui/ShortcutsHelp.tsx\",\"src/renderer/components/ui/Toast.tsx\",\"src/renderer/components/ui/Tooltip.tsx\",\"src/renderer/components/ui/previews.tsx\",\"src/renderer/hooks/useNotifications.ts\",\"src/renderer/hooks/useReferencesAutocomplete.ts\",\"src/renderer/navigation/SidebarView.tsx\",\"src/renderer/preview/mocks/coreMocks.tsx\",\"src/renderer/preview/previewHost.tsx\",\"src/renderer/preview/previewTypes.ts\",\"src/renderer/projects/ProjectManagerModal.tsx\",\"src/renderer/projects/validateProject.ts\",\"src/renderer/screens/ChatView.tsx\",\"src/renderer/screens/FilesView.tsx\",\"src/renderer/screens/NotificationsView.tsx\",\"src/renderer/screens/SettingsView.tsx\",\"src/renderer/services/agentsService.ts\",\"src/renderer/services/tasksService.ts\",\"src/renderer/tasks/BoardView.tsx\",\"src/renderer/tasks/FeatureCreateView.tsx\",\"src/renderer/tasks/FeatureEditView.tsx\",\"src/renderer/tasks/TaskCreateView.tsx\",\"src/renderer/tasks/TaskDetailsView.tsx\",\"src/renderer/tasks/TaskEditView.tsx\",\"src/renderer/tasks/TasksListView.tsx\",\"src/renderer/utils/status.js\",\"src/renderer/utils/tasks.js\"]},{\"name\":\"search_files\",\"result\":[\"src/chat/LLMProvider.js\",\"src/chat/manager.js\",\"src/index.css\",\"src/ipcHandlersKeys.js\",\"src/preload.js\",\"src/renderer/App.tsx\",\"src/renderer/components/agents/AgentModelQuickSelect.tsx\",\"src/renderer/components/agents/AgentRunBullet.tsx\",\"src/renderer/components/agents/AgentRunRow.tsx\",\"src/renderer/components/agents/ChatConversation.tsx\",\"src/renderer/components/agents/CostChip.tsx\",\"src/renderer/components/agents/ModelChip.tsx\",\"src/renderer/components/agents/ProjectChip.tsx\",\"src/renderer/components/agents/StatusChip.tsx\",\"src/renderer/components/agents/TokensChip.tsx\",\"src/renderer/components/agents/TurnChip.tsx\",\"src/renderer/components/tasks/DependencySelector.tsx\",\"src/renderer/components/tasks/FeatureSummaryCallout.tsx\",\"src/renderer/components/tasks/TaskSummaryCallout.tsx\",\"src/renderer/components/ui/CollapsibleSidebar.tsx\",\"src/renderer/components/ui/FileSelector.tsx\",\"src/renderer/components/ui/Modal.tsx\",\"src/renderer/components/ui/Select.tsx\",\"src/renderer/components/ui/Toast.tsx\",\"src/renderer/hooks/useAppSettings.ts\",\"src/renderer/hooks/useChats.tsx\",\"src/renderer/hooks/useTheme.ts\",\"src/renderer/navigation/ModalHost.tsx\",\"src/renderer/navigation/Navigator.tsx\",\"src/renderer/navigation/SidebarView.tsx\",\"src/renderer/preview/main.tsx\",\"src/renderer/preview/mocks/coreMocks.tsx\",\"src/renderer/preview/previewHost.tsx\",\"src/renderer/preview/previewTypes.ts\",\"src/renderer/preview/withPreview.tsx\",\"src/renderer/projects/ProjectManagerModal.tsx\",\"src/renderer/screens/AgentsView.tsx\",\"src/renderer/screens/AllAgentsView.tsx\",\"src/renderer/screens/ChatView.tsx\",\"src/renderer/screens/SettingsView.tsx\",\"src/renderer/services/agentsService.ts\",\"src/renderer/services/chatsService.ts\",\"src/renderer/services/pricingService.ts\",\"src/renderer/tasks/FeatureEditView.tsx\",\"src/renderer/tasks/TaskDetailsView.tsx\",\"src/renderer/tasks/TaskEditView.tsx\",\"src/renderer/tasks/TasksListView.tsx\",\"src/renderer/utils/dom.js\",\"src/settings/SettingsLLMConfigModal.tsx\",\"src/styles/design-tokens.css\",\"src/tools/factory/mainOrchestrator.js\",\"src/tools/preview/analyzer.js\",\"src/types/settings.ts\"]}]",
    "source": "tools"
  },
  {
    "role": "assistant",
    "content": "{\n  \"thoughts\": \"I need to propose concrete, atomic UI improvement features grounded in the existing React/Electron renderer. I'll inspect key UI components (Button, Input, Modal, Tooltip, Select), navigation (SidebarView), theming (useTheme), shortcuts (useShortcuts), and representative screens to identify common UI enhancement opportunities (accessibility, loading states, empty states, consistency, theming). Based on findings, I will create a set of small, implementable features and then finish the spec.\",\n  \"tool_calls\": [\n    {\n      \"tool_name\": \"read_files\",\n      \"arguments\": {\n        \"paths\": [\n          \"src/renderer/components/ui/Button.tsx\",\n          \"src/renderer/components/ui/Input.tsx\",\n          \"src/renderer/components/ui/Modal.tsx\",\n          \"src/renderer/components/ui/Tooltip.tsx\",\n          \"src/renderer/components/ui/Select.tsx\",\n          \"src/renderer/components/ui/CollapsibleSidebar.tsx\",\n          \"src/renderer/components/ui/CommandMenu.tsx\",\n          \"src/renderer/components/ui/ShortcutsHelp.tsx\",\n          \"src/renderer/hooks/useShortcuts.tsx\",\n          \"src/renderer/hooks/useTheme.ts\",\n          \"src/renderer/App.tsx\",\n          \"src/renderer/navigation/SidebarView.tsx\",\n          \"src/renderer/screens/ChatView.tsx\",\n          \"src/renderer/tasks/TasksListView.tsx\",\n          \"src/renderer/components/ui/Skeleton.tsx\",\n          \"src/renderer/components/ui/Spinner.tsx\"\n        ]\n      }\n    }\n  ]\n}"
  },
  {
    "role": "user",
    "content": "[{\"name\":\"read_files\",\"result\":\"{\\\"src/renderer/components/ui/Button.tsx\\\":\\\"import * as React from 'react'\\\\nimport { Slot } from '@radix-ui/react-slot'\\\\nimport Spinner from './Spinner'\\\\n\\\\nfunction cx(...parts: Array<string | false | null | undefined>) {\\\\n  return parts.filter(Boolean).join(' ')\\\\n}\\\\n\\\\nexport type ButtonVariant = 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger' | 'link'\\\\nexport type ButtonSize = 'sm' | 'md' | 'lg' | 'icon'\\\\n\\\\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\\\\n  asChild?: boolean\\\\n  variant?: ButtonVariant\\\\n  size?: ButtonSize\\\\n  loading?: boolean\\\\n}\\\\n\\\\nconst variantClass: Record<ButtonVariant, string> = {\\\\n  primary: 'btn btn-primary',\\\\n  secondary: 'btn btn-secondary',\\\\n  outline: 'btn btn-outline',\\\\n  ghost: 'btn btn-ghost',\\\\n  danger: 'btn btn-danger',\\\\n  link: 'btn btn-link',\\\\n}\\\\n\\\\nconst sizeClass: Record<ButtonSize, string> = {\\\\n  sm: 'btn-sm',\\\\n  md: '',\\\\n  lg: 'btn-lg',\\\\n  icon: 'btn-icon',\\\\n}\\\\n\\\\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\\\\n  ({ className, asChild = false, variant = 'primary', size = 'md', loading = false, disabled, children, ...props }, ref) => {\\\\n    const Comp = asChild ? Slot : 'button'\\\\n    const isDisabled = disabled || loading\\\\n\\\\n    return (\\\\n      <Comp\\\\n        className={cx(variantClass[variant], sizeClass[size], loading && 'relative', className)}\\\\n        ref={ref}\\\\n        disabled={isDisabled}\\\\n        aria-busy={loading || undefined}\\\\n        {...props}\\\\n      >\\\\n        {loading && (\\\\n          <span className=\\\\\\\"absolute inset-0 flex items-center justify-center\\\\\\\">\\\\n            <Spinner size={16} />\\\\n          </span>\\\\n        )}\\\\n        <span className={loading ? 'opacity-0' : undefined}>{children}</span>\\\\n      </Comp>\\\\n    )\\\\n  }\\\\n)\\\\nButton.displayName = 'Button'\\\\n\\\\nexport { Button }\\\\n\\\",\\\"src/renderer/components/ui/Input.tsx\\\":\\\"import React from \\\\\\\"react\\\\\\\";\\\\n\\\\nfunction cn(...xs: Array<string | false | undefined | null>) { return xs.filter(Boolean).join(\\\\\\\" \\\\\\\"); }\\\\n\\\\ntype InputProps = React.InputHTMLAttributes<HTMLInputElement> & {\\\\n  size?: \\\\\\\"sm\\\\\\\" | \\\\\\\"md\\\\\\\" | \\\\\\\"lg\\\\\\\";\\\\n  invalid?: boolean;\\\\n};\\\\n\\\\nconst sizeClass = {\\\\n  sm: \\\\\\\"h-8 text-sm px-2.5\\\\\\\",\\\\n  md: \\\\\\\"h-9 text-sm px-3\\\\\\\",\\\\n  lg: \\\\\\\"h-10 text-base px-3.5\\\\\\\",\\\\n};\\\\n\\\\nexport const Input = React.forwardRef<HTMLInputElement, InputProps>(\\\\n  ({ className = \\\\\\\"\\\\\\\", size = \\\\\\\"md\\\\\\\", invalid = false, ...props }, ref) => {\\\\n    return (\\\\n      <input\\\\n        ref={ref}\\\\n        className={cn(\\\\n          \\\\\\\"w-full rounded-md border bg-surface-raised text-text-primary placeholder:text-text-muted\\\\\\\",\\\\n          \\\\\\\"focus:outline-none focus:ring-2\\\\\\\",\\\\n          invalid ? \\\\\\\"border-red-400 focus:ring-red-400\\\\\\\" : \\\\\\\"border border-border focus:ring\\\\\\\",\\\\n          sizeClass[size],\\\\n          className\\\\n        )}\\\\n        aria-invalid={invalid || undefined}\\\\n        {...props}\\\\n      />\\\\n    );\\\\n  }\\\\n);\\\\n\\\\nInput.displayName = \\\\\\\"Input\\\\\\\";\\\\n\\\",\\\"src/renderer/components/ui/Modal.tsx\\\":\\\"import React, { useEffect, useLayoutEffect, useRef } from \\\\\\\"react\\\\\\\";\\\\n\\\\nexport type ModalProps = {\\\\n  isOpen: boolean;\\\\n  onClose: () => void;\\\\n  title?: React.ReactNode;\\\\n  children?: React.ReactNode;\\\\n  footer?: React.ReactNode;\\\\n  size?: \\\\\\\"sm\\\\\\\" | \\\\\\\"md\\\\\\\" | \\\\\\\"lg\\\\\\\" | \\\\\\\"xl\\\\\\\";\\\\n  hideCloseButton?: boolean;\\\\n  initialFocusRef?: React.RefObject<HTMLElement>;\\\\n};\\\\n\\\\nfunction sizeClass(size?: ModalProps[\\\\\\\"size\\\\\\\"]) {\\\\n  switch (size) {\\\\n    case \\\\\\\"sm\\\\\\\":\\\\n      return \\\\\\\"max-w-sm\\\\\\\";\\\\n    case \\\\\\\"md\\\\\\\":\\\\n      return \\\\\\\"max-w-md\\\\\\\";\\\\n    case \\\\\\\"lg\\\\\\\":\\\\n      return \\\\\\\"max-w-lg\\\\\\\";\\\\n    case \\\\\\\"xl\\\\\\\":\\\\n      return \\\\\\\"max-w-2xl\\\\\\\";\\\\n    default:\\\\n      return \\\\\\\"max-w-lg\\\\\\\";\\\\n  }\\\\n}\\\\n\\\\nfunction getFocusable(container: HTMLElement | null): HTMLElement[] {\\\\n  if (!container) return [];\\\\n  const selectors = [\\\\n    'a[href]','button:not([disabled])','textarea:not([disabled])','input:not([disabled])','select:not([disabled])',\\\\n    '[tabindex]:not([tabindex=\\\\\\\"-1\\\\\\\"])'\\\\n  ];\\\\n  const nodes = Array.from(container.querySelectorAll<HTMLElement>(selectors.join(',')));\\\\n  return nodes.filter(n => !n.hasAttribute('disabled') && !n.getAttribute('aria-hidden'));\\\\n}\\\\n\\\\nexport function Modal({ isOpen, onClose, title, children, footer, size, hideCloseButton, initialFocusRef }: ModalProps) {\\\\n  const overlayRef = useRef<HTMLDivElement | null>(null);\\\\n  const panelRef = useRef<HTMLDivElement | null>(null);\\\\n  const previouslyFocusedEl = useRef<HTMLElement | null>(null);\\\\n\\\\n  useEffect(() => {\\\\n    if (!isOpen) return;\\\\n    const onKey = (e: KeyboardEvent) => {\\\\n      if (e.key === \\\\\\\"Escape\\\\\\\") onClose();\\\\n    };\\\\n    window.addEventListener(\\\\\\\"keydown\\\\\\\", onKey);\\\\n    return () => window.removeEventListener(\\\\\\\"keydown\\\\\\\", onKey);\\\\n  }, [isOpen, onClose]);\\\\n\\\\n  useLayoutEffect(() => {\\\\n    if (!isOpen) return;\\\\n    previouslyFocusedEl.current = document.activeElement as HTMLElement | null;\\\\n\\\\n    const toFocus = initialFocusRef?.current || getFocusable(panelRef.current!)[0];\\\\n    toFocus?.focus();\\\\n\\\\n    return () => {\\\\n      previouslyFocusedEl.current?.focus?.();\\\\n    };\\\\n  }, [isOpen, initialFocusRef]);\\\\n\\\\n  if (!isOpen) return null;\\\\n\\\\n  const onOverlayClick = (e: React.MouseEvent) => {\\\\n    if (e.target === overlayRef.current) onClose();\\\\n  };\\\\n\\\\n  const onKeyDown = (e: React.KeyboardEvent) => {\\\\n    if (e.key !== 'Tab') return;\\\\n    const focusables = getFocusable(panelRef.current!);\\\\n    if (focusables.length === 0) return;\\\\n    const first = focusables[0];\\\\n    const last = focusables[focusables.length - 1];\\\\n    if (e.shiftKey) {\\\\n      if (document.activeElement === first) {\\\\n        e.preventDefault();\\\\n        last.focus();\\\\n      }\\\\n    } else {\\\\n      if (document.activeElement === last) {\\\\n        e.preventDefault();\\\\n        first.focus();\\\\n      }\\\\n    }\\\\n  };\\\\n\\\\n  return (\\\\n    <div className=\\\\\\\"fixed inset-0 z-[1000] flex items-center justify-center\\\\\\\" aria-hidden={false}>\\\\n      <div\\\\n        ref={overlayRef}\\\\n        className=\\\\\\\"absolute inset-0 bg-black/40 backdrop-blur-[2px] opacity-100 animate-in fade-in\\\\\\\"\\\\n        onMouseDown={onOverlayClick}\\\\n      />\\\\n      <div\\\\n        ref={panelRef}\\\\n        className={\\\\n          `relative z-10 w-full flex flex-col ${sizeClass(size)} rounded-lg border bg-surface-overlay text-text-primary shadow-xl max-h-[90vh]` +\\\\n          \\\\\\\" border-border outline-none focus:outline-none animate-in fade-in-50 zoom-in-95\\\\\\\"\\\\n        }\\\\n        role=\\\\\\\"dialog\\\\\\\"\\\\n        aria-modal=\\\\\\\"true\\\\\\\"\\\\n        onKeyDown={onKeyDown}\\\\n      >\\\\n        <div className=\\\\\\\"flex items-start justify-between gap-4 border-b p-4 shrink-0 border-border\\\\\\\">\\\\n          <div className=\\\\\\\"text-base font-semibold\\\\\\\">{title}</div>\\\\n          {!hideCloseButton && (\\\\n            <button\\\\n              type=\\\\\\\"button\\\\\\\"\\\\n              onClick={onClose}\\\\n              className=\\\\\\\"inline-flex h-8 w-8 items-center justify-center rounded-md text-text-secondary hover:bg-gray-100 dark:hover:bg-gray-800 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-500\\\\\\\"\\\\n              aria-label=\\\\\\\"Close\\\\\\\"\\\\n              title=\\\\\\\"Close\\\\\\\"\\\\n            >\\\\n              <svg width=\\\\\\\"16\\\\\\\" height=\\\\\\\"16\\\\\\\" viewBox=\\\\\\\"0 0 24 24\\\\\\\" fill=\\\\\\\"none\\\\\\\" stroke=\\\\\\\"currentColor\\\\\\\" strokeWidth=\\\\\\\"2\\\\\\\" strokeLinecap=\\\\\\\"round\\\\\\\" strokeLinejoin=\\\\\\\"round\\\\\\\" aria-hidden=\\\\\\\"true\\\\\\\">\\\\n                <line x1=\\\\\\\"18\\\\\\\" y1=\\\\\\\"6\\\\\\\" x2=\\\\\\\"6\\\\\\\" y2=\\\\\\\"18\\\\\\\"></line>\\\\n                <line x1=\\\\\\\"6\\\\\\\" y1=\\\\\\\"6\\\\\\\" x2=\\\\\\\"18\\\\\\\" y2=\\\\\\\"18\\\\\\\"></line>\\\\n              </svg>\\\\n            </button>\\\\n          )}\\\\n        </div>\\\\n        <div className=\\\\\\\"flex-grow overflow-y-auto p-4\\\\\\\">{children}</div>\\\\n        {footer ? <div className=\\\\\\\"shrink-0 border-t p-3 border-border\\\\\\\">{footer}</div> : null}\\\\n      </div>\\\\n    </div>\\\\n  );\\\\n}\\\\n\\\\nexport function AlertDialog({\\\\n  isOpen,\\\\n  onClose,\\\\n  title = \\\\\\\"Are you sure?\\\\\\\",\\\\n  description,\\\\n  confirmText = \\\\\\\"Confirm\\\\\\\",\\\\n  cancelText = \\\\\\\"Cancel\\\\\\\",\\\\n  onConfirm,\\\\n  initialFocusRef,\\\\n}: {\\\\n  isOpen: boolean;\\\\n  onClose: () => void;\\\\n  title?: React.ReactNode;\\\\n  description?: React.ReactNode;\\\\n  confirmText?: string;\\\\n  cancelText?: string;\\\\n  onConfirm?: () => void;\\\\n  initialFocusRef?: React.RefObject<HTMLElement>;\\\\n}) {\\\\n  const confirmRef = initialFocusRef || React.useRef<HTMLButtonElement>(null);\\\\n  return (\\\\n    <Modal\\\\n      isOpen={isOpen}\\\\n      onClose={onClose}\\\\n      title={title}\\\\n      initialFocusRef={confirmRef as React.RefObject<HTMLElement>}\\\\n      footer={\\\\n        <div className=\\\\\\\"flex justify-end gap-2\\\\\\\">\\\\n          <button\\\\n            onClick={onClose}\\\\n            className=\\\\\\\"inline-flex items-center rounded-md border px-3 py-1.5 text-sm bg-surface-raised text-text-primary hover:bg-gray-100 dark:hover:bg-gray-800 focus-visible:ring-2\\\\\\\"\\\\n          >\\\\n            {cancelText}\\\\n          </button>\\\\n          <button\\\\n            ref={confirmRef}\\\\n            onClick={() => {\\\\n              onConfirm?.();\\\\n              onClose();\\\\n            }}\\\\n            className=\\\\\\\"inline-flex items-center rounded-md bg-brand-600 px-3 py-1.5 text-sm text-text-inverted hover:bg-brand-700 focus-visible:ring-2\\\\\\\"\\\\n          >\\\\n            {confirmText}\\\\n          </button>\\\\n        </div>\\\\n      }\\\\n    >\\\\n      {description ? <p className=\\\\\\\"text-sm text-text-secondary\\\\\\\">{description}</p> : null}\\\\n    </Modal>\\\\n  );\\\\n}\\\\n\\\",\\\"src/renderer/components/ui/Tooltip.tsx\\\":\\\"import React, { useEffect, useLayoutEffect, useRef, useState } from 'react';\\\\nimport { createPortal } from 'react-dom';\\\\n\\\\nexport type TooltipProps = {\\\\n  children: React.ReactElement;\\\\n  content: React.ReactNode;\\\\n  placement?: 'top' | 'bottom' | 'left' | 'right';\\\\n  delayMs?: number;\\\\n  disabled?: boolean;\\\\n};\\\\n\\\\nexport default function Tooltip({ children, content, placement = 'right', delayMs = 200, disabled }: TooltipProps) {\\\\n  const [open, setOpen] = useState(false);\\\\n  const [position, setPosition] = useState<{ top: number; left: number } | null>(null);\\\\n  const timerRef = useRef<number | null>(null);\\\\n  const anchorRef = useRef<HTMLElement | null>(null);\\\\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\\\\n\\\\n  const child = React.Children.only(children);\\\\n\\\\n  useEffect(() => () => { if (timerRef.current) window.clearTimeout(timerRef.current); }, []);\\\\n\\\\n  useLayoutEffect(() => {\\\\n    if (!open) {\\\\n      setPosition(null);\\\\n      return;\\\\n    }\\\\n    if (!anchorRef.current) return;\\\\n    setPosition({ top: -9999, left: -9999 });\\\\n  }, [open, placement]);\\\\n\\\\n  useLayoutEffect(() => {\\\\n    if (!open || !position || position.top !== -9999 || !tooltipRef.current || !anchorRef.current) return;\\\\n\\\\n    const tip = tooltipRef.current;\\\\n    const tipRect = tip.getBoundingClientRect();\\\\n    const anchor = anchorRef.current;\\\\n    const anchorRect = anchor.getBoundingClientRect();\\\\n    const viewportWidth = window.innerWidth;\\\\n    const viewportHeight = window.innerHeight;\\\\n    const spacing = 8;\\\\n\\\\n    const calcPos = (pl: string) => {\\\\n      let t = 0, l = 0;\\\\n      switch (pl) {\\\\n        case 'right':\\\\n          t = anchorRect.top + anchorRect.height / 2 - tipRect.height / 2;\\\\n          l = anchorRect.right + spacing;\\\\n          break;\\\\n        case 'left':\\\\n          t = anchorRect.top + anchorRect.height / 2 - tipRect.height / 2;\\\\n          l = anchorRect.left - spacing - tipRect.width;\\\\n          break;\\\\n        case 'top':\\\\n          t = anchorRect.top - spacing - tipRect.height;\\\\n          l = anchorRect.left + anchorRect.width / 2 - tipRect.width / 2;\\\\n          break;\\\\n        case 'bottom':\\\\n          t = anchorRect.bottom + spacing;\\\\n          l = anchorRect.left + anchorRect.width / 2 - tipRect.width / 2;\\\\n          break;\\\\n      }\\\\n      return { top: t, left: l };\\\\n    };\\\\n\\\\n    const fits = (p: { top: number; left: number }) => {\\\\n      return p.left >= 0 && p.top >= 0 && p.left + tipRect.width <= viewportWidth && p.top + tipRect.height <= viewportHeight;\\\\n    };\\\\n\\\\n    let bestPlacement = placement;\\\\n    let pos = calcPos(placement);\\\\n\\\\n    if (!fits(pos)) {\\\\n      let opposite: string;\\\\n      if (placement === 'right') opposite = 'left';\\\\n      else if (placement === 'left') opposite = 'right';\\\\n      else if (placement === 'top') opposite = 'bottom';\\\\n      else opposite = 'top';\\\\n\\\\n      const oppPos = calcPos(opposite);\\\\n      if (fits(oppPos)) {\\\\n        bestPlacement = opposite;\\\\n        pos = oppPos;\\\\n      }\\\\n    }\\\\n\\\\n    // Clamp to viewport\\\\n    pos.top = Math.max(0, Math.min(pos.top, viewportHeight - tipRect.height));\\\\n    pos.left = Math.max(0, Math.min(pos.left, viewportWidth - tipRect.width));\\\\n\\\\n    setPosition({\\\\n      top: pos.top + window.pageYOffset,\\\\n      left: pos.left + window.pageXOffset,\\\\n    });\\\\n  }, [open, position, placement]);\\\\n\\\\n  const show = () => {\\\\n    if (disabled) return;\\\\n    if (timerRef.current) window.clearTimeout(timerRef.current);\\\\n    timerRef.current = window.setTimeout(() => setOpen(true), delayMs) as any;\\\\n  };\\\\n  const hide = () => {\\\\n    if (timerRef.current) window.clearTimeout(timerRef.current);\\\\n    setOpen(false);\\\\n  };\\\\n\\\\n  return (\\\\n    <>\\\\n      {React.cloneElement(child, {\\\\n        ref: (el: HTMLElement) => {\\\\n          const anyChild: any = child as any;\\\\n          if (typeof anyChild.ref === 'function') anyChild.ref(el);\\\\n          else if (anyChild.ref) (anyChild.ref as any).current = el;\\\\n          anchorRef.current = el;\\\\n        },\\\\n        onMouseEnter: (e: any) => { child.props.onMouseEnter?.(e); show(); },\\\\n        onMouseLeave: (e: any) => { child.props.onMouseLeave?.(e); hide(); },\\\\n        onFocus: (e: any) => { child.props.onFocus?.(e); show(); },\\\\n        onBlur: (e: any) => { child.props.onBlur?.(e); hide(); },\\\\n        'aria-describedby': open ? 'tooltip' : undefined,\\\\n      })}\\\\n      {open && position && createPortal(\\\\n        <div className=\\\\\\\"ui-tooltip\\\\\\\" role=\\\\\\\"tooltip\\\\\\\" ref={tooltipRef} style={{ position: 'absolute', top: position.top, left: position.left }}>\\\\n          <div className=\\\\\\\"ui-tooltip__content\\\\\\\">{content}</div>\\\\n        </div>,\\\\n        document.body\\\\n      )}\\\\n    </>\\\\n  );\\\\n}\\\\n\\\",\\\"src/renderer/components/ui/Select.tsx\\\":\\\"import * as React from \\\\\\\"react\\\\\\\";\\\\nimport * as SelectPrimitive from \\\\\\\"@radix-ui/react-select\\\\\\\";\\\\n\\\\nfunction cn(...xs: Array<string | false | undefined | null>) { return xs.filter(Boolean).join(\\\\\\\" \\\\\\\"); }\\\\n\\\\nexport const Select = SelectPrimitive.Root;\\\\nexport const SelectGroup = SelectPrimitive.Group;\\\\nexport const SelectValue = SelectPrimitive.Value;\\\\n\\\\nexport const SelectTrigger = React.forwardRef<\\\\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\\\\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger> & { size?: \\\\\\\"sm\\\\\\\" | \\\\\\\"md\\\\\\\" | \\\\\\\"lg\\\\\\\" }\\\\n>(({ className = \\\\\\\"\\\\\\\", children, size = \\\\\\\"md\\\\\\\", ...props }, ref) => {\\\\n  const sizeCls = size === \\\\\\\"sm\\\\\\\" ? \\\\\\\"h-8 text-sm px-2.5\\\\\\\" : size === \\\\\\\"lg\\\\\\\" ? \\\\\\\"h-10 text-base px-3.5\\\\\\\" : \\\\\\\"h-9 text-sm px-3\\\\\\\";\\\\n  return (\\\\n    <SelectPrimitive.Trigger\\\\n      ref={ref}\\\\n      className={cn(\\\\n        \\\\\\\"flex items-center justify-between rounded-md border bg-surface-raised text-text-primary\\\\\\\",\\\\n        \\\\\\\"placeholder:text-text-muted focus:outline-none focus:ring-2\\\\\\\",\\\\n        \\\\\\\"border-border focus:ring\\\\\\\",\\\\n        sizeCls,\\\\n        className\\\\n      )}\\\\n      {...props}\\\\n    >\\\\n      {children}\\\\n      <SelectPrimitive.Icon className=\\\\\\\"ml-2 text-text-muted\\\\\\\">▾</SelectPrimitive.Icon>\\\\n    </SelectPrimitive.Trigger>\\\\n  );\\\\n});\\\\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\\\\n\\\\nexport const SelectContent = React.forwardRef<\\\\n  React.ElementRef<typeof SelectPrimitive.Content>,\\\\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\\\\n>(({ className = \\\\\\\"\\\\\\\", children, position = \\\\\\\"popper\\\\\\\", ...props }, ref) => (\\\\n  <SelectPrimitive.Portal>\\\\n    <SelectPrimitive.Content\\\\n      ref={ref}\\\\n      className={cn(\\\\n        \\\\\\\"z-[2000] min-w-[10rem] overflow-hidden rounded-md border bg-surface-raised text-text-primary shadow-md\\\\\\\",\\\\n        \\\\\\\"border-border\\\\\\\",\\\\n        className\\\\n      )}\\\\n      position={position}\\\\n      sideOffset={6}\\\\n      {...props}\\\\n    >\\\\n      <SelectPrimitive.ScrollUpButton className=\\\\\\\"flex items-center justify-center py-1 text-text-muted\\\\\\\">▲</SelectPrimitive.ScrollUpButton>\\\\n      <SelectPrimitive.Viewport className=\\\\\\\"p-1\\\\\\\">\\\\n        {children}\\\\n      </SelectPrimitive.Viewport>\\\\n      <SelectPrimitive.ScrollDownButton className=\\\\\\\"flex items-center justify-center py-1 text-text-muted\\\\\\\">▼</SelectPrimitive.ScrollDownButton>\\\\n    </SelectPrimitive.Content>\\\\n  </SelectPrimitive.Portal>\\\\n));\\\\nSelectContent.displayName = SelectPrimitive.Content.displayName;\\\\n\\\\nexport const SelectItem = React.forwardRef<\\\\n  React.ElementRef<typeof SelectPrimitive.Item>,\\\\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\\\\n>(({ className = \\\\\\\"\\\\\\\", children, ...props }, ref) => (\\\\n  <SelectPrimitive.Item\\\\n    ref={ref}\\\\n    className={cn(\\\\n      \\\\\\\"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 px-2 text-sm outline-none\\\\\\\",\\\\n      \\\\\\\"data-[highlighted]:bg-gray-100 data-[highlighted]:text-text-primary\\\\\\\",\\\\n      \\\\\\\"dark:data-[highlighted]:bg-gray-800\\\\\\\",\\\\n      \\\\\\\"data-[state=checked]:font-semibold\\\\\\\",\\\\n      \\\\\\\"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\\\\\\\",\\\\n      className\\\\n    )}\\\\n    {...props}\\\\n  >\\\\n    <span className=\\\\\\\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\\\\\\\">\\\\n      <SelectPrimitive.ItemIndicator aria-hidden>✓</SelectPrimitive.ItemIndicator>\\\\n    </span>\\\\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\\\\n  </SelectPrimitive.Item>\\\\n));\\\\nSelectItem.displayName = SelectPrimitive.Item.displayName;\\\\n\\\",\\\"src/renderer/components/ui/CollapsibleSidebar.tsx\\\":\\\"import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\\\\nimport Tooltip from './Tooltip';\\\\n\\\\nexport type CollapsibleSidebarItem = {\\\\n  id: string;\\\\n  label: string;\\\\n  icon?: React.ReactNode;\\\\n  accent?: string;\\\\n  badge?: number;\\\\n  action?: React.ReactNode;\\\\n};\\\\n\\\\ntype Props = {\\\\n  items: CollapsibleSidebarItem[];\\\\n  activeId: string;\\\\n  onSelect: (id: string) => void;\\\\n  storageKey?: string;\\\\n  headerTitle?: string;\\\\n  headerSubtitle?: string;\\\\n  headerAction?: React.ReactNode;\\\\n  emptyMessage?: string;\\\\n  children?: React.ReactNode;\\\\n  sidebarClassName?: string;\\\\n  navContent?: React.ReactNode;\\\\n};\\\\n\\\\nfunction useMediaQuery(query: string) {\\\\n  const [matches, setMatches] = useState<boolean>(() => typeof window !== 'undefined' ? window.matchMedia(query).matches : false);\\\\n  useEffect(() => {\\\\n    const m = window.matchMedia(query);\\\\n    const onChange = () => setMatches(m.matches);\\\\n    if (m.addEventListener) m.addEventListener('change', onChange);\\\\n    else m.addListener(onChange);\\\\n    setMatches(m.matches);\\\\n    return () => {\\\\n      if (m.removeEventListener) m.removeEventListener('change', onChange);\\\\n      else m.removeListener(onChange);\\\\n    };\\\\n  }, [query]);\\\\n  return matches;\\\\n}\\\\n\\\\nexport default function CollapsibleSidebar(props: Props) {\\\\n  const { items, activeId, onSelect, storageKey, headerTitle, headerSubtitle, headerAction, emptyMessage, children, sidebarClassName, navContent } = props;\\\\n  const [collapsed, setCollapsed] = useState<boolean>(() => {\\\\n    if (!storageKey) return false;\\\\n    try {\\\\n      return localStorage.getItem(storageKey) === '1';\\\\n    } catch {\\\\n      return false;\\\\n    }\\\\n  });\\\\n\\\\n  const SidebarContent = ({ collapsed, setCollapsed, className = '' }: { collapsed: boolean; setCollapsed: (v: boolean) => void; className?: string }) => {\\\\n    useEffect(() => {\\\\n      if (!storageKey) return;\\\\n      try {\\\\n        localStorage.setItem(storageKey, collapsed ? '1' : '0');\\\\n      } catch {}\\\\n    }, [collapsed]);\\\\n\\\\n    const activeIndex = useMemo(() => {\\\\n      const idx = items.findIndex((n) => n.id === activeId);\\\\n      return idx >= 0 ? idx : 0;\\\\n    }, [items, activeId]);\\\\n\\\\n    const [focusIndex, setFocusIndex] = useState<number>(activeIndex);\\\\n\\\\n    useEffect(() => setFocusIndex(activeIndex), [activeIndex]);\\\\n\\\\n    const onKeyDownList = useCallback((e: React.KeyboardEvent) => {\\\\n      const max = items.length - 1;\\\\n      if (e.key === 'ArrowDown') {\\\\n        e.preventDefault();\\\\n        setFocusIndex((i) => (i >= max ? 0 : i + 1));\\\\n      } else if (e.key === 'ArrowUp') {\\\\n        e.preventDefault();\\\\n        setFocusIndex((i) => (i <= 0 ? max : i - 1));\\\\n      } else if (e.key === 'Home') {\\\\n        e.preventDefault();\\\\n        setFocusIndex(0);\\\\n      } else if (e.key === 'End') {\\\\n        e.preventDefault();\\\\n        setFocusIndex(max);\\\\n      }\\\\n    }, [items.length]);\\\\n\\\\n    return (\\\\n      <aside\\\\n        className={`sidebar relative z-30 flex h-full shrink-0 flex-col border-r bg-white dark:bg-neutral-900 dark:border-neutral-800 ${collapsed ? 'collapsed' : ''} ${className}`}\\\\n        aria-label=\\\\\\\"Navigation\\\\\\\"\\\\n        data-collapsed={collapsed ? 'true' : 'false'}\\\\n      >\\\\n        <div className={`mb-2 flex items-center ${collapsed ? 'justify-center' : 'justify-between'} px-2 pt-3`}>\\\\n          {!collapsed && (\\\\n            <div className=\\\\\\\"px-1\\\\\\\">\\\\n              <div className=\\\\\\\"text-sm font-semibold tracking-tight text-neutral-900 dark:text-neutral-100\\\\\\\">{headerTitle ?? 'Sections'}</div>\\\\n              <div className=\\\\\\\"text-[11px] text-neutral-500 dark:text-neutral-400\\\\\\\">{headerSubtitle ?? ''}</div>\\\\n            </div>\\\\n          )}\\\\n          <div className={`flex items-center gap-2 ${collapsed ? 'justify-center' : ''}`}>\\\\n            {!collapsed && headerAction}\\\\n            <button\\\\n              type=\\\\\\\"button\\\\\\\"\\\\n              onClick={() => setCollapsed((v) => !v)}\\\\n              className=\\\\\\\"nav-toggle\\\\\\\"\\\\n              aria-label={collapsed ? 'Expand sidebar' : 'Collapse sidebar'}\\\\n              aria-expanded={!collapsed}\\\\n              title={collapsed ? 'Expand sidebar (⌘/Ctrl+B)' : 'Collapse sidebar (⌘/Ctrl+B)'}\\\\n            >\\\\n              <span aria-hidden>{collapsed ? '»' : '«'}</span>\\\\n            </button>\\\\n          </div>\\\\n        </div>\\\\n\\\\n        <nav className=\\\\\\\"nav flex-1 min-h-0 overflow-y-auto\\\\\\\" onKeyDown={onKeyDownList}>\\\\n          {navContent || (\\\\n            <ul className=\\\\\\\"nav-list\\\\\\\" role=\\\\\\\"list\\\\\\\">\\\\n              {items.length === 0 && emptyMessage && (\\\\n                <li key=\\\\\\\"empty\\\\\\\" className=\\\\\\\"nav-li\\\\\\\">\\\\n                  <div className=\\\\\\\"text-[11px] text-neutral-500 dark:text-neutral-400 px-2 py-1.5\\\\\\\">{emptyMessage}</div>\\\\n                </li>\\\\n              )}\\\\n              {items.map((item, i) => {\\\\n                const isActive = activeId === item.id;\\\\n                return (\\\\n                  <li key={item.id} className=\\\\\\\"nav-li\\\\\\\">\\\\n                    <div\\\\n                      className={`nav-item ${isActive ? 'nav-item--active' : ''} ${collapsed ? 'nav-item--compact' : ''} nav-accent-${item.accent ?? 'gray'}`}\\\\n                      role=\\\\\\\"button\\\\\\\"\\\\n                      aria-current={isActive ? 'page' : undefined}\\\\n                      onClick={() => onSelect(item.id)}\\\\n                      title={item.label}\\\\n                      tabIndex={focusIndex === i ? 0 : -1}\\\\n                      onFocus={() => setFocusIndex(i)}\\\\n                      onKeyDown={(e) => {\\\\n                        if (e.key === 'Enter' || e.key === ' ') {\\\\n                          e.preventDefault();\\\\n                          onSelect(item.id);\\\\n                        }\\\\n                      }}\\\\n                    >\\\\n                      {item.icon && <span className=\\\\\\\"nav-item__icon\\\\\\\">{item.icon}</span>}\\\\n                      {!collapsed && <span className=\\\\\\\"nav-item__label\\\\\\\">{item.label}</span>}\\\\n                      {item.badge && item.badge > 0 && (\\\\n                        <span className=\\\\\\\"nav-item__badge\\\\\\\">{item.badge}</span>\\\\n                      )}\\\\n                      {!collapsed && item.action && <span className=\\\\\\\"nav-item__action ml-auto\\\\\\\">{item.action}</span>}\\\\n                    </div>\\\\n                  </li>\\\\n                );\\\\n              })}\\\\n            </ul>\\\\n          )}\\\\n        </nav>\\\\n      </aside>\\\\n    );\\\\n  };\\\\n\\\\n  if (!children) {\\\\n    return <SidebarContent collapsed={collapsed} setCollapsed={setCollapsed} className={sidebarClassName} />;\\\\n  }\\\\n\\\\n  const isMobile = useMediaQuery('(max-width: 768px)');\\\\n  const [mobileOpen, setMobileOpen] = useState(false);\\\\n  const mobileTriggerRef = useRef<HTMLButtonElement | null>(null);\\\\n\\\\n  useEffect(() => {\\\\n    if (!isMobile) setMobileOpen(false);\\\\n  }, [isMobile]);\\\\n\\\\n  useEffect(() => {\\\\n    const onKey = (e: KeyboardEvent) => {\\\\n      if (e.key === 'Escape' && mobileOpen) {\\\\n        setMobileOpen(false);\\\\n        setTimeout(() => mobileTriggerRef.current?.focus(), 0);\\\\n      }\\\\n    };\\\\n    window.addEventListener('keydown', onKey);\\\\n    return () => window.removeEventListener('keydown', onKey);\\\\n  }, [mobileOpen]);\\\\n\\\\n  if (isMobile) {\\\\n    return (\\\\n      <div className=\\\\\\\"flex h-full w-full min-w-0 flex-col\\\\\\\">\\\\n        <div className=\\\\\\\"sticky top-0 z-10 flex items-center gap-2 border-b border-neutral-200 bg-white px-3 py-2 dark:border-neutral-800 dark:bg-neutral-900\\\\\\\">\\\\n          <button\\\\n            ref={mobileTriggerRef}\\\\n            type=\\\\\\\"button\\\\\\\"\\\\n            className=\\\\\\\"nav-trigger\\\\\\\"\\\\n            onClick={() => setMobileOpen(true)}\\\\n            aria-label=\\\\\\\"Open sidebar\\\\\\\"\\\\n          >\\\\n            ☰\\\\n          </button>\\\\n          <div className=\\\\\\\"text-sm font-semibold\\\\\\\">{headerTitle ?? 'Sections'}</div>\\\\n        </div>\\\\n        {mobileOpen && (\\\\n          <>\\\\n            <div\\\\n              className=\\\\\\\"fixed inset-0 z-20 bg-black/30 backdrop-blur-sm\\\\\\\"\\\\n              onClick={() => setMobileOpen(false)}\\\\n              aria-hidden\\\\n            />\\\\n            <div className=\\\\\\\"fixed inset-y-0 left-0 z-30\\\\\\\" style={{ width: 260 }}>\\\\n              <SidebarContent collapsed={false} setCollapsed={() => setMobileOpen(false)} className={sidebarClassName} />\\\\n            </div>\\\\n          </>\\\\n        )}\\\\n        <div className=\\\\\\\"flex-1 min-w-0 min-h-0 overflow-auto p-4\\\\\\\">\\\\n          {children}\\\\n        </div>\\\\n      </div>\\\\n    );\\\\n  } else {\\\\n    return (\\\\n      <div className=\\\\\\\"flex h-full w-full min-w-0\\\\\\\">\\\\n        <SidebarContent collapsed={collapsed} setCollapsed={setCollapsed} className={sidebarClassName} />\\\\n        <main className=\\\\\\\"flex-1 min-w-0 min-h-0 overflow-auto p-4\\\\\\\">\\\\n          {children}\\\\n        </main>\\\\n      </div>\\\\n    );\\\\n  }\\\\n}\\\\n\\\",\\\"src/renderer/components/ui/CommandMenu.tsx\\\":\\\"import React, { useEffect, useMemo, useRef, useState } from 'react';\\\\nimport { createPortal } from 'react-dom';\\\\nimport { useNavigator } from '../../navigation/Navigator';\\\\nimport { useShortcuts, match } from '../../hooks/useShortcuts';\\\\n\\\\nexport type CommandMenuApi = {\\\\n  open: () => void;\\\\n  close: () => void;\\\\n  isOpen: () => boolean;\\\\n};\\\\n\\\\nconst UI_IMPROVEMENTS_TASK_ID = 'f9eef18e-818e-427d-82ab-8d990bb199c4';\\\\n\\\\nconst commandsBase = (\\\\n  nav: ReturnType<typeof useNavigator>\\\\n) => [\\\\n  { id: 'add-ui-feature', label: 'Add Feature to UI Improvements', shortcut: 'Cmd/Ctrl+Shift+F', run: () => nav.openModal({ type: 'feature-create', taskId: UI_IMPROVEMENTS_TASK_ID }) },\\\\n  { id: 'new-task', label: 'New Task', shortcut: 'Cmd/Ctrl+N', run: () => nav.openModal({ type: 'task-create' }) },\\\\n  { id: 'go-home', label: 'Go to Home', run: () => nav.navigateView('Home') },\\\\n  { id: 'go-files', label: 'Go to Files', run: () => nav.navigateView('Files') },\\\\n  { id: 'go-chat', label: 'Go to Chat', run: () => nav.navigateView('Chat') },\\\\n  { id: 'go-agents', label: 'Go to Agents', run: () => nav.navigateView('Agents') },\\\\n  { id: 'go-settings', label: 'Go to Settings', run: () => nav.navigateView('Settings') },\\\\n];\\\\n\\\\nexport default function CommandMenu() {\\\\n  const nav = useNavigator();\\\\n  const { register } = useShortcuts();\\\\n  const [open, setOpen] = useState(false);\\\\n  const [query, setQuery] = useState('');\\\\n  const inputRef = useRef<HTMLInputElement | null>(null);\\\\n  const items = useMemo(() => commandsBase(nav), [nav]);\\\\n\\\\n  useEffect(() => {\\\\n    return register({ id: 'cmdk', keys: match.modK, handler: () => setOpen(true), description: 'Open command menu', scope: 'global' });\\\\n  }, [register]);\\\\n  useEffect(() => {\\\\n    return register({ id: 'slash-search', keys: match.slash, handler: () => { setOpen(true); setTimeout(() => inputRef.current?.focus(), 0); } });\\\\n  }, [register]);\\\\n\\\\n  useEffect(() => { if (open) setTimeout(() => inputRef.current?.focus(), 0); }, [open]);\\\\n\\\\n  const filtered = useMemo(() => {\\\\n    const q = query.toLowerCase().trim();\\\\n    if (!q) return items;\\\\n    return items.filter((x) => x.label.toLowerCase().includes(q));\\\\n  }, [items, query]);\\\\n\\\\n  if (!open) return null;\\\\n  return createPortal(\\\\n    <div className=\\\\\\\"cmd-overlay\\\\\\\" role=\\\\\\\"dialog\\\\\\\" aria-modal=\\\\\\\"true\\\\\\\" onClick={() => setOpen(false)}>\\\\n      <div className=\\\\\\\"cmd\\\\\\\" onClick={(e) => e.stopPropagation()}>\\\\n        <div className=\\\\\\\"cmd__input\\\\\\\">\\\\n          <input\\\\n            ref={inputRef}\\\\n            type=\\\\\\\"text\\\\\\\"\\\\n            placeholder=\\\\\\\"Search commands...\\\\\\\"\\\\n            value={query}\\\\n            onChange={(e) => setQuery(e.target.value)}\\\\n            onKeyDown={(e) => { if (e.key === 'Escape') setOpen(false); }}\\\\n            aria-label=\\\\\\\"Command menu search\\\\\\\"\\\\n          />\\\\n          <kbd className=\\\\\\\"kbd\\\\\\\">⌘K</kbd>\\\\n        </div>\\\\n        <ul className=\\\\\\\"cmd__list\\\\\\\" role=\\\\\\\"listbox\\\\\\\">\\\\n          {filtered.map((cmd, i) => (\\\\n            <li key={cmd.id} className=\\\\\\\"cmd__item\\\\\\\" role=\\\\\\\"option\\\\\\\">\\\\n              <button\\\\n                type=\\\\\\\"button\\\\\\\"\\\\n                onClick={() => { cmd.run(); setOpen(false); }}\\\\n                onKeyDown={(e) => { if (e.key === 'Enter') { cmd.run(); setOpen(false); } }}\\\\n              >\\\\n                <span>{cmd.label}</span>\\\\n                {cmd.shortcut ? <span className=\\\\\\\"cmd__shortcut\\\\\\\">{cmd.shortcut}</span> : null}\\\\n              </button>\\\\n            </li>\\\\n          ))}\\\\n          {filtered.length === 0 && (\\\\n            <li className=\\\\\\\"cmd__empty\\\\\\\" aria-live=\\\\\\\"polite\\\\\\\">No commands found</li>\\\\n          )}\\\\n        </ul>\\\\n      </div>\\\\n    </div>,\\\\n    document.body\\\\n  );\\\\n}\\\\n\\\",\\\"src/renderer/components/ui/ShortcutsHelp.tsx\\\":\\\"import React, { useEffect, useState } from 'react';\\\\nimport { createPortal } from 'react-dom';\\\\nimport { useShortcuts, match } from '../../hooks/useShortcuts';\\\\n\\\\nexport default function ShortcutsHelp() {\\\\n  const { list, register } = useShortcuts();\\\\n  const [open, setOpen] = useState(false);\\\\n\\\\n  useEffect(() => {\\\\n    return register({ id: 'help', keys: match.question, handler: () => setOpen(true), description: 'Open keyboard shortcuts help', scope: 'global' });\\\\n  }, [register]);\\\\n\\\\n  const shortcuts = list();\\\\n\\\\n  const formatKeys = (id: string) => {\\\\n    switch (id) {\\\\n      case 'cmdk':\\\\n        return 'Cmd/Ctrl+K';\\\\n      case 'new-task':\\\\n        return 'Cmd/Ctrl+N';\\\\n      case 'help':\\\\n        return '?';\\\\n      case 'slash-search':\\\\n        return '/';\\\\n      case 'add-ui-feature':\\\\n        return 'Cmd/Ctrl+Shift+F';\\\\n      default:\\\\n        return '';\\\\n    }\\\\n  };\\\\n\\\\n  if (!open) return null;\\\\n  return createPortal(\\\\n    <div className=\\\\\\\"help-overlay\\\\\\\" role=\\\\\\\"dialog\\\\\\\" aria-modal=\\\\\\\"true\\\\\\\" onClick={() => setOpen(false)}>\\\\n      <div className=\\\\\\\"help\\\\\\\" onClick={(e) => e.stopPropagation()}>\\\\n        <div className=\\\\\\\"help__header\\\\\\\">\\\\n          <h2 className=\\\\\\\"help__title\\\\\\\">Keyboard Shortcuts</h2>\\\\n          <button className=\\\\\\\"help__close\\\\\\\" onClick={() => setOpen(false)} aria-label=\\\\\\\"Close\\\\\\\">×</button>\\\\n        </div>\\\\n        <div className=\\\\\\\"help__body\\\\\\\">\\\\n          <ul className=\\\\\\\"help__list\\\\\\\">\\\\n            {shortcuts.map((s) => (\\\\n              <li key={s.id} className=\\\\\\\"help__item\\\\\\\">\\\\n                <span className=\\\\\\\"help__desc\\\\\\\">{s.description || s.id}</span>\\\\n                <span className=\\\\\\\"help__keys\\\\\\\">{formatKeys(s.id)}</span>\\\\n              </li>\\\\n            ))}\\\\n          </ul>\\\\n        </div>\\\\n      </div>\\\\n    </div>,\\\\n    document.body\\\\n  );\\\\n}\\\\n\\\",\\\"src/renderer/hooks/useShortcuts.tsx\\\":\\\"import React, { createContext, useCallback, useContext, useEffect, useMemo, useRef } from 'react';\\\\nimport { settingsService } from '../services/settingsService';\\\\nimport type { AppSettings, ShortcutsModifier } from '../../types/settings';\\\\n\\\\ntype ShortcutHandler = (e: KeyboardEvent) => boolean | void;\\\\nexport type Shortcut = { id: string; keys: (e: KeyboardEvent) => boolean; handler: ShortcutHandler; description?: string; scope?: 'global' | 'list' | 'panel' | 'modal' };\\\\n\\\\ntype ShortcutsApi = {\\\\n  register: (sc: Shortcut) => () => void;\\\\n  list: () => Shortcut[];\\\\n};\\\\n\\\\nconst Ctx = createContext<ShortcutsApi | null>(null);\\\\n\\\\n// Track current modifier preference in module scope; updated on provider mount\\\\nlet CURRENT_MOD: ShortcutsModifier = 'ctrl';\\\\n\\\\nexport function ShortcutsProvider({ children }: { children: React.ReactNode }) {\\\\n  const mapRef = useRef<Map<string, Shortcut>>(new Map());\\\\n\\\\n  useEffect(() => {\\\\n    let mounted = true;\\\\n    // Load initial modifier from app settings\\\\n    (async () => {\\\\n      try {\\\\n        const app: AppSettings = await settingsService.getAppSettings();\\\\n        if (mounted) CURRENT_MOD = app.userPreferences.shortcutsModifier || CURRENT_MOD;\\\\n      } catch {}\\\\n    })();\\\\n    // No subscribe API exposed for app settings; match() will read CURRENT_MOD on each keydown\\\\n    return () => { mounted = false };\\\\n  }, []);\\\\n\\\\n  const register = useCallback((sc: Shortcut) => {\\\\n    mapRef.current.set(sc.id, sc);\\\\n    return () => { mapRef.current.delete(sc.id); };\\\\n  }, []);\\\\n\\\\n  const list = useCallback(() => Array.from(mapRef.current.values()), []);\\\\n\\\\n  useEffect(() => {\\\\n    const onKey = (e: KeyboardEvent) => {\\\\n      // Do not intercept if typing in editable fields unless shortcut explicitly handles it\\\\n      const target = e.target as HTMLElement | null;\\\\n      const tag = (target?.tagName || '').toLowerCase();\\\\n      const isEditable = (target && ((target as any).isContentEditable)) || tag === 'input' || tag === 'textarea' || tag === 'select';\\\\n\\\\n      // Iterate in registration order; first match wins\\\\n      for (const sc of mapRef.current.values()) {\\\\n        try {\\\\n          // If editable and the key is a plain character (no modifiers), skip handling to avoid interference like '/'\\\\n          if (isEditable && !e.metaKey && !e.ctrlKey && !e.altKey && !e.shiftKey) {\\\\n            continue;\\\\n          }\\\\n          if (sc.keys(e)) {\\\\n            const res = sc.handler(e);\\\\n            if (res !== false) { e.preventDefault(); e.stopPropagation(); return; }\\\\n          }\\\\n        } catch {}\\\\n      }\\\\n    };\\\\n    window.addEventListener('keydown', onKey, { capture: true });\\\\n    return () => window.removeEventListener('keydown', onKey, { capture: true } as any);\\\\n  }, []);\\\\n\\\\n  const api = useMemo(() => ({ register, list }), [register, list]);\\\\n  return <Ctx.Provider value={api}>{children}</Ctx.Provider>;\\\\n}\\\\n\\\\nexport function useShortcuts() {\\\\n  const ctx = useContext(Ctx);\\\\n  if (!ctx) return { register: () => () => {}, list: () => [] as Shortcut[] } as ShortcutsApi;\\\\n  return ctx;\\\\n}\\\\n\\\\n// Helpers\\\\nfunction isMod(e: KeyboardEvent) {\\\\n  return CURRENT_MOD === 'meta' ? e.metaKey : e.ctrlKey;\\\\n}\\\\n\\\\nexport const match = {\\\\n  modK: (e: KeyboardEvent) => (e.key === 'k' || e.key === 'K') && isMod(e),\\\\n  modN: (e: KeyboardEvent) => (e.key === 'n' || e.key === 'N') && isMod(e),\\\\n  slash: (e: KeyboardEvent) => e.key === '/',\\\\n  question: (e: KeyboardEvent) => e.key === '?',\\\\n  esc: (e: KeyboardEvent) => e.key === 'Escape',\\\\n};\\\\n\\\",\\\"src/renderer/hooks/useTheme.ts\\\":\\\"import { useEffect, useState } from 'react'\\\\n\\\\nexport type Theme = 'light' | 'dark'\\\\n\\\\nconst STORAGE_KEY = 'theme'\\\\n\\\\nexport function getSavedTheme(): Theme {\\\\n  const v = typeof window !== 'undefined' ? window.localStorage.getItem(STORAGE_KEY) : null\\\\n  return v === 'dark' || v === 'light' ? v : 'light'\\\\n}\\\\n\\\\nexport function applyTheme(theme: Theme) {\\\\n  if (typeof document === 'undefined') return\\\\n  const html = document.documentElement\\\\n  // Use data-theme attribute (design tokens listen to [data-theme=\\\\\\\"dark\\\\\\\"]) and set .dark class for compatibility\\\\n  html.setAttribute('data-theme', theme)\\\\n  if (theme === 'dark') {\\\\n    html.classList.add('dark')\\\\n  } else {\\\\n    html.classList.remove('dark')\\\\n  }\\\\n}\\\\n\\\\nexport function setTheme(theme: Theme) {\\\\n  if (typeof window !== 'undefined') {\\\\n    window.localStorage.setItem(STORAGE_KEY, theme)\\\\n  }\\\\n  applyTheme(theme)\\\\n}\\\\n\\\\n// Call this once on app boot to apply persisted theme before any UI renders\\\\nexport function initTheme() {\\\\n  applyTheme(getSavedTheme())\\\\n}\\\\n\\\\nexport function useTheme() {\\\\n  const [theme, setThemeState] = useState<Theme>(() => getSavedTheme())\\\\n\\\\n  useEffect(() => {\\\\n    applyTheme(theme)\\\\n    try { window.localStorage.setItem(STORAGE_KEY, theme) } catch {}\\\\n  }, [theme])\\\\n\\\\n  return { theme, setTheme: setThemeState }\\\\n}\\\\n\\\",\\\"src/renderer/App.tsx\\\":\\\"import { useEffect } from 'react';\\\\nimport SidebarView from './navigation/SidebarView';\\\\nimport { createRoot } from 'react-dom/client';\\\\nimport ModalHost from './navigation/ModalHost';\\\\nimport { ToastProvider } from './components/ui/Toast';\\\\nimport { NavigatorProvider, useNavigator } from './navigation/Navigator';\\\\nimport { ShortcutsProvider, useShortcuts, match } from './hooks/useShortcuts';\\\\nimport CommandMenu from './components/ui/CommandMenu';\\\\nimport ShortcutsHelp from './components/ui/ShortcutsHelp';\\\\nimport { initTheme } from './hooks/useTheme';\\\\nimport { NotificationMetadata } from '../types/notifications';\\\\nimport { ProjectsProvider } from './projects/ProjectContext';\\\\n\\\\nconst UI_IMPROVEMENTS_TASK_ID = 'f67e8921-b197-40c9-9154-e95db8f27deb';\\\\n\\\\nfunction GlobalShortcutsBootstrap() {\\\\n  const { register } = useShortcuts();\\\\n  const nav = useNavigator();\\\\n\\\\n  useEffect(() => {\\\\n    // Cmd/Ctrl+N: New Task\\\\n    const unregisterNew = register({ id: 'new-task', keys: match.modN, handler: () => nav.openModal({ type: 'task-create' }), description: 'New task' });\\\\n    // Cmd/Ctrl+Shift+F: Add Feature to UI Improvements\\\\n    const unregisterAddUiFeature = register({\\\\n      id: 'add-ui-feature',\\\\n      keys: (e: KeyboardEvent) => (e.key === 'f' || e.key === 'F') && (e.ctrlKey || e.metaKey) && e.shiftKey,\\\\n      handler: () => nav.openModal({ type: 'feature-create', taskId: UI_IMPROVEMENTS_TASK_ID }),\\\\n      description: 'Add feature to UI Improvements',\\\\n      scope: 'global'\\\\n    });\\\\n    return () => { unregisterNew(); unregisterAddUiFeature(); };\\\\n  }, [register, nav]);\\\\n\\\\n  useEffect(() => {\\\\n    const onHash = () => {};\\\\n    window.addEventListener('hashchange', onHash);\\\\n    return () => window.removeEventListener('hashchange', onHash);\\\\n  }, []);\\\\n\\\\n  return null;\\\\n}\\\\n\\\\nfunction NotificationClickHandler() {\\\\n  const nav = useNavigator();\\\\n\\\\n  useEffect(() => {\\\\n    const unsubscribe = window.notificationsService.onOpenNotification((metadata: NotificationMetadata) => {\\\\n      if (metadata.taskId) {\\\\n        nav.navigateTaskDetails(metadata.taskId, metadata.featureId);\\\\n      } else if (metadata.chatId) {\\\\n        nav.navigateView('Chat');\\\\n      } else if (metadata.documentPath) {\\\\n        nav.navigateView('Files');\\\\n      } else if (metadata.actionUrl) {\\\\n        // Handle custom URL if needed\\\\n      }\\\\n    });\\\\n\\\\n    return unsubscribe;\\\\n  }, [nav]);\\\\n\\\\n  return null;\\\\n}\\\\n\\\\nfunction App()\\\\n{\\\\n  useEffect(() => { initTheme() }, [])\\\\n\\\\n  return (\\\\n    <ToastProvider>\\\\n      <ProjectsProvider>\\\\n        <NavigatorProvider>\\\\n          <ShortcutsProvider>\\\\n            <GlobalShortcutsBootstrap />\\\\n            <NotificationClickHandler />\\\\n            <CommandMenu />\\\\n            <ShortcutsHelp />\\\\n            <div className=\\\\\\\"flex h-full w-full overflow-hidden\\\\\\\">\\\\n              <SidebarView />\\\\n              <ModalHost />\\\\n            </div>\\\\n          </ShortcutsProvider>\\\\n        </NavigatorProvider>\\\\n      </ProjectsProvider>\\\\n    </ToastProvider>\\\\n  );\\\\n}\\\\n\\\\nconst container = document.getElementById('root');\\\\nif (container) {\\\\n  const root = createRoot(container);\\\\n  root.render(<App />);\\\\n}\\\\n\\\",\\\"src/renderer/navigation/SidebarView.tsx\\\":\\\"import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\\\\nimport TasksView from '../screens/TasksView';\\\\nimport FilesView from '../screens/FilesView';\\\\nimport SettingsView from '../screens/SettingsView';\\\\nimport ChatView from '../screens/ChatView';\\\\nimport NotificationsView from '../screens/NotificationsView';\\\\nimport AgentsView from '../screens/AgentsView';\\\\nimport AllAgentsView from '../screens/AllAgentsView';\\\\nimport { useNavigator } from './Navigator';\\\\nimport Tooltip from '../components/ui/Tooltip';\\\\nimport { useNotifications } from '../hooks/useNotifications';\\\\n// import { useShortcuts } from '../hooks/useShortcuts';\\\\nimport { MAIN_PROJECT, useProjectContext } from '../projects/ProjectContext';\\\\nimport type { NavigationView } from '../types';\\\\nimport { useAppSettings } from '../hooks/useAppSettings';\\\\n\\\\nexport type SidebarProps = {};\\\\n\\\\nfunction classNames(...xs: Array<string | false | null | undefined>) {\\\\n  return xs.filter(Boolean).join(' ')\\\\n}\\\\n\\\\ntype NavDef = {\\\\n  id: string;\\\\n  label: string;\\\\n  view: NavigationView;\\\\n  icon: React.ReactNode;\\\\n  accent?: 'brand' | 'purple' | 'teal' | 'gray';\\\\n};\\\\n\\\\nconst NAV_ITEMS: NavDef[] = [\\\\n  { id: 'home', label: 'Home', view: 'Home', icon: <span aria-hidden>🏠</span>, accent: 'brand' },\\\\n  { id: 'files', label: 'Files', view: 'Files', icon: <span aria-hidden>📚</span>, accent: 'purple' },\\\\n  { id: 'chat', label: 'Chat', view: 'Chat', icon: <span aria-hidden>💬</span>, accent: 'teal' },\\\\n  { id: 'agents', label: 'Agents', view: 'Agents', icon: <span aria-hidden>🤖</span>, accent: 'teal' },\\\\n  { id: 'notifications', label: 'Notifications', view: 'Notifications', icon: <span aria-hidden>🔔</span>, accent: 'teal' },\\\\n  { id: 'settings', label: 'Settings', view: 'Settings', icon: <span aria-hidden>⚙️</span>, accent: 'gray' },\\\\n  { id: 'all-agents', label: 'All Agents', view: 'AllAgents', icon: <span aria-hidden>🗂️</span>, accent: 'teal' },\\\\n];\\\\n\\\\nfunction useMediaQuery(query: string) {\\\\n  const [matches, setMatches] = useState<boolean>(() => typeof window !== 'undefined' ? window.matchMedia(query).matches : false);\\\\n  useEffect(() => {\\\\n    const m = window.matchMedia(query);\\\\n    const onChange = () => setMatches(m.matches);\\\\n    if (m.addEventListener) m.addEventListener('change', onChange);\\\\n    else m.addListener(onChange);\\\\n    setMatches(m.matches);\\\\n    return () => {\\\\n      if (m.removeEventListener) m.removeEventListener('change', onChange);\\\\n      else m.removeListener(onChange);\\\\n    };\\\\n  }, [query]);\\\\n  return matches;\\\\n}\\\\n\\\\nfunction useAccentClass(seed: string, isMain: boolean): string {\\\\n  if (isMain) { return 'nav-item nav-accent-gray' }\\\\n  // Stable but simple accent class selection based on id\\\\n  const n = [...seed].reduce((a, c) => a + c.charCodeAt(0), 0)\\\\n  const i = n % 3\\\\n  switch (i) {\\\\n    case 0:\\\\n      return 'nav-accent-teal'\\\\n    case 1:\\\\n      return 'nav-accent-purple'\\\\n    case 2:\\\\n    default:\\\\n      return 'nav-accent-brand'\\\\n  }\\\\n}\\\\n\\\\nexport default function SidebarView({}: SidebarProps) {\\\\n  const { currentView, navigateView, openModal } = useNavigator();\\\\n  const { unreadCount } = useNotifications();\\\\n  // const { register } = useShortcuts();\\\\n  const {\\\\n    activeProjectId,\\\\n    projects,\\\\n    setActiveProjectId,\\\\n  } = useProjectContext()\\\\n  const { isAppSettingsLoaded, appSettings, updateAppSettings } = useAppSettings()\\\\n\\\\n  const [collapsed, setCollapsed] = useState<boolean>(appSettings.userPreferences.sidebarCollapsed);\\\\n\\\\n  useEffect(() => {\\\\n    if (isAppSettingsLoaded){\\\\n      setCollapsed(appSettings.userPreferences.sidebarCollapsed)\\\\n    }\\\\n  }, [isAppSettingsLoaded]);\\\\n  useEffect(() => {\\\\n    updateAppSettings({ userPreferences: { ...appSettings.userPreferences, sidebarCollapsed: collapsed }})\\\\n  }, [collapsed]);\\\\n\\\\n  // Responsive: on small screens, render as overlay drawer\\\\n  const isMobile = useMediaQuery('(max-width: 768px)');\\\\n  const [mobileOpen, setMobileOpen] = useState<boolean>(false);\\\\n  const mobileTriggerRef = useRef<HTMLButtonElement | null>(null);\\\\n  const firstItemRef = useRef<HTMLButtonElement | null>(null);\\\\n\\\\n  useEffect(() => {\\\\n    if (!isMobile) setMobileOpen(false);\\\\n  }, [isMobile]);\\\\n\\\\n  useEffect(() => {\\\\n    if (mobileOpen) {\\\\n      // Focus the first navigable item when opening\\\\n      setTimeout(() => firstItemRef.current?.focus(), 0);\\\\n    }\\\\n  }, [mobileOpen]);\\\\n\\\\n  // Keyboard shortcut to toggle collapse on desktop (Cmd/Ctrl+B)\\\\n  useEffect(() => {\\\\n    const onKey = (e: KeyboardEvent) => {\\\\n      const isMod = e.metaKey || e.ctrlKey;\\\\n      if (isMod && (e.key === 'b' || e.key === 'B')) {\\\\n        e.preventDefault();\\\\n        if (isMobile) setMobileOpen((v) => !v);\\\\n        else setCollapsed((v) => !v);\\\\n      }\\\\n      if (isMobile && e.key === 'Escape' && mobileOpen) {\\\\n        setMobileOpen(false);\\\\n        // restore focus to trigger\\\\n        setTimeout(() => mobileTriggerRef.current?.focus(), 0);\\\\n      }\\\\n    };\\\\n    window.addEventListener('keydown', onKey);\\\\n    return () => window.removeEventListener('keydown', onKey);\\\\n  }, [isMobile, mobileOpen]);\\\\n\\\\n  // useEffect(() => {\\\\n  //   const unregister = register({\\\\n  //     id: 'open-notifications',\\\\n  //     keys: (e) => (e.metaKey || e.ctrlKey) && e.shiftKey && (e.key === 'n' || e.key === 'N'),\\\\n  //     handler: () => { navigateView('Notifications'); },\\\\n  //     description: 'Open Notifications',\\\\n  //     scope: 'global',\\\\n  //   });\\\\n  //   return unregister;\\\\n  // }, [register, navigateView]);\\\\n\\\\n  // Roving tabindex for nav items\\\\n  const activeIndex = useMemo(() => {\\\\n    const idx = NAV_ITEMS.findIndex((n) => n.view === currentView);\\\\n    return idx >= 0 ? idx : 0;\\\\n  }, [currentView]);\\\\n  const [focusIndex, setFocusIndex] = useState<number>(activeIndex);\\\\n  useEffect(() => setFocusIndex(activeIndex), [activeIndex]);\\\\n\\\\n  const onKeyDownList = useCallback((e: React.KeyboardEvent) => {\\\\n    const max = NAV_ITEMS.length - 1;\\\\n    if (e.key === 'ArrowDown') {\\\\n      e.preventDefault();\\\\n      setFocusIndex((i) => (i >= max ? 0 : i + 1));\\\\n    } else if (e.key === 'ArrowUp') {\\\\n      e.preventDefault();\\\\n      setFocusIndex((i) => (i <= 0 ? max : i - 1));\\\\n    } else if (e.key === 'Home') {\\\\n      e.preventDefault();\\\\n      setFocusIndex(0);\\\\n    } else if (e.key === 'End') {\\\\n      e.preventDefault();\\\\n      setFocusIndex(max);\\\\n    }\\\\n  }, []);\\\\n\\\\n  const onActivate = useCallback((view: NavDef['view']) => {\\\\n    navigateView(view);\\\\n    if (isMobile) {\\\\n      setMobileOpen(false);\\\\n      setTimeout(() => mobileTriggerRef.current?.focus(), 0);\\\\n    }\\\\n  }, [navigateView, isMobile]);\\\\n\\\\n  const renderedView = useMemo(() => {\\\\n    if (currentView === 'Files') return <div key=\\\\\\\"Files\\\\\\\" className=\\\\\\\"flex flex-col flex-1 min-h-0 view-transition\\\\\\\"><FilesView /></div>;\\\\n    if (currentView === 'Settings') return <div key=\\\\\\\"Settings\\\\\\\" className=\\\\\\\"flex flex-col flex-1 min-h-0 view-transition\\\\\\\"><SettingsView /></div>;\\\\n    if (currentView === 'AllAgents') return <div key=\\\\\\\"AllAgents\\\\\\\" className=\\\\\\\"flex flex-col flex-1 min-h-0 view-transition\\\\\\\"><AllAgentsView /></div>;\\\\n    if (currentView === 'Chat') return <div key=\\\\\\\"Chat\\\\\\\" className=\\\\\\\"flex flex-col flex-1 min-h-0 view-transition\\\\\\\"><ChatView /></div>;\\\\n    if (currentView === 'Notifications') return <div key=\\\\\\\"Notifications\\\\\\\" className=\\\\\\\"flex flex-col flex-1 min-h-0 view-transition\\\\\\\"><NotificationsView /></div>;\\\\n    if (currentView === 'Agents') return <div key=\\\\\\\"Agents\\\\\\\" className=\\\\\\\"flex flex-col flex-1 min-h-0 view-transition\\\\\\\"><AgentsView /></div>;\\\\n    return <div key=\\\\\\\"Home\\\\\\\" className=\\\\\\\"flex flex-col flex-1 min-h-0 view-transition\\\\\\\"><TasksView /></div>;\\\\n  }, [currentView]);\\\\n\\\\n  const effectiveCollapsed = isMobile ? false : collapsed;\\\\n\\\\n  // Sidebar element (shared for desktop and mobile drawer)\\\\n  const Aside = (\\\\n    <aside\\\\n      className={`sidebar relative z-30 flex h-full shrink-0 flex-col border-r bg-white dark:bg-neutral-900 dark:border-neutral-800 ${effectiveCollapsed ? 'collapsed' : ''}`}\\\\n      aria-label=\\\\\\\"Primary navigation\\\\\\\"\\\\n      data-collapsed={effectiveCollapsed ? 'true' : 'false'}\\\\n      style={{}}\\\\n    >\\\\n      <div className={`mb-2 flex items-center ${effectiveCollapsed ? 'justify-center' : 'justify-between'} px-2 pt-3`}>\\\\n        {!effectiveCollapsed && (\\\\n          <div className=\\\\\\\"px-1\\\\\\\">\\\\n            <div className=\\\\\\\"text-sm font-semibold tracking-tight text-neutral-900 dark:text-neutral-100\\\\\\\">Workspace</div>\\\\n            <div className=\\\\\\\"text-[11px] text-neutral-500 dark:text-neutral-400\\\\\\\">Navigation</div>\\\\n          </div>\\\\n        )}\\\\n        <button\\\\n          type=\\\\\\\"button\\\\\\\"\\\\n          onClick={() => (isMobile ? setMobileOpen(false) : setCollapsed((v) => !v))}\\\\n          className=\\\\\\\"nav-toggle\\\\\\\"\\\\n          aria-label={effectiveCollapsed ? 'Expand sidebar' : 'Collapse sidebar'}\\\\n          aria-expanded={!effectiveCollapsed}\\\\n          title={effectiveCollapsed ? 'Expand sidebar (⌘/Ctrl+B)' : 'Collapse sidebar (⌘/Ctrl+B)'}\\\\n        >\\\\n          <span aria-hidden>{effectiveCollapsed ? '»' : '«'}</span>\\\\n        </button>\\\\n      </div>\\\\n\\\\n      <nav className=\\\\\\\"nav\\\\\\\" onKeyDown={onKeyDownList}>\\\\n        <ul className=\\\\\\\"nav-list\\\\\\\" role=\\\\\\\"list\\\\\\\">\\\\n          {NAV_ITEMS.filter((n) => n.view !== 'Settings' && n.view !== 'AllAgents').map((item, i) => {\\\\n            const isActive = currentView === item.view;\\\\n            const ref = i === 0 ? firstItemRef : undefined;\\\\n            const showBadge = item.view === 'Notifications' && unreadCount > 0;\\\\n            const Btn = (\\\\n              <button\\\\n                ref={ref as any}\\\\n                type=\\\\\\\"button\\\\\\\"\\\\n                className={`nav-item ${isActive ? 'nav-item--active' : ''} ${effectiveCollapsed ? 'nav-item--compact' : ''} nav-accent-${item.accent ?? 'brand'}`}\\\\n                aria-current={isActive ? 'page' : undefined}\\\\n                onClick={() => onActivate(item.view)}\\\\n                title={item.label}\\\\n                tabIndex={focusIndex === i ? 0 : -1}\\\\n                onFocus={() => setFocusIndex(i)}\\\\n                onKeyDown={(e) => {\\\\n                  if (e.key === 'Enter' || e.key === ' ') {\\\\n                    e.preventDefault();\\\\n                    onActivate(item.view);\\\\n                  }\\\\n                }}\\\\n              >\\\\n                <span className=\\\\\\\"nav-item__icon\\\\\\\">{item.icon}</span>\\\\n                {!effectiveCollapsed && <span className=\\\\\\\"nav-item__label\\\\\\\">{item.label}</span>}\\\\n                {showBadge && (\\\\n                  <span className=\\\\\\\"nav-item__badge\\\\\\\">\\\\n                    {unreadCount}\\\\n                  </span>\\\\n                )}\\\\n              </button>\\\\n            );\\\\n            return (\\\\n              <li key={item.id} className=\\\\\\\"nav-li\\\\\\\">\\\\n                {effectiveCollapsed ? (\\\\n                  <Tooltip content={item.label} placement=\\\\\\\"right\\\\\\\">{Btn}</Tooltip>\\\\n                ) : Btn}\\\\n              </li>\\\\n            );\\\\n          })}\\\\n        </ul>\\\\n\\\\n        <div className=\\\\\\\"nav-sep\\\\\\\" aria-hidden />\\\\n\\\\n        <ul className=\\\\\\\"nav-list\\\\\\\" role=\\\\\\\"list\\\\\\\">\\\\n          {NAV_ITEMS.filter((n) => n.view === 'Settings' || n.view === 'AllAgents').map((item) => {\\\\n            const idx = NAV_ITEMS.findIndex((n) => n.view === item.view);\\\\n            const isActive = currentView === item.view;\\\\n            const Btn = (\\\\n              <button\\\\n                type=\\\\\\\"button\\\\\\\"\\\\n                className={`nav-item ${isActive ? 'nav-item--active' : ''} ${effectiveCollapsed ? 'nav-item--compact' : ''} nav-accent-${item.accent ?? 'gray'}`}\\\\n                aria-current={isActive ? 'page' : undefined}\\\\n                onClick={() => onActivate(item.view)}\\\\n                title={item.label}\\\\n                tabIndex={focusIndex === idx ? 0 : -1}\\\\n                onFocus={() => setFocusIndex(idx)}\\\\n                onKeyDown={(e) => {\\\\n                  if (e.key === 'Enter' || e.key === ' ') {\\\\n                    e.preventDefault();\\\\n                    onActivate(item.view);\\\\n                  }\\\\n                }}\\\\n              >\\\\n                <span className=\\\\\\\"nav-item__icon\\\\\\\">{item.icon}</span>\\\\n                {!effectiveCollapsed && <span className=\\\\\\\"nav-item__label\\\\\\\">{item.label}</span>}\\\\n              </button>\\\\n            );\\\\n            return (\\\\n              <li key={item.id} className=\\\\\\\"nav-li\\\\\\\">\\\\n                {effectiveCollapsed ? (\\\\n                  <Tooltip content={item.label} placement=\\\\\\\"right\\\\\\\">{Btn}</Tooltip>\\\\n                ) : Btn}\\\\n              </li>\\\\n            );\\\\n          })}\\\\n        </ul>\\\\n\\\\n        <div className=\\\\\\\"nav-sep\\\\\\\" />\\\\n        {/* Projects section */}\\\\n        {!effectiveCollapsed && (\\\\n          <div className=\\\\\\\"px-3\\\\\\\" aria-hidden>\\\\n            <div style={{ color: 'var(--text-secondary)', fontSize: 12, display: 'flex', alignItems: 'center', justifyContent: 'space-between', gap: 8 }}>\\\\n              <span>Projects</span>\\\\n              <div style={{ display: 'inline-flex', gap: 6, alignItems: 'center' }}>\\\\n                <span>{projects.length}</span>\\\\n                <button className=\\\\\\\"btn-secondary\\\\\\\" style={{ padding: '0 8px', height: 24, fontSize: 12 }} onClick={() => openModal({ type: 'projects-manage' })}>Manage</button>\\\\n              </div>\\\\n            </div>\\\\n          </div>\\\\n        )}\\\\n        <ul className=\\\\\\\"nav-list\\\\\\\" aria-label=\\\\\\\"Projects\\\\\\\">\\\\n          {projects.length == 0 && (\\\\n            <li className=\\\\\\\"nav-li\\\\\\\">\\\\n              <div className={classNames('nav-item', effectiveCollapsed && 'nav-item--compact')} role=\\\\\\\"status\\\\\\\">\\\\n                <span className=\\\\\\\"nav-item__icon\\\\\\\" aria-hidden>⚠️</span>\\\\n                {!effectiveCollapsed && <span className=\\\\\\\"nav-item__label\\\\\\\">Failed to load</span>}\\\\n              </div>\\\\n            </li>\\\\n          )}\\\\n          {projects.map((p) => {\\\\n            const isMain = p.id === MAIN_PROJECT\\\\n            const active = activeProjectId === p.id\\\\n            const accent = useAccentClass(p.id, isMain)\\\\n            return (\\\\n              <li className=\\\\\\\"nav-li\\\\\\\" key={p.id}>\\\\n                <div className=\\\\\\\"flex items-center\\\\\\\">\\\\n                  <button\\\\n                    className={classNames('nav-item flex-1', accent, active && 'nav-item--active', effectiveCollapsed && 'nav-item--compact')}\\\\n                    aria-current={active ? 'true' : undefined}\\\\n                    onClick={() => setActiveProjectId(p.id)}\\\\n                    title={p.title}\\\\n                  >\\\\n                    {isMain && <span className=\\\\\\\"nav-item__icon\\\\\\\" aria-hidden>🗂️</span>}\\\\n                    {!isMain && <span className=\\\\\\\"nav-item__icon\\\\\\\" aria-hidden>📁</span>}\\\\n                    {!effectiveCollapsed && <span className=\\\\\\\"nav-item__label\\\\\\\">{p.title}</span>}\\\\n                  </button>\\\\n                </div>\\\\n              </li>\\\\n            )\\\\n          })}\\\\n        </ul>\\\\n\\\\n      </nav>\\\\n    </aside>\\\\n  );\\\\n\\\\n  return (\\\\n    <div className=\\\\\\\"flex h-full w-full min-w-0\\\\\\\">\\\\n      {/* Desktop sidebar or mobile drawer */}\\\\n      {isMobile ? (\\\\n        <>\\\\n          {mobileOpen && (\\\\n            <>\\\\n              <div\\\\n                className=\\\\\\\"fixed inset-0 z-20 bg-black/30 backdrop-blur-sm\\\\\\\"\\\\n                onClick={() => setMobileOpen(false)}\\\\n                aria-hidden\\\\n              />\\\\n              <div className=\\\\\\\"fixed inset-y-0 left-0 z-30\\\\\\\" style={{ width: 260 }}>\\\\n                {/* Force expanded UI for drawer, but keep collapsed state persisted */}\\\\n                {React.cloneElement(Aside, { className: `${(Aside as any).props.className} drawer-open`, 'data-collapsed': 'false' })}\\\\n              </div>\\\\n            </>\\\\n          )}\\\\n        </>\\\\n      ) : (\\\\n        Aside\\\\n      )}\\\\n\\\\n      <main className=\\\\\\\"flex min-w-0 flex-1 flex-col overflow-hidden\\\\\\\">\\\\n        {/* Mobile top bar */}\\\\n        <div className=\\\\\\\"md:hidden sticky top-0 z-10 flex items-center gap-2 border-b border-neutral-200 bg-white px-3 py-2 dark:border-neutral-800 dark:bg-neutral-900\\\\\\\">\\\\n          <button\\\\n            ref={mobileTriggerRef}\\\\n            type=\\\\\\\"button\\\\\\\"\\\\n            className=\\\\\\\"nav-trigger\\\\\\\"\\\\n            onClick={() => setMobileOpen(true)}\\\\n            aria-label=\\\\\\\"Open sidebar\\\\\\\"\\\\n          >\\\\n            ☰\\\\n          </button>\\\\n          <div className=\\\\\\\"text-sm font-semibold\\\\\\\">{currentView}</div>\\\\n        </div>\\\\n\\\\n        <div className=\\\\\\\"flex flex-col flex-1 min-h-0 overflow-hidden\\\\\\\">\\\\n          {renderedView}\\\\n        </div>\\\\n      </main>\\\\n    </div>\\\\n  );\\\\n}\\\\n\\\",\\\"src/renderer/screens/ChatView.tsx\\\":\\\"import React, { useState, useEffect, useRef, useMemo } from 'react'\\\\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/Select'\\\\nimport { useChats } from '../hooks/useChats'\\\\nimport { useFilesAutocomplete } from '../hooks/useFilesAutocomplete'\\\\nimport { useReferencesAutocomplete } from '../hooks/useReferencesAutocomplete'\\\\nimport { useLLMConfig } from '../hooks/useLLMConfig'\\\\nimport { useNavigator } from '../navigation/Navigator'\\\\nimport CollapsibleSidebar from '../components/ui/CollapsibleSidebar'\\\\nimport FileDisplay from '../components/ui/FileDisplay'\\\\nimport useFiles, { inferFileType } from '../../renderer/hooks/useFiles';\\\\nimport { Chat, ChatMessage } from '../services/chatsService'\\\\nimport RichText from '../components/ui/RichText'\\\\n\\\\ninterface EnhancedMessage extends ChatMessage {\\\\n  showModel?: boolean\\\\n  isFirstInGroup?: boolean\\\\n}\\\\n\\\\nexport default function ChatView() {\\\\n  const {\\\\n    currentChatId,\\\\n    setCurrentChatId,\\\\n    chatsById,\\\\n    createChat,\\\\n    deleteChat,\\\\n    sendMessage\\\\n  } = useChats()\\\\n  const { files, filesByPath, uploadFile } = useFiles()\\\\n  const { configs, activeConfigId, activeConfig, isConfigured, setActive } = useLLMConfig()\\\\n  const { navigateView } = useNavigator()\\\\n\\\\n  const [currentChat, setCurrentChat] = useState<Chat | undefined>()\\\\n  const [input, setInput] = useState<string>('')\\\\n  const [pendingAttachments, setPendingAttachments] = useState<string[]>([])\\\\n  const messageListRef = useRef<HTMLDivElement>(null)\\\\n  const textareaRef = useRef<HTMLTextAreaElement>(null)\\\\n  const mirrorRef = useRef<HTMLDivElement>(null)\\\\n  const fileInputRef = useRef<HTMLInputElement>(null)\\\\n  const [messages, setMessages] = useState<ChatMessage[]>([])\\\\n\\\\n  const {\\\\n    isOpen: isAutocompleteOpen,\\\\n    matches: matchingDocs,\\\\n    position: autocompletePosition,\\\\n    onSelect: onAutocompleteSelect,\\\\n  } = useFilesAutocomplete({ filesList: files.map(f => f.path), input, setInput, textareaRef, mirrorRef })\\\\n\\\\n  const {\\\\n    isOpen: isRefsOpen,\\\\n    matches: matchingRefs,\\\\n    position: refsPosition,\\\\n    onSelect: onRefsSelect,\\\\n  } = useReferencesAutocomplete({ input, setInput, textareaRef, mirrorRef })\\\\n\\\\n  useEffect(() => {\\\\n    const el = messageListRef.current\\\\n    if (!el) return\\\\n    el.scrollTo({ top: el.scrollHeight })\\\\n  }, [chatsById])\\\\n\\\\n  useEffect(() => {\\\\n    if (currentChatId){\\\\n      const chat = chatsById[currentChatId]\\\\n      setCurrentChat(chat)\\\\n    }\\\\n  }, [currentChatId, chatsById])\\\\n\\\\n  useEffect(() => {\\\\n    if (currentChat){\\\\n      setMessages(currentChat.messages)\\\\n    }\\\\n  }, [currentChat])\\\\n\\\\n  \\\\n  const chatHistories = useMemo(() => {\\\\n    return Object.values(chatsById).sort((a,b) => new Date(a.updateDate).getTime() - new Date(b.updateDate).getTime())\\\\n  }, [chatsById])\\\\n\\\\n  const autoSizeTextarea = () => {\\\\n    const el = textareaRef.current\\\\n    if (!el) return\\\\n    el.style.height = 'auto'\\\\n    const max = 200\\\\n    const next = Math.min(el.scrollHeight, max)\\\\n    el.style.height = next + 'px'\\\\n  }\\\\n  useEffect(() => {\\\\n    autoSizeTextarea()\\\\n  }, [input])\\\\n\\\\n  const handleSend = async () => {\\\\n    if (!input.trim() || !activeConfig) return\\\\n    await sendMessage(input, activeConfig, pendingAttachments)\\\\n    setInput('')\\\\n    setPendingAttachments([])\\\\n    requestAnimationFrame(() => {\\\\n      if (textareaRef.current) {\\\\n        textareaRef.current.style.height = 'auto'\\\\n        textareaRef.current.focus()\\\\n      }\\\\n    })\\\\n  }\\\\n\\\\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\\\\n    const file = e.target.files?.[0]\\\\n    if (!file) return\\\\n\\\\n    const reader = new FileReader()\\\\n    reader.onload = async (event) => {\\\\n      const content = event.target?.result as string\\\\n      const newPath = await uploadFile(file.name, content)\\\\n      console.log(\\\\\\\"newPath: \\\\\\\", newPath)\\\\n      if (newPath){\\\\n        setPendingAttachments((prev) => Array.from(new Set([...prev, newPath])))\\\\n      }\\\\n    }\\\\n    reader.readAsText(file)\\\\n    // e.currentTarget.value = ''\\\\n  }\\\\n\\\\n  const handleTextareaKeyDown: React.KeyboardEventHandler<HTMLTextAreaElement> = (e) => {\\\\n    if ((e.metaKey || e.ctrlKey) && e.key === 'Enter') {\\\\n      e.preventDefault()\\\\n      handleSend()\\\\n    }\\\\n  }\\\\n\\\\n  const enhancedMessages: EnhancedMessage[] = useMemo(() => {\\\\n    return messages.map((msg, index) => {\\\\n      let showModel = false\\\\n      if (msg.role === 'assistant' && msg.model) {\\\\n        const prevAssistant = [...messages.slice(0, index)].reverse().find((m) => m.role === 'assistant')\\\\n        showModel = !prevAssistant || prevAssistant.model !== msg.model\\\\n      }\\\\n      const prev = messages[index - 1]\\\\n      const isFirstInGroup = !prev || prev.role !== msg.role || msg.role === 'system'\\\\n      return { ...msg, showModel, isFirstInGroup }\\\\n    })\\\\n  }, [messages])\\\\n\\\\n  const canSend = Boolean(input.trim() && activeConfig && isConfigured)\\\\n\\\\n  const chatItems = useMemo(() => chatHistories.map((chat) => ({\\\\n    id: chat.id,\\\\n    label: `Chat ${new Date(chat.creationDate)}`,\\\\n    icon: <span aria-hidden>💬</span>,\\\\n    accent: 'gray',\\\\n    action: (\\\\n      <button\\\\n        onClick={(e) => {\\\\n          e.stopPropagation()\\\\n          deleteChat(chat.id)\\\\n        }}\\\\n      >\\\\n        Delete\\\\n      </button>\\\\n    ),\\\\n  })), [chatHistories, deleteChat])\\\\n\\\\n  return (\\\\n    <CollapsibleSidebar\\\\n      items={chatItems}\\\\n      activeId={currentChatId || ''}\\\\n      onSelect={setCurrentChatId}\\\\n      storageKey=\\\\\\\"chat-sidebar-collapsed\\\\\\\"\\\\n      headerTitle=\\\\\\\"History\\\\\\\"\\\\n      headerSubtitle=\\\\\\\"\\\\\\\"\\\\n      headerAction={<button className=\\\\\\\"btn\\\\\\\" onClick={createChat} aria-label=\\\\\\\"Create new chat\\\\\\\">New</button>}\\\\n      emptyMessage=\\\\\\\"No chats yet\\\\\\\"\\\\n    >\\\\n      <section className=\\\\\\\"flex-1 flex flex-col w-full h-full bg-[var(--surface-base)] overflow-hidden\\\\\\\">\\\\n        <div\\\\n          ref={mirrorRef}\\\\n          aria-hidden=\\\\\\\"true\\\\\\\"\\\\n          className=\\\\\\\"absolute top-[-9999px] left-0 overflow-hidden whitespace-pre-wrap break-words pointer-events-none\\\\\\\"\\\\n        />\\\\n\\\\n        <header className=\\\\\\\"flex-shrink-0 px-4 py-2 border-b border-[var(--border-subtle)] bg-[var(--surface-raised)] flex items-center justify-between gap-3\\\\\\\">\\\\n          <div className=\\\\\\\"flex items-center gap-3 min-w-0\\\\\\\">\\\\n            <h1 className=\\\\\\\"m-0 text-[var(--text-primary)] text-[18px] leading-tight font-semibold truncate\\\\\\\">\\\\n              Project Chat {currentChat ? `(${new Date(currentChat.updateDate).toLocaleString()})` : ''}\\\\n            </h1>\\\\n          </div>\\\\n          <div className=\\\\\\\"flex items-center gap-2\\\\\\\">\\\\n            <Select value={activeConfigId || ''} onValueChange={setActive}>\\\\n              <SelectTrigger className=\\\\\\\"ui-select w-[220px]\\\\\\\">\\\\n                <SelectValue placeholder=\\\\\\\"Select Model\\\\\\\" />\\\\n              </SelectTrigger>\\\\n              <SelectContent>\\\\n                {configs.map((cfg) => (\\\\n                  <SelectItem key={cfg.id} value={cfg.id}>\\\\n                    {cfg.name} ({cfg.model})\\\\n                  </SelectItem>\\\\n                ))}\\\\n              </SelectContent>\\\\n            </Select>\\\\n            <button\\\\n              onClick={() => navigateView('Settings')}\\\\n              className=\\\\\\\"btn-secondary\\\\\\\"\\\\n              aria-label=\\\\\\\"Open Settings\\\\\\\"\\\\n            >\\\\n              Settings\\\\n            </button>\\\\n          </div>\\\\n        </header>\\\\n\\\\n        {!isConfigured && (\\\\n          <div\\\\n            className=\\\\\\\"flex-shrink-0 mx-4 mt-3 rounded-md border border-[var(--border-default)] p-2 text-[13px] flex items-center justify-between gap-2\\\\\\\"\\\\n            style={{\\\\n              background: 'color-mix(in srgb, var(--accent-primary) 10%, var(--surface-raised))',\\\\n              color: 'var(--text-primary)',\\\\n            }}\\\\n            role=\\\\\\\"status\\\\\\\"\\\\n          >\\\\n            <span>LLM not configured. Set your API key in Settings to enable sending messages.</span>\\\\n            <button className=\\\\\\\"btn\\\\\\\" onClick={() => navigateView('Settings')}>Configure</button>\\\\n          </div>\\\\n        )}\\\\n\\\\n        <div ref={messageListRef} className=\\\\\\\"flex-1 min-h-0 overflow-auto p-4\\\\\\\">\\\\n          {enhancedMessages.length === 0 ? (\\\\n            <div className=\\\\\\\"mt-10 mx-auto max-w-[720px] text-center text-[var(--text-secondary)]\\\\\\\">\\\\n              <div className=\\\\\\\"text-[18px] font-medium\\\\\\\">Start chatting about the project</div>\\\\n              <div className=\\\\\\\"text-[13px] mt-2\\\\\\\">Tip: Use Cmd/Ctrl+Enter to send • Shift+Enter for newline</div>\\\\n              <div className=\\\\\\\"mt-4 inline-block rounded-lg border border-[var(--border-default)] bg-[var(--surface-raised)] px-4 py-3 text-[13px]\\\\\\\">\\\\n                Attach markdown or text files to give context. Mention files with @, and reference tasks/features with #.\\\\n              </div>\\\\n            </div>\\\\n          ) : (\\\\n            <div className=\\\\\\\"mx-auto max-w-[960px] space-y-3\\\\\\\">\\\\n              {enhancedMessages.map((msg, index) => {\\\\n                const isUser = msg.role === 'user'\\\\n                const isSystem = msg.role === 'system'\\\\n\\\\n                if (isSystem) {\\\\n                  return (\\\\n                    <div key={index} className=\\\\\\\"flex justify-center\\\\\\\">\\\\n                      <div className=\\\\\\\"text-[12px] text-[var(--text-muted)] italic bg-[var(--surface-raised)] border border-[var(--border-subtle)] rounded-full px-3 py-1\\\\\\\">\\\\n                        <RichText text={msg.content} />\\\\n                      </div>\\\\n                    </div>\\\\n                  )\\\\n                }\\\\n\\\\n                return (\\\\n                  <div\\\\n                    key={index}\\\\n                    className={[\\\\n                      'flex items-start gap-2',\\\\n                      isUser ? 'flex-row-reverse' : 'flex-row',\\\\n                    ].join(' ')}\\\\n                  >\\\\n                    <div\\\\n                      className={[\\\\n                        'shrink-0 w-7 h-7 rounded-full flex items-center justify-center text-[11px] font-semibold',\\\\n                        isUser\\\\n                          ? 'bg-[var(--accent-primary)] text-[var(--text-inverted)]'\\\\n                          : 'bg-[color-mix(in_srgb,var(--accent-primary)_14%,transparent)] text-[var(--text-primary)] border border-[var(--border-subtle)]',\\\\n                      ].join(' ')}\\\\n                      aria-hidden=\\\\\\\"true\\\\\\\"\\\\n                    >\\\\n                      {isUser ? 'You' : 'AI'}\\\\n                    </div>\\\\n\\\\n                    <div className={['max-w-[72%] min-w-[80px] flex flex-col', isUser ? 'items-end' : 'items-start'].join(' ')}>\\\\n                      {!isUser && msg.showModel && msg.model && (\\\\n                        <div className=\\\\\\\"text-[11px] text-[var(--text-secondary)] mb-1 inline-flex items-center gap-1 border border-[var(--border-subtle)] bg-[var(--surface-overlay)] rounded-full px-2 py-[2px]\\\\\\\">\\\\n                          <span className=\\\\\\\"inline-block w-1.5 h-1.5 rounded-full bg-[var(--accent-primary)]\\\\\\\" />\\\\n                          {msg.model}\\\\n                        </div>\\\\n                      )}\\\\n\\\\n                      <div\\\\n                        className={[\\\\n                          'px-3 py-2 rounded-2xl whitespace-pre-wrap break-words shadow',\\\\n                          isUser\\\\n                            ? 'bg-[var(--accent-primary)] text-[var(--text-inverted)] rounded-br-md'\\\\n                            : 'bg-[var(--surface-raised)] text-[var(--text-primary)] border border-[var(--border-subtle)] rounded-bl-md',\\\\n                          msg.isFirstInGroup ? '' : isUser ? 'rounded-tr-md' : 'rounded-tl-md',\\\\n                        ].join(' ')}\\\\n                      >\\\\n                        <RichText text={msg.content} />\\\\n                      </div>\\\\n\\\\n                      {msg.attachments && msg.attachments.length > 0 && (\\\\n                        <div className={[\\\\n                          'mt-1 flex flex-wrap gap-1',\\\\n                          isUser ? 'justify-end' : 'justify-start'\\\\n                        ].join(' ')}>\\\\n                          {msg.attachments.map((path, i) => {\\\\n                            const meta = filesByPath[path]\\\\n                            const name = meta?.name || (path.split('/').pop() || path)\\\\n                            const type = meta?.type || inferFileType(path)\\\\n                            const size = meta?.size ?? undefined\\\\n                            const mtime = meta?.mtime ?? undefined\\\\n                            return (\\\\n                              <FileDisplay\\\\n                                key={`${index}-att-${i}-${path}`}\\\\n                                file={{ name, path, type, size, mtime }}\\\\n                                density=\\\\\\\"compact\\\\\\\"\\\\n                                interactive\\\\n                                showPreviewOnHover\\\\n                              />\\\\n                            )\\\\n                          })}\\\\n                        </div>\\\\n                      )}\\\\n                    </div>\\\\n                  </div>\\\\n                )\\\\n              })}\\\\n            </div>\\\\n          )}\\\\n        </div>\\\\n\\\\n        <div className=\\\\\\\"flex-shrink-0 border-t border-[var(--border-subtle)] bg-[var(--surface-raised)]\\\\\\\">\\\\n          <div className=\\\\\\\"p-3\\\\\\\">\\\\n            <div className=\\\\\\\"relative flex items-end gap-2\\\\\\\">\\\\n              <div className=\\\\\\\"flex-1 bg-[var(--surface-base)] border border-[var(--border-default)] rounded-md focus-within:ring-2 focus-within:ring-[var(--focus-ring)]\\\\\\\">\\\\n                <textarea\\\\n                  ref={textareaRef}\\\\n                  value={input}\\\\n                  onChange={(e) => setInput(e.target.value)}\\\\n                  onInput={autoSizeTextarea}\\\\n                  onKeyDown={handleTextareaKeyDown}\\\\n                  className=\\\\\\\"w-full resize-none bg-transparent px-3 py-2 text-[var(--text-primary)] outline-none\\\\\\\"\\\\n                  placeholder={isConfigured ? 'Type your message…' : 'You can compose a message and reference files (@) and tasks/features (#) even before configuring. Configure LLM to send.'}\\\\n                  rows={1}\\\\n                  aria-label=\\\\\\\"Message input\\\\\\\"\\\\n                  style={{ maxHeight: 200, overflowY: 'auto' }}\\\\n                />\\\\n                <div className=\\\\\\\"px-3 py-1 border-t border-[var(--border-subtle)]\\\\\\\">\\\\n                  {pendingAttachments.length > 0 && (\\\\n                    <div className=\\\\\\\"mb-1 flex flex-wrap gap-1\\\\\\\">\\\\n                      {pendingAttachments.map((path, idx) => {\\\\n                        const meta = filesByPath[path]\\\\n                        const name = meta?.name || (path.split('/').pop() || path)\\\\n                        const type = meta?.type || inferFileType(path)\\\\n                        const size = meta?.size ?? undefined\\\\n                        const mtime = meta?.mtime ?? undefined\\\\n                        return (\\\\n                          <div key={`${idx}-${path}`} className=\\\\\\\"inline-flex items-center gap-1\\\\\\\">\\\\n                            <FileDisplay\\\\n                              file={{ name, path, type, size, mtime }}\\\\n                              density=\\\\\\\"compact\\\\\\\"\\\\n                              interactive\\\\n                              showPreviewOnHover\\\\n                            />\\\\n                            <button\\\\n                              type=\\\\\\\"button\\\\\\\"\\\\n                              className=\\\\\\\"btn-secondary\\\\\\\"\\\\n                              aria-label={`Remove ${name}`}\\\\n                              onClick={() => setPendingAttachments((prev) => prev.filter((p) => p !== path))}\\\\n                            >\\\\n                              ✕\\\\n                            </button>\\\\n                          </div>\\\\n                        )}\\\\n                      )}\\\\n                    </div>\\\\n                  )}\\\\n                  <div className=\\\\\\\"flex items-center justify-between text-[12px] text-[var(--text-muted)]\\\\\\\">\\\\n                    <div className=\\\\\\\"flex items-center gap-2\\\\\\\">\\\\n                      <button\\\\n                        onClick={() => fileInputRef.current?.click()}\\\\n                        className=\\\\\\\"btn-secondary\\\\\\\"\\\\n                        aria-label=\\\\\\\"Attach a document\\\\\\\"\\\\n                        type=\\\\\\\"button\\\\\\\"\\\\n                      >\\\\n                        Attach\\\\n                      </button>\\\\n                      <input\\\\n                        type=\\\\\\\"file\\\\\\\"\\\\n                        accept=\\\\\\\".md,.txt,.json,.js,.jsx,.ts,.tsx,.css,.scss,.less,.html,.htm,.xml,.yml,.yaml,.csv,.log,.sh,.bash,.zsh,.bat,.ps1,.py,.rb,.java,.kt,.go,.rs,.c,.h,.cpp,.hpp,.m,.swift,.ini,.conf,.env\\\\\\\"\\\\n                        ref={fileInputRef}\\\\n                        style={{ display: 'none' }}\\\\n                        onChange={handleFileUpload}\\\\n                      />\\\\n                      <span className=\\\\\\\"hidden sm:inline\\\\\\\">Tip: Use @ for files • Use # for tasks and features</span>\\\\n                    </div>\\\\n                    <span>Cmd/Ctrl+Enter to send • Shift+Enter for newline</span>\\\\n                  </div>\\\\n                </div>\\\\n              </div>\\\\n\\\\n              <button onClick={handleSend} className=\\\\\\\"btn\\\\\\\" disabled={!canSend} aria-label=\\\\\\\"Send message\\\\\\\">\\\\n                Send\\\\n              </button>\\\\n\\\\n              {isAutocompleteOpen && autocompletePosition && (\\\\n                <div\\\\n                  className=\\\\\\\"fixed z-[var(--z-dropdown,1000)] min-w-[260px] max-h-[220px] overflow-auto rounded-md border border-[var(--border-default)] bg-[var(--surface-overlay)] shadow-[var(--shadow-3)] p-1\\\\\\\"\\\\n                  style={{ left: `${autocompletePosition.left}px`, top: `${autocompletePosition.top}px`, transform: 'translateY(-100%)' }}\\\\n                  role=\\\\\\\"listbox\\\\\\\"\\\\n                  aria-label=\\\\\\\"Files suggestions\\\\\\\"\\\\n                >\\\\n                  {matchingDocs.map((path, idx) => {\\\\n                    const meta = filesByPath[path]\\\\n                    const name = meta?.name || (path.split('/').pop() || path)\\\\n                    const type = meta?.type || inferFileType(path)\\\\n                    const size = meta?.size ?? undefined\\\\n                    const mtime = meta?.mtime ?? undefined\\\\n                    return (\\\\n                      <div key={idx} role=\\\\\\\"option\\\\\\\" className=\\\\\\\"px-1 py-0.5\\\\\\\">\\\\n                        <FileDisplay\\\\n                          file={{ name, path, type, size, mtime }}\\\\n                          density=\\\\\\\"compact\\\\\\\"\\\\n                          interactive\\\\n                          showPreviewOnHover\\\\n                          onClick={() => onAutocompleteSelect(path)}\\\\n                        />\\\\n                      </div>\\\\n                    )\\\\n                  })}\\\\n                </div>\\\\n              )}\\\\n\\\\n              {isRefsOpen && refsPosition && (\\\\n                <div\\\\n                  className=\\\\\\\"fixed z-[var(--z-dropdown,1000)] min-w-[260px] max-h-[220px] overflow-auto rounded-md border border-[var(--border-default)] bg-[var(--surface-overlay)] shadow-[var(--shadow-3)]\\\\\\\"\\\\n                  style={{ left: `${refsPosition.left}px`, top: `${refsPosition.top}px`, transform: 'translateY(-100%)' }}\\\\n                  role=\\\\\\\"listbox\\\\\\\"\\\\n                  aria-label=\\\\\\\"References suggestions\\\\\\\"\\\\n                >\\\\n                  {matchingRefs.map((item, idx) => (\\\\n                    <div\\\\n                      key={idx}\\\\n                      className=\\\\\\\"px-3 py-2 cursor-pointer hover:bg-[color-mix(in_srgb,var(--accent-primary)_8%,transparent)] text-[var(--text-primary)]\\\\\\\"\\\\n                      role=\\\\\\\"option\\\\\\\"\\\\n                      onClick={() => onRefsSelect(item.ref)}\\\\n                    >\\\\n                      #{item.display} - {item.title} ({item.type})\\\\n                    </div>\\\\n                  ))}\\\\n                </div>\\\\n              )}\\\\n            </div>\\\\n          </div>\\\\n        </div>\\\\n      </section>\\\\n    </CollapsibleSidebar>\\\\n  )\\\\n}\\\\n\\\",\\\"src/renderer/tasks/TasksListView.tsx\\\":\\\"import React, { useEffect, useMemo, useRef, useState } from 'react'\\\\nimport { Button } from '../components/ui/Button'\\\\nimport { useNavigator } from '../navigation/Navigator'\\\\nimport BoardView from './BoardView'\\\\nimport SegmentedControl from '../components/ui/SegmentedControl'\\\\nimport { useActiveProject } from '../projects/ProjectContext'\\\\nimport DependencyBullet from '../components/tasks/DependencyBullet'\\\\nimport StatusControl, { StatusPicker, statusKey } from '../components/tasks/StatusControl'\\\\nimport { STATUS_LABELS } from '../services/tasksService';\\\\nimport { useTasks } from '../hooks/useTasks'\\\\nimport { useAppSettings } from '../hooks/useAppSettings'\\\\nimport { TaskListViewSorting, TaskViewMode, TaskListStatusFilter } from '../../types/settings'\\\\nimport { useAgents } from '../hooks/useAgents'\\\\nimport { Status, Task } from 'packages/factory-ts/src/types'\\\\nimport ExclamationChip from '../components/tasks/ExclamationChip'\\\\nimport { BoardIcon, IconEdit, IconPlay, IconPlus, ListIcon } from '../components/ui/Icons'\\\\nimport AgentRunBullet from '../components/agents/AgentRunBullet'\\\\nimport RunAgentButton from '../components/tasks/RunAgentButton'\\\\nimport { RichText } from '../components/ui/RichText'\\\\n\\\\nfunction countFeatures(task: Task) {\\\\n  const features = Array.isArray(task.features) ? task.features : []\\\\n  const total = features.length\\\\n  const done = features.filter((f) => f.status === '+').length\\\\n  return { done, total }\\\\n}\\\\n\\\\nfunction matchesQuery(task: Task, q: string) {\\\\n  if (!q) return true\\\\n  const s = q.trim().toLowerCase()\\\\n  if (!s) return true\\\\n  const idStr = String(task.id || '')\\\\n  return idStr.includes(s) || task.title?.toLowerCase().includes(s) || task.description?.toLowerCase().includes(s)\\\\n}\\\\n\\\\nfunction filterTasks(tasks: Task[], { query, status }: { query: string; status: string }) {\\\\n  return tasks.filter((t) => {\\\\n    const byStatus = !status || status === 'all' ? true : (status === 'not-done' ? t.status !== '+' : t.status === (status as Status))\\\\n    return byStatus && matchesQuery(t, query)\\\\n  })\\\\n}\\\\n\\\\nconst STATUS_ORDER = ['-', '~', '+', '=', '?']\\\\n\\\\nexport default function TasksListView() {\\\\n  const [allTasks, setAllTasks] = useState<Task[]>([])\\\\n  const [query, setQuery] = useState('')\\\\n  const [statusFilter, setStatusFilter] = useState<TaskListStatusFilter>('all')\\\\n  const [sortBy, setSortBy] = useState<TaskListViewSorting>('index_desc')\\\\n  const [saving, setSaving] = useState(false)\\\\n  const [view, setView] = useState<TaskViewMode>('list')\\\\n  const [dragTaskId, setDragTaskId] = useState<string | null>(null)\\\\n  const [dragging, setDragging] = useState(false)\\\\n  const [draggingIndex, setDraggingIndex] = useState<number | null>(null)\\\\n  const [dropIndex, setDropIndex] = useState<number | null>(null)\\\\n  const [dropPosition, setDropPosition] = useState<'before' | 'after' | null>(null)\\\\n  const ulRef = useRef<HTMLUListElement>(null)\\\\n  const { openModal, navigateTaskDetails, navigateAgentRun } = useNavigator()\\\\n  const [openFilter, setOpenFilter] = useState(false)\\\\n  const statusFilterRef = useRef<HTMLDivElement>(null)\\\\n\\\\n  const { project, projectId } = useActiveProject()\\\\n  const { isAppSettingsLoaded, appSettings, setUserPreferences } = useAppSettings()\\\\n  const { tasksById, updateTask, reorderTask, getBlockers, getBlockersOutbound } = useTasks()\\\\n  const { activeRuns, startTaskAgent } = useAgents()\\\\n\\\\n  useEffect(() => {\\\\n    setAllTasks(Object.values(tasksById))\\\\n  }, [tasksById])\\\\n\\\\n  useEffect(() => {\\\\n    if (isAppSettingsLoaded){\\\\n      setView(appSettings.userPreferences.tasksViewMode)\\\\n      setSortBy(appSettings.userPreferences.tasksListViewSorting)\\\\n      setStatusFilter(appSettings.userPreferences.tasksListViewStatusFilter)\\\\n    }\\\\n  }, [isAppSettingsLoaded])\\\\n\\\\n  useEffect(() => {\\\\n    if (isAppSettingsLoaded){\\\\n      setUserPreferences({ tasksViewMode: view })\\\\n    }\\\\n  }, [view])\\\\n  \\\\n  useEffect(() => {\\\\n    if (isAppSettingsLoaded){\\\\n      setUserPreferences({ tasksListViewSorting: sortBy })\\\\n    }\\\\n  }, [sortBy])\\\\n\\\\n  useEffect(() => {\\\\n    if (isAppSettingsLoaded){\\\\n      setUserPreferences({ tasksListViewStatusFilter: statusFilter })\\\\n    }\\\\n  }, [statusFilter])\\\\n  \\\\n  useEffect(() => {\\\\n    const onKey = (e: KeyboardEvent) => {\\\\n      if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === 'n') {\\\\n        e.preventDefault()\\\\n        openModal({ type: 'task-create' })\\\\n      }\\\\n      if ((e.ctrlKey || e.metaKey) && e.shiftKey && (e.key.toLowerCase() === 'l' || e.key.toLowerCase() === 'b')) {\\\\n        e.preventDefault()\\\\n        setView((v) => (v === 'list' ? 'board' : 'list'))\\\\n      }\\\\n    }\\\\n    window.addEventListener('keydown', onKey)\\\\n    return () => window.removeEventListener('keydown', onKey)\\\\n  }, [openModal])\\\\n\\\\n  const taskIdToDisplayIndex : Record<string, number> = useMemo(() => { return project?.taskIdToDisplayIndex ?? {} }, [project])\\\\n\\\\n  const sorted = useMemo(() => {\\\\n    let tasks = [...allTasks]\\\\n    if (project) {\\\\n      if (sortBy === 'index_asc') {\\\\n        tasks.sort((a, b) => taskIdToDisplayIndex[a.id] - taskIdToDisplayIndex[b.id])\\\\n      } else if (sortBy === 'index_desc') {\\\\n        tasks.sort((a, b) => taskIdToDisplayIndex[b.id] - taskIdToDisplayIndex[a.id])\\\\n      } else if (sortBy === 'status_asc') {\\\\n        const sVal = (t: Task) => STATUS_ORDER.indexOf(t.status)\\\\n        tasks.sort((a, b) => sVal(a) - sVal(b) || taskIdToDisplayIndex[a.id] - taskIdToDisplayIndex[b.id])\\\\n      } else if (sortBy === 'status_desc') {\\\\n        const sVal = (t: Task) => STATUS_ORDER.indexOf(t.status)\\\\n        tasks.sort((a, b) => sVal(b) - sVal(a) || taskIdToDisplayIndex[b.id] - taskIdToDisplayIndex[a.id])\\\\n      }\\\\n    }\\\\n    return tasks\\\\n  }, [taskIdToDisplayIndex, allTasks, sortBy, project])\\\\n\\\\n  const filtered = useMemo(() => filterTasks(sorted, { query, status: statusFilter }), [sorted, query, statusFilter])\\\\n\\\\n  const isSearchFiltered = query !== ''\\\\n\\\\n  const handleAddTask = () => {\\\\n    openModal({ type: 'task-create' })\\\\n  }\\\\n\\\\n  const handleEditTask = (taskId: string) => { \\\\n    openModal({ type: 'task-edit', taskId })\\\\n  }\\\\n\\\\n  const handleMoveTask = async (fromIndex: number, toIndex: number) => {\\\\n    if (saving) return\\\\n    setSaving(true)\\\\n    try {\\\\n      const res = await reorderTask(fromIndex, toIndex)\\\\n      if (!res || !res.ok) throw new Error(res?.error || 'Unknown error')\\\\n    } catch (e: any) {\\\\n      alert(`Failed to reorder task: ${e.message || e}`)\\\\n    } finally {\\\\n      setSaving(false)\\\\n    }\\\\n  }\\\\n\\\\n  const handleStatusChange = async (taskId: string, status: Status) => {\\\\n    try {\\\\n      await updateTask(taskId, { status })\\\\n    } catch (e) {\\\\n      console.error('Failed to update status', e)\\\\n    }\\\\n  }\\\\n\\\\n  const dndEnabled = (sortBy === 'index_asc' || sortBy === 'index_desc') && !isSearchFiltered &&!saving  && view === 'list'\\\\n\\\\n  const computeDropForRow = (e: React.DragEvent<HTMLElement>, idx: number) => {\\\\n    const rect = (e.currentTarget as HTMLElement).getBoundingClientRect()\\\\n    const offsetY = e.clientY - rect.top\\\\n    let pos: 'before' | 'after' | null = offsetY < rect.height / 2 ? 'before' : 'after'\\\\n    if (draggingIndex != null && (idx == draggingIndex || (idx == draggingIndex-1 && pos == 'after') || (idx == draggingIndex+1 && pos == 'before'))){\\\\n      pos = null\\\\n    }\\\\n    setDropIndex(idx)\\\\n    setDropPosition(pos)\\\\n  }\\\\n\\\\n  const clearDndState = () => {\\\\n    setDragTaskId(null)\\\\n    setDragging(false)\\\\n    setDraggingIndex(null)\\\\n    setDropIndex(null)\\\\n    setDropPosition(null)\\\\n  }\\\\n\\\\n  const onRowKeyDown = (e: React.KeyboardEvent<HTMLDivElement>, taskId: string) => {\\\\n    if (e.key === 'Enter' || e.key === ' ') {\\\\n      e.preventDefault();\\\\n      navigateTaskDetails(taskId)\\\\n      return\\\\n    }\\\\n    if (e.key.toLowerCase() === 's') {\\\\n      e.preventDefault()\\\\n      const current = allTasks.find(t => t.id === taskId)?.status\\\\n      const order: Status[] = ['-', '~', '+', '=', '?']\\\\n      const next = order[(Math.max(0, order.indexOf(current as Status)) + 1) % order.length]\\\\n      handleStatusChange(taskId, next)\\\\n      return\\\\n    }\\\\n    if (e.key !== 'ArrowDown' && e.key !== 'ArrowUp') return\\\\n    e.preventDefault()\\\\n    const ul = ulRef.current\\\\n    if (!ul) return\\\\n    const rows = Array.from(ul.querySelectorAll('.task-row'))\\\\n    const current = e.currentTarget\\\\n    const i = rows.indexOf(current)\\\\n    if (i === -1) return\\\\n    let nextIndex = i + (e.key === 'ArrowDown' ? 1 : -1)\\\\n    if (nextIndex < 0) nextIndex = 0\\\\n    if (nextIndex >= rows.length) nextIndex = rows.length - 1\\\\n    ;(rows[nextIndex] as HTMLElement).focus()\\\\n  }\\\\n\\\\n  const onListDrop = () => {\\\\n    if (project != null && dragTaskId != null && dropIndex != null && dropPosition != null) {\\\\n      const fromIndex = project.taskIdToDisplayIndex[dragTaskId] - 1\\\\n      // Use the item from the currently rendered list (filtered), not from the full sorted list by index\\\\n      const toTask = filtered[dropIndex]\\\\n      if (!toTask) { clearDndState(); return }\\\\n      let toIndex = (project.taskIdToDisplayIndex[toTask.id] ?? 1) - 1\\\\n      if (dropPosition === 'after') {\\\\n        toIndex = toIndex + 1\\\\n      }\\\\n      if (fromIndex !== -1 && toIndex !== fromIndex) {\\\\n        handleMoveTask(fromIndex, toIndex)\\\\n      }\\\\n    }\\\\n    clearDndState()\\\\n  }\\\\n\\\\n  const currentFilterLabel = statusFilter === 'all' ? 'All' : (statusFilter === 'not-done' ? 'Not done' : `${STATUS_LABELS[statusFilter as Status]}`)\\\\n  const k = statusFilter === 'all' ? 'queued' : (statusFilter === 'not-done' ? 'queued' : statusKey(statusFilter as Status))\\\\n\\\\n  return (\\\\n    <section className=\\\\\\\"flex flex-col flex-1 min-h-0 overflow-hidden\\\\\\\" id=\\\\\\\"tasks-view\\\\\\\" role=\\\\\\\"region\\\\\\\" aria-labelledby=\\\\\\\"tasks-view-heading\\\\\\\">\\\\n      <div className=\\\\\\\"tasks-toolbar shrink-0\\\\\\\">\\\\n        <div className=\\\\\\\"left\\\\\\\">\\\\n          <div className=\\\\\\\"control search-wrapper\\\\\\\">\\\\n            <input id=\\\\\\\"tasks-search-input\\\\\\\" type=\\\\\\\"search\\\\\\\" placeholder=\\\\\\\"Search by id, title, or description\\\\\\\" aria-label=\\\\\\\"Search tasks\\\\\\\" value={query} onChange={(e) => setQuery(e.target.value)} />\\\\n          </div>\\\\n          <div className=\\\\\\\"control\\\\\\\">\\\\n            <div\\\\n              ref={statusFilterRef}\\\\n              className=\\\\\\\"status-filter-btn ui-select gap-2\\\\\\\"\\\\n              role=\\\\\\\"button\\\\\\\"\\\\n              aria-haspopup=\\\\\\\"menu\\\\\\\"\\\\n              aria-expanded={openFilter}\\\\n              aria-label=\\\\\\\"Filter by status\\\\\\\"\\\\n              tabIndex={0}\\\\n              onClick={() => setOpenFilter(true)}\\\\n              onKeyDown={(e) => { if (e.key === 'Enter' || e.key === ' ') setOpenFilter(true) }}\\\\n            >\\\\n              <span className={`status-bullet status-bullet--${k}`} aria-hidden />\\\\n              <span className=\\\\\\\"standard-picker__label\\\\\\\">{currentFilterLabel}</span>\\\\n            </div>\\\\n            {openFilter && statusFilterRef.current && (\\\\n              <StatusPicker \\\\n                anchorEl={statusFilterRef.current} \\\\n                value={statusFilter as any}\\\\n                isAllAllowed={true}\\\\n                includeNotDone={true}\\\\n                onSelect={(val) => { setStatusFilter(val as TaskListStatusFilter); setOpenFilter(false); }}\\\\n                onClose={() => setOpenFilter(false)}\\\\n                />\\\\n            )}\\\\n          </div>\\\\n          <div className=\\\\\\\"control\\\\\\\">\\\\n            <select className=\\\\\\\"ui-select\\\\\\\" value={sortBy} onChange={(e) => setSortBy(e.target.value as typeof sortBy)} aria-label=\\\\\\\"Sort by\\\\\\\" disabled={!isAppSettingsLoaded}>\\\\n              <option value=\\\\\\\"index_asc\\\\\\\">Ascending ↓</option>\\\\n              <option value=\\\\\\\"index_desc\\\\\\\">Descending ↑</option>\\\\n              <option value=\\\\\\\"status_asc\\\\\\\">Status ↓</option>\\\\n              <option value=\\\\\\\"status_desc\\\\\\\">Status ↑</option>\\\\n            </select>\\\\n          </div>\\\\n        </div>\\\\n        <div className=\\\\\\\"right\\\\\\\">\\\\n          <SegmentedControl\\\\n            ariaLabel=\\\\\\\"Toggle between list and board views\\\\\\\"\\\\n            options={[\\\\n              { value: 'list', label: 'List', icon: <ListIcon /> },\\\\n              { value: 'board', label: 'Board', icon: <BoardIcon /> },\\\\n            ]}\\\\n            value={view}\\\\n            onChange={(v) => setView(v as 'list' | 'board')}\\\\n            size=\\\\\\\"sm\\\\\\\"\\\\n          />\\\\n        </div>\\\\n      </div>\\\\n      <div className=\\\\\\\"tasks-toolbar shrink-0\\\\\\\">\\\\n        <div className=\\\\\\\"left\\\\\\\">\\\\n          <div id=\\\\\\\"tasks-count\\\\\\\" className=\\\\\\\"tasks-count shrink-0\\\\\\\" aria-live=\\\\\\\"polite\\\\\\\">\\\\n            Showing {filtered.length} of {allTasks.length} tasks{!isAppSettingsLoaded ? ' • Loading settings…' : ''}\\\\n          </div>\\\\n        </div>\\\\n        <div className=\\\\\\\"right\\\\\\\">\\\\n          <button type=\\\\\\\"button\\\\\\\" className=\\\\\\\"btn btn-icon\\\\\\\" aria-label=\\\\\\\"Add Task\\\\\\\" onClick={handleAddTask}>\\\\n            <IconPlus />\\\\n          </button>\\\\n        </div>\\\\n      </div>\\\\n\\\\n      {view === 'board' ? (\\\\n        <div className=\\\\\\\"flex-1 min-h-0 overflow-hidden\\\\\\\">\\\\n          <BoardView tasks={filtered} />\\\\n        </div>\\\\n      ) : (\\\\n        <div id=\\\\\\\"tasks-results\\\\\\\" className=\\\\\\\"flex-1 min-h-0 overflow-y-auto tasks-results\\\\\\\" tabIndex={-1}>\\\\n          {!isAppSettingsLoaded ? (\\\\n            <div className=\\\\\\\"empty\\\\\\\" aria-live=\\\\\\\"polite\\\\\\\">Loading...</div>\\\\n          ) : filtered.length === 0 ? (\\\\n            <div className=\\\\\\\"empty\\\\\\\">No tasks found.</div>\\\\n          ) : (\\\\n            <ul\\\\n              className={`tasks-list ${dragging ? 'dnd-active' : ''}`}\\\\n              role=\\\\\\\"list\\\\\\\"\\\\n              aria-label=\\\\\\\"Tasks\\\\\\\"\\\\n              ref={ulRef}\\\\n              onDragOver={(e) => {\\\\n                if (dndEnabled) {\\\\n                  e.preventDefault();\\\\n                  e.dataTransfer.dropEffect = 'move';\\\\n                }\\\\n              }}\\\\n              onDrop={(e) =>{\\\\n                if (!dndEnabled || !dragging) return\\\\n                e.preventDefault()\\\\n                onListDrop()\\\\n              }}\\\\n              onDragEnd={() => clearDndState()}\\\\n            >\\\\n              {filtered.map((t, idx) => {\\\\n                const { done, total } = countFeatures(t)\\\\n                const isDragSource = dragTaskId === t.id\\\\n                const isDropBefore = dragging && dropIndex === idx && dropPosition === 'before'\\\\n                const isDropAfter = dragging && dropIndex === idx && dropPosition === 'after'\\\\n                const blockers = getBlockers(t.id)\\\\n                const blockersOutbound = getBlockersOutbound(t.id)\\\\n                const hasRejectedFeatures = t.features.filter(f => !!f.rejection).length > 0\\\\n                const taskRun = activeRuns.find(r => r.taskId === t.id)\\\\n\\\\n                return (\\\\n                  <li key={t.id} className=\\\\\\\"task-item\\\\\\\" role=\\\\\\\"listitem\\\\\\\">\\\\n                    {isDropBefore && <div className=\\\\\\\"drop-indicator\\\\\\\" aria-hidden=\\\\\\\"true\\\\\\\"></div>}\\\\n                    <div\\\\n                      className={`task-row ${dndEnabled ? 'draggable' : ''} ${isDragSource ? 'is-dragging' : ''} ${dragging && dropIndex === idx ? 'is-drop-target' : ''}`}\\\\n                      tabIndex={0}\\\\n                      role=\\\\\\\"button\\\\\\\"\\\\n                      data-index={idx}\\\\n                      draggable={dndEnabled}\\\\n                      aria-grabbed={isDragSource}\\\\n                      onDragStart={(e) => {\\\\n                        if (!dndEnabled) return;\\\\n                        setDragTaskId(t.id);\\\\n                        setDragging(true);\\\\n                        setDraggingIndex(idx);\\\\n                        e.dataTransfer.setData('text/plain', String(t.id));\\\\n                        e.dataTransfer.effectAllowed = 'move'\\\\n                      }}\\\\n                      onDragOver={(e) => {\\\\n                        if (!dndEnabled) return; \\\\n                        e.preventDefault();\\\\n                        computeDropForRow(e, idx);\\\\n                      }}\\\\n                      onClick={() => navigateTaskDetails(t.id)}\\\\n                      onKeyDown={(e) => onRowKeyDown(e, t.id)}\\\\n                      aria-label={`Task ${t.id}: ${t.title}. Description: ${t.description}. Status ${STATUS_LABELS[t.status as Status] || t.status}. Features ${done} of ${total} done. ${blockers.length} items this task is blocked by, ${blockersOutbound.length} items this task is blocking. Press Enter to view details.`}\\\\n                    >\\\\n                      <div className=\\\\\\\"task-grid\\\\\\\">\\\\n                        <div className=\\\\\\\"col col-id\\\\\\\" >\\\\n                          <span className=\\\\\\\"id-chip\\\\\\\">{taskIdToDisplayIndex[t.id]}</span>\\\\n                          <StatusControl\\\\n                            status={t.status}\\\\n                            onChange={(next) => handleStatusChange(t.id, next)}\\\\n                          />\\\\n                          <div className=\\\\\\\"flex justify-center gap-1\\\\\\\">\\\\n                            {hasRejectedFeatures && <ExclamationChip title={'One or more features were rejected'} tooltip={\\\\\\\"Has rejection reason\\\\\\\"} />}\\\\n                            <span className=\\\\\\\"chips-sub__label\\\\\\\" title=\\\\\\\"No dependencies\\\\\\\">{done}/{total}</span>\\\\n                          </div>\\\\n                        </div>\\\\n                        <div className=\\\\\\\"col col-title\\\\\\\">\\\\n                          <div className=\\\\\\\"title-line\\\\\\\">\\\\n                            <span className=\\\\\\\"title-text\\\\\\\"><RichText text={t.title || ''} /></span>\\\\n                          </div>\\\\n                        </div>\\\\n                        <div className=\\\\\\\"col col-description\\\\\\\">\\\\n                          <div className=\\\\\\\"desc-line\\\\\\\" title={t.description || ''}><RichText text={t.description || ''} /></div>\\\\n                        </div>\\\\n                        <div className=\\\\\\\"col col-actions\\\\\\\" >\\\\n                          <button type=\\\\\\\"button\\\\\\\" className=\\\\\\\"btn-secondary btn-icon\\\\\\\" aria-label=\\\\\\\"Edit feature\\\\\\\" onClick={(e) => { e.stopPropagation(); handleEditTask(t.id) }}>\\\\n                            <IconEdit />\\\\n                          </button>\\\\n                          {taskRun ? (\\\\n                            <AgentRunBullet key={taskRun.runId} run={taskRun} onClick={(e) => { e.stopPropagation(); navigateAgentRun(taskRun.runId) }} />\\\\n                          ) : (\\\\n                            <RunAgentButton onClick={(agentType) => {if (!projectId) return; startTaskAgent(agentType, projectId, t.id) }}/>\\\\n                          )}\\\\n                        </div>\\\\n                        <div className=\\\\\\\"col col-blockers\\\\\\\" aria-label={`Blockers for Task ${t.id}`}>\\\\n                          <div className=\\\\\\\"chips-list\\\\\\\">\\\\n                            <span className=\\\\\\\"chips-sub__label\\\\\\\">References</span>\\\\n                            {blockers.length === 0 ? (\\\\n                              <span className=\\\\\\\"chips-sub__label\\\\\\\" title=\\\\\\\"No dependencies\\\\\\\">None</span>\\\\n                            ) : (\\\\n                              blockers.map((d) => (\\\\n                                <DependencyBullet key={d.id} dependency={d.id} />\\\\n                              ))\\\\n                            )}\\\\n                          </div>\\\\n                          <div className=\\\\\\\"chips-list\\\\\\\">\\\\n                            <span className=\\\\\\\"chips-sub__label\\\\\\\">Blocks</span>\\\\n                            {blockersOutbound.length === 0 ? (\\\\n                              <span className=\\\\\\\"chips-sub__label\\\\\\\" title=\\\\\\\"No dependents\\\\\\\">None</span>\\\\n                            ) : (\\\\n                              blockersOutbound.map((d) => (\\\\n                                <DependencyBullet key={d.id} dependency={d.id} isOutbound />\\\\n                              ))\\\\n                            )}\\\\n                          </div>\\\\n                        </div>\\\\n                      </div>\\\\n                    </div>\\\\n                    {isDropAfter && <div className=\\\\\\\"drop-indicator\\\\\\\" aria-hidden=\\\\\\\"true\\\\\\\"></div>}\\\\n                  </li>\\\\n                )\\\\n              })}\\\\n            </ul>\\\\n          )}\\\\n        </div>\\\\n      )}\\\\n\\\\n      {saving && <div className=\\\\\\\"saving-indicator\\\\\\\" aria-live=\\\\\\\"polite\\\\\\\" style={{ position: 'fixed', bottom: 12, right: 16 }}>Reordering…</div>}\\\\n    </section>\\\\n  )\\\\n}\\\\n\\\",\\\"src/renderer/components/ui/Skeleton.tsx\\\":\\\"import React from 'react';\\\\n\\\\nexport default function Skeleton({ className = '', style }: { className?: string; style?: React.CSSProperties }) {\\\\n  return <div className={`ui-skeleton ${className}`} style={style} aria-hidden />;\\\\n}\\\\n\\\\nexport function SkeletonText({ lines = 3, lineClassName = '' }: { lines?: number; lineClassName?: string }) {\\\\n  return (\\\\n    <div className=\\\\\\\"flex flex-col gap-2\\\\\\\">\\\\n      {Array.from({ length: lines }).map((_, i) => (\\\\n        <Skeleton key={i} className={`h-3 rounded ${lineClassName}`} />\\\\n      ))}\\\\n    </div>\\\\n  );\\\\n}\\\\n\\\",\\\"src/renderer/components/ui/Spinner.tsx\\\":\\\"import React from 'react';\\\\n\\\\nexport type SpinnerProps = { size?: number; className?: string; label?: string };\\\\n\\\\nexport default function Spinner({ size = 16, className = '', label }: SpinnerProps) {\\\\n  const s = size;\\\\n  return (\\\\n    <span className={`inline-flex items-center gap-2 ${className}`} role=\\\\\\\"status\\\\\\\" aria-live=\\\\\\\"polite\\\\\\\">\\\\n      <svg className=\\\\\\\"ui-spinner\\\\\\\" width={s} height={s} viewBox=\\\\\\\"0 0 50 50\\\\\\\" aria-hidden>\\\\n        <circle className=\\\\\\\"ui-spinner__track\\\\\\\" cx=\\\\\\\"25\\\\\\\" cy=\\\\\\\"25\\\\\\\" r=\\\\\\\"20\\\\\\\" fill=\\\\\\\"none\\\\\\\" strokeWidth=\\\\\\\"5\\\\\\\" />\\\\n        <circle className=\\\\\\\"ui-spinner__indicator\\\\\\\" cx=\\\\\\\"25\\\\\\\" cy=\\\\\\\"25\\\\\\\" r=\\\\\\\"20\\\\\\\" fill=\\\\\\\"none\\\\\\\" strokeWidth=\\\\\\\"5\\\\\\\" />\\\\n      </svg>\\\\n      {label ? <span className=\\\\\\\"text-sm text-[color:var(--text-muted)]\\\\\\\">{label}</span> : null}\\\\n    </span>\\\\n  );\\\\n}\\\\n\\\"}\"}]",
    "source": "tools"
  },
  {
    "role": "assistant",
    "content": "{\n  \"thoughts\": \"The task is vague (“UI Improvements”), so I inspected the renderer UI code and identified concrete, atomic enhancements that improve accessibility, consistency, and UX without requiring structural changes. The features are scoped to specific files, follow existing patterns, and include clear acceptance criteria. I will now create these features and then finish the spec.\",\n  \"tool_calls\": [\n    {\n      \"tool_name\": \"create_feature\",\n      \"arguments\": {\n        \"title\": \"Centralize UI Improvements Task ID and fix CommandMenu mismatch\",\n        \"description\": \"Create a single source of truth for the UI Improvements task ID and update references.\\n\\nImplementation details:\\n- Add src/renderer/constants/tasks.ts exporting UI_IMPROVEMENTS_TASK_ID = 'f67e8921-b197-40c9-9154-e95db8f27deb'.\\n- Update src/renderer/App.tsx and src/renderer/components/ui/CommandMenu.tsx to import and use this constant, removing hardcoded UUIDs (CommandMenu currently uses a mismatched 'f9eef18e-…').\\n\\nAcceptance criteria:\\n- Pressing Cmd/Ctrl+Shift+F opens the feature-create modal with taskId = 'f67e8921-b197-40c9-9154-e95db8f27deb'.\\n- No remaining hardcoded task IDs for UI Improvements in the codebase outside the new constant file.\"\n      }\n    },\n    {\n      \"tool_name\": \"create_feature\",\n      \"arguments\": {\n        \"title\": \"Tooltip accessibility and robustness improvements\",\n        \"description\": \"Make Tooltip component ARIA-correct and safe for multiple instances.\\n\\nImplementation details (src/renderer/components/ui/Tooltip.tsx):\\n- Generate a unique id per tooltip instance (e.g., useId) and assign it to the tooltip element; set anchor 'aria-describedby' to that id when open.\\n- Remove hardcoded 'aria-describedby'='tooltip'.\\n- Add Escape key handling to hide when focused on the anchor.\\n- Ensure role=tooltip and correct z-index are preserved.\\n\\nAcceptance criteria:\\n- Two adjacent buttons using Tooltip both show their own content and 'aria-describedby' points to their unique tooltip id when open.\\n- Pressing Escape while the anchor has focus hides the tooltip.\\n- No duplicate id usage across multiple tooltip instances.\"\n      }\n    },\n    {\n      \"tool_name\": \"create_feature\",\n      \"arguments\": {\n        \"title\": \"Modal accessibility: aria-labelledby/aria-describedby and scroll lock\",\n        \"description\": \"Improve Modal semantics and body scroll behavior.\\n\\nImplementation details (src/renderer/components/ui/Modal.tsx):\\n- Give the title element a unique id and wire 'aria-labelledby' on the dialog to that id when title exists.\\n- Allow optional description id wiring via 'aria-describedby' (useful from AlertDialog when description is provided).\\n- Lock body scrolling while a modal is open (set document.body.style.overflow='hidden') and restore on close/unmount.\\n\\nAcceptance criteria:\\n- Screen readers announce the modal title and description upon opening.\\n- While a modal is open, the page behind it cannot scroll; once closed, body scrolling returns to its previous state.\\n- Existing focus trapping and Escape behavior remain intact.\"\n      }\n    },\n    {\n      \"tool_name\": \"create_feature\",\n      \"arguments\": {\n        \"title\": \"Add 'System' theme option with OS auto-detection\",\n        \"description\": \"Extend theming to support a 'system' mode that follows the OS preference.\\n\\nImplementation details:\\n- Update src/renderer/hooks/useTheme.ts to support Theme = 'light' | 'dark' | 'system'.\\n- When 'system' is selected, resolve the effective theme from window.matchMedia('(prefers-color-scheme: dark)') and subscribe to changes to update live.\\n- Persist 'system' in localStorage and ensure initTheme applies the resolved theme before first paint (no theme flash).\\n- Update Settings UI (src/renderer/screens/SettingsView.tsx) to offer Light/Dark/System choices and save selection to app settings.\\n\\nAcceptance criteria:\\n- Selecting 'System' switches the app automatically to the OS theme and updates live when the OS theme changes.\\n- Selection persists across restarts.\\n- Existing light/dark behavior remains unchanged when explicitly chosen.\"\n      }\n    },\n    {\n      \"tool_name\": \"create_feature\",\n      \"arguments\": {\n        \"title\": \"Dynamic modifier glyphs in shortcuts UI and command menu\",\n        \"description\": \"Render keyboard shortcuts using the user-selected modifier (Cmd vs Ctrl) consistently.\\n\\nImplementation details:\\n- Enhance src/renderer/hooks/useShortcuts.tsx to expose a read-only getter for the current modifier (e.g., export function getShortcutsModifier(): 'meta' | 'ctrl').\\n- Update src/renderer/components/ui/ShortcutsHelp.tsx and src/renderer/components/ui/CommandMenu.tsx to format displayed shortcuts based on the current modifier, replacing hardcoded 'Cmd/Ctrl' strings (e.g., show '⌘K' on mac modifier and 'Ctrl+K' otherwise).\\n\\nAcceptance criteria:\\n- Changing the shortcuts modifier in app settings (after reload, consistent with current provider behavior) updates the displayed shortcut glyphs in ShortcutsHelp and CommandMenu.\\n- All visible shortcut hints reflect the correct modifier (no \\\"Cmd/Ctrl\\\" placeholders).\"\n      }\n    },\n    {\n      \"tool_name\": \"create_feature\",\n      \"arguments\": {\n        \"title\": \"CollapsibleSidebar semantics: use buttons for actionable items\",\n        \"description\": \"Improve navigation item semantics for better accessibility.\\n\\nImplementation details (src/renderer/components/ui/CollapsibleSidebar.tsx):\\n- Replace the inner div with role=\\\"button\\\" for each clickable nav item with an actual <button> element, preserving current classes and event handlers.\\n- Keep roving tabindex behavior and keyboard activation (Enter/Space) intact, but rely on native button semantics.\\n- Ensure aria-current or aria-selected is still used appropriately.\\n\\nAcceptance criteria:\\n- Keyboard navigation (ArrowUp/ArrowDown/Home/End + Enter/Space activation) works as before.\\n- Screen readers announce items as buttons within navigation; no loss of functionality.\\n- No regression in compact/collapsed behavior and badges/actions rendering.\"\n      }\n    },\n    {\n      \"tool_name\": \"create_feature\",\n      \"arguments\": {\n        \"title\": \"ChatView: drag-and-drop file attachments\",\n        \"description\": \"Allow dropping files into the composer area to attach them, mirroring the file input behavior.\\n\\nImplementation details (src/renderer/screens/ChatView.tsx):\\n- Add drag-over highlighting and onDrop handler on the composer container (the area containing the textarea and attachments tray).\\n- Accept the same file extensions as the input's accept list; read dropped files as text and call uploadFile(name, content), then add to pendingAttachments.\\n- Provide a clear visual drop target state (e.g., subtle border highlight) while dragging files over the composer.\\n\\nAcceptance criteria:\\n- Dropping a .md or .txt (and other accepted) file into the composer uploads it and shows it in pending attachments, identical to selecting via the file picker.\\n- Non-accepted files are ignored safely.\\n- Users receive a visible \\\"drop allowed\\\" highlight when dragging a file over the composer.\"\n      }\n    },\n    {\n      \"tool_name\": \"create_feature\",\n      \"arguments\": {\n        \"title\": \"TasksListView: skeletons for initial loading state\",\n        \"description\": \"Replace text-only loading state with skeleton placeholders for a smoother UX.\\n\\nImplementation details (src/renderer/tasks/TasksListView.tsx):\\n- When isAppSettingsLoaded is false, render a list of ~6 skeleton rows using src/renderer/components/ui/Skeleton.tsx to approximate task rows' layout (id/status area, title/desc lines, and actions area blocks).\\n- Keep current \\\"Loading settings…\\\" live region messaging accessible (aria-live politely) in the count area.\\n\\nAcceptance criteria:\\n- Before settings are loaded, task area shows skeleton placeholders instead of a static 'Loading...' string.\\n- Once loaded, skeletons disappear and the real content renders.\\n- No layout shift beyond expected content replacement.\"\n      }\n    },\n    {\n      \"tool_name\": \"create_feature\",\n      \"arguments\": {\n        \"title\": \"Respect reduced motion in overlays and transitions\",\n        \"description\": \"Honor user preference for reduced motion in Modal and Tooltip animations.\\n\\nImplementation details:\\n- Update CSS (src/index.css or the relevant stylesheet) to wrap animation/transition utilities used by Modal and Tooltip (e.g., fade-in, zoom-in) with @media (prefers-reduced-motion: reduce) to minimize/disable animations.\\n- If needed, add a data attribute to components to gate animations, but prefer CSS media query only.\\n\\nAcceptance criteria:\\n- With prefers-reduced-motion enabled at OS level, opening modals and tooltips shows minimal/no animation.\\n- Default animated behavior is unchanged for users without reduced motion preference.\"\n      }\n    },\n    {\n      \"tool_name\": \"create_feature\",\n      \"arguments\": {\n        \"title\": \"Consistent focus-visible styling on interactive elements\",\n        \"description\": \"Ensure keyboard users see a consistent focus outline across buttons, nav items, and inputs.\\n\\nImplementation details:\\n- Update CSS (src/index.css) to provide a consistent :focus-visible ring/outline for .btn, .btn-secondary, .btn-icon, .nav-item, .nav-toggle, .nav-trigger, .ui-select trigger, inputs, and other clickable UI controls.\\n- Do not override focus when using mouse; rely on :focus-visible.\\n\\nAcceptance criteria:\\n- Tabbing through the UI shows clear, consistent focus outlines on all interactive controls mentioned.\\n- Mouse users do not see focus outlines unless they keyboard-focus an element (focus-visible behavior).\"\n      }\n    },\n    {\n      \"tool_name\": \"finish_spec\",\n      \"arguments\": {}\n    }\n  ]\n}"
  }
]