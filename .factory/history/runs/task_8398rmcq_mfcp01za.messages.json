{
  "9fb948d2-235d-4322-9462-93a9ca8ce283": {
    "featureId": "9fb948d2-235d-4322-9462-93a9ca8ce283",
    "startDate": "2025-09-09T15:15:35.647Z",
    "messages": [
      {
        "role": "user",
        "content": "# Developer Agent Steps Execution\n\nYou are the Developer Agent. You will be assigned a single feature to implement. Your goal is to complete it by following these steps precisely.\n\n## Workflow\n\n1.  **Analyze the Feature**: Read the feature's title, description and rejection (if provided) to understand its goal.\n2.  **Consult the File Structure**: Use the provided `docs/FILE_ORGANISATION.md` to understand the project context.\n3.  **Implement**: Write or modify files to meet the feature's acceptance criteria. Use the `write_file`, `rename_file`, `delete_file`, `list_files` and `search_files` tools for all file operations.\n4.  **Complete the Feature**: When the feature is complete, you **MUST** call the `finish_feature` tool. This is your final step for a successful implementation.\n5.  **Handle Blockers**: If you cannot proceed, you **MUST** use `block_feature` to explain the reason for being stuck - this signals that you are blocked and ready for a new assignment.\n\n## Notes\n\nFor context on the overall project structure, including how tasks and features are organized, refer to `docs/FILE_ORGANISATION.md`. You should always update this file with new major directory changes.\n#CURRENT TASK (ID: f67e8921-b197-40c9-9154-e95db8f27deb)\n##TITLE:\nUI Improvements\n##DESCRIPTION:\nVarious UI improvements to the app\n\n\n#ASSIGNED FEATURE: thefactory-tools has new webSearch functionality - allow to configure it (ID: 9fb948d2-235d-4322-9462-93a9ca8ce283)\n##DESCRIPTION: Just like the @src/renderer/utils/LLMConfigManager.ts and @src/settings/SettingsLLMConfigModal.tsx  we need to have configs for WebSearch that can be used via 'thefactory-tools'. \nThe places where these new apiKeys can be provided is inside @src/chat/ChatsManager.js when calling 'buildChatTools' inside 'getCompletion'; and in @src/tools/factory/mainOrchestrator.js when calling 'orchestrator.startRun' .\nThis must be a new options section in @src/renderer/screens/SettingsView.tsx .\n\n\n\n\n\n\n#TOOL SIGNATURES:\n- read_files(paths: list[str]) -> list[str] - Read the content of one or more files at the given relative paths. Returns an array of strings (one per file).\n- search_files(query: str, path: str = '.') -> list[str] - Search for files by name or textual content under the given path. Returns matching relative paths. The query input must be a space separated list of keywords\n- block_feature(reason: str) - Stop work on the current feature and report why you are blocked (e.g., missing context, unclear requirements).\n- finish_feature() - Mark the current feature as complete and end the run. Use only when the work fully meets the acceptance criteria.\n- list_files(path: str) - List files and directories at a relative path from the project root.\n- write_file(filename: str, content: str) - Create or overwrite a file with the given content. Always use this to write code or docs.\n- rename_file(filename: str, new_filename: str) - Rename or move a file from one path to another.\n- delete_file(filename: str) - Delete a file. Use with caution and only when necessary.\n- run_test() -> str - Run the test for the current feature and return the output. Use to verify implementation.\n\n#RESPONSE FORMAT INSTRUCTIONS:\nYou **MUST** respond in a single, valid JSON object. This object must adhere to the following structure:\n```json\n[object Object]\n```\nThe thoughts field is for your reasoning, and tool_calls is a list of actions to execute.\nYour response will be parsed as JSON. Do not include any text outside of this JSON object.\nAs responses to the tool calls you will send, you will also receive JSON objects in the form:\n```json\n{\n\"name\":\"tool_name\",\n\"result\":\"...\"\n}\n```\n\n#CONTEXT FILES PROVIDED:\n{\"docs/FILE_ORGANISATION.md\":\"# File Organisation\\n\\nPurpose\\n- Provide a high-level map of the repository so contributors and agents can quickly find the right area.\\n- This is not a change log and not a per-file inventory.\\n\\nEditing Rules (read before updating)\\n- Only document major directories and subsystems. Do not list individual files.\\n- Keep bullets short (one sentence) and avoid \\\"New:\\\" or historical notes.\\n- When adding/removing a major directory or moving a subsystem, update a single bullet here.\\n- Prefer linking or pointing to deeper docs (README/OVERVIEW) rather than describing internals here.\\n- Never document build related artifacts.\\n\\nTop-Level Layout\\n- docs/: Project-wide documentation and specs; single source of truth for protocols and workflows.\\n- src/: Application source (Electron app: main, preload, renderer, and tooling).\\n  - live-data/: Main process live data service and types for live data services.\\n    - providers/: Pluggable provider implementations (e.g., agent-prices bridge, generic fetch-json).\\n    - registry.js: Provider registry to map service ids to providers.\\n    - store.js: Persistence for service configs and cached snapshots by service id.\\n    - types.js: Shared types and helpers (freshness policy, normalization, freshness computation).\\n  - renderer/: React UI (components, screens, hooks, services, navigation, preview runtime).\\n    - components/agents/: Agent-specific UI (status chips, run bullets, model selectors, project/cost/token chips).\\n    - services/: Renderer-side services (e.g., pricingService for LLM price lookup via IPC).\\n    - hooks/useShortcuts: Keyboard shortcuts provider; respects user-selected modifier and avoids interfering with text input.\\n  - tools/: Developer and agent tooling (preview analyzer, factory integration, helpers).\\n  - main.js: Electron main process entry.\\n  - preload.js: Safe IPC surface exposed to the renderer (exposes live data API).\\n- packages/: Local monorepo packages.\\n  - factory-ts/: Agent orchestration library (orchestrator, pricing, history, completion, git integration).\\n- scripts/: Project automation scripts and CLIs.\\n- Root config files: package.json, tsconfig.json, tailwind/postcss configs, vite configs, forge config, .env.\\n\\nWhere to Learn More\\n- Agents and roles: packages/factory-ts/docs (AGENT_*.md).\\n- Factory TS overview and APIs: packages/factory-ts (see README/OVERVIEW files in that package).\\n- Preview system: see src/renderer/preview and related docs in docs/ (preview usage and analyzer).\\n- IPC and factory integration: src/tools/factory (renderer bridge and main process handlers).\\n\\nConventions (brief)\\n- Keep cross-cutting documentation in docs/; place domain-specific or area-specific READMEs next to the code they describe.\\n- Use descriptive directory names and keep responsibilities separated by area (renderer vs main vs tools vs packages).\\n\\nEnvironment & Credentials\\n- .env at the repo root is used for local development (e.g., credentials consumed by tooling and factory-ts).\\n\\nNotes\\n- If you are unsure whether something belongs here, it probably belongs in a local README under its directory, with this file providing only a one-line pointer to that area.\\n\",\"src/renderer/utils/LLMConfigManager.ts\":\"import { LLMConfig } from 'thefactory-tools';\\nimport { v4 as uuidv4 } from 'uuid';\\n\\nexport const LLM_CONFIGS_CHANGED_EVENT = 'llm-configs-changed';\\n\\nexport class LLMConfigManager {\\n  private storageKey = 'llmConfigs';\\n  private activeKey = 'activeLlmConfigId';\\n  private recentKey = 'recentLlmConfigIds';\\n\\n  private notify() {\\n    try {\\n      window.dispatchEvent(new CustomEvent(LLM_CONFIGS_CHANGED_EVENT));\\n    } catch {}\\n  }\\n\\n  getConfigs(): LLMConfig[] {\\n    const stored = localStorage.getItem(this.storageKey);\\n    return stored ? JSON.parse(stored) : [];\\n  }\\n\\n  saveConfigs(configs: LLMConfig[]): void {\\n    localStorage.setItem(this.storageKey, JSON.stringify(configs));\\n    // Clean recents to only include existing IDs\\n    try {\\n      const ids = this.getRecentIds();\\n      const set = new Set(configs.map(c => c.id));\\n      const cleaned = ids.filter(id => set.has(id));\\n      localStorage.setItem(this.recentKey, JSON.stringify(cleaned));\\n    } catch {}\\n    this.notify();\\n  }\\n\\n  getActiveId(): string | null {\\n    return localStorage.getItem(this.activeKey);\\n  }\\n\\n  setActiveId(id: string): void {\\n    localStorage.setItem(this.activeKey, id);\\n    // bump recents order\\n    this.bumpRecent(id);\\n    this.notify();\\n  }\\n\\n  getActiveConfig(): LLMConfig | null {\\n    const configs = this.getConfigs();\\n    const activeId = this.getActiveId();\\n    return configs.find(c => c.id === activeId) || null;\\n  }\\n\\n  addConfig(config: LLMConfig): LLMConfig {\\n    const newConfig: LLMConfig = { ...config, id: uuidv4() } as LLMConfig;\\n    const configs = this.getConfigs();\\n    configs.push(newConfig);\\n    this.saveConfigs(configs);\\n    if (configs.length === 1) {\\n      this.setActiveId(newConfig.id);\\n    } else {\\n      this.notify();\\n    }\\n    return newConfig;\\n  }\\n\\n  updateConfig(id: string, updates: Partial<LLMConfig>): void {\\n    const configs = this.getConfigs();\\n    const index = configs.findIndex(c => c.id === id);\\n    if (index !== -1) {\\n      configs[index] = { ...configs[index], ...updates };\\n      this.saveConfigs(configs);\\n    } else {\\n      this.notify();\\n    }\\n  }\\n\\n  removeConfig(id: string): void {\\n    let configs = this.getConfigs();\\n    configs = configs.filter(c => c.id !== id);\\n    this.saveConfigs(configs);\\n    // remove from recents if present\\n    try {\\n      const ids = this.getRecentIds().filter(x => x !== id);\\n      localStorage.setItem(this.recentKey, JSON.stringify(ids));\\n    } catch {}\\n    if (this.getActiveId() === id) {\\n      this.setActiveId(configs[0]?.id || '');\\n    } else {\\n      this.notify();\\n    }\\n  }\\n\\n  isConfigured(): boolean {\\n    return !!this.getActiveConfig()?.apiKey;\\n  }\\n\\n  getRecentIds(): string[] {\\n    try {\\n      const raw = localStorage.getItem(this.recentKey);\\n      const arr = raw ? JSON.parse(raw) : [];\\n      if (!Array.isArray(arr)) return [];\\n      return arr.filter((x) => typeof x === 'string');\\n    } catch {\\n      return [];\\n    }\\n  }\\n\\n  private saveRecentIds(ids: string[]) {\\n    try {\\n      localStorage.setItem(this.recentKey, JSON.stringify(ids));\\n    } catch {}\\n  }\\n\\n  bumpRecent(id: string) {\\n    try {\\n      const ids = this.getRecentIds();\\n      const next = [id, ...ids.filter(x => x !== id)];\\n      // keep a reasonable history\\n      this.saveRecentIds(next.slice(0, 10));\\n    } catch {}\\n  }\\n}\\n\",\"src/settings/SettingsLLMConfigModal.tsx\":\"import React, { useEffect, useMemo, useState } from 'react';\\nimport { Modal } from '../renderer/components/ui/Modal';\\nimport { Input } from '../renderer/components/ui/Input';\\nimport { Button } from '../renderer/components/ui/Button';\\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../renderer/components/ui/Select';\\nimport { useLLMConfig } from '../renderer/hooks/useLLMConfig';\\nimport { chatsService, LLMConfig, LLMProviderType } from '../renderer/services/chatsService';\\nimport { useToast } from '../renderer/components/ui/Toast';\\n\\nconst PROVIDER_DEFAULT_URL: Record<LLMProviderType, string> = {\\n  openai: 'https://api.openai.com/v1',\\n  anthropic: 'https://api.anthropic.com',\\n  gemini: 'https://generativelanguage.googleapis.com/v1beta',\\n  xai: 'https://api.x.ai/v1',\\n  local: 'http://localhost:1234/v1',\\n  custom: '',\\n};\\n\\nconst PROVIDER_MODELS: Record<Exclude<LLMProviderType, 'local' | 'custom'>, string[]> = {\\n  openai: [\\n    'gpt-5',\\n    'gpt-4o',\\n    'gpt-4o-mini',\\n  ],\\n  anthropic: [\\n    'claude-sonnet-4-20250514',\\n    'claude-4.1-opus',\\n    'claude-opus-4',\\n  ],\\n  gemini: [\\n    'gemini-2.5-pro',\\n    'gemini-2.5-flash',\\n  ],\\n  xai: [\\n    'grok-4'\\n  ],\\n};\\n\\nexport default function SettingsLLMConfigModal({ mode, id, onRequestClose }: { mode: 'add' | 'edit', id?: string, onRequestClose: () => void }) {\\n  const { configs, addConfig, updateConfig } = useLLMConfig();\\n  const { toast } = useToast();\\n  const isEdit = mode === 'edit';\\n  const existing = isEdit ? configs.find(c => c.id === id) || null : null;\\n\\n  const [modelsLoading, setModelsLoading] = useState(false);\\n  const [modelsError, setModelsError] = useState<string | null>(null);\\n  const [modelMode, setModelMode] = useState<'preset' | 'custom'>('preset');\\n  const [availableModels, setAvailableModels] = useState<string[]>([]);\\n\\n  const [form, setForm] = useState<LLMConfig>(() => existing || {\\n    id: '',\\n    name: '',\\n    provider: 'openai',\\n    apiBaseUrl: PROVIDER_DEFAULT_URL.openai,\\n    apiKey: '',\\n    model: '',\\n  });\\n\\n  useEffect(() => {\\n    if (existing) {\\n      setForm(existing);\\n      const presets = existing.provider === 'local' || existing.provider === 'custom' ? [] : (PROVIDER_MODELS[existing.provider as keyof typeof PROVIDER_MODELS] || []);\\n      setAvailableModels(presets);\\n      setModelMode(presets.includes(existing.model) ? 'preset' : 'custom');\\n    }\\n  }, [existing]);\\n\\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    const { name, value } = e.target;\\n    setForm(prev => ({ ...prev, [name]: value }));\\n  };\\n\\n  const onProviderChange = (value: LLMProviderType) => {\\n    setForm(prev => ({\\n      ...prev,\\n      provider: value,\\n      apiBaseUrl: PROVIDER_DEFAULT_URL[value] ?? prev.apiBaseUrl,\\n      // reset model when provider changes\\n      model: '',\\n    }));\\n    setModelsError(null);\\n    if (value === 'local') {\\n      setAvailableModels([]);\\n      setModelMode('custom');\\n    } else if (value === 'custom') {\\n      setAvailableModels([]);\\n      setModelMode('custom');\\n    } else {\\n      const presets = PROVIDER_MODELS[value as keyof typeof PROVIDER_MODELS] || [];\\n      setAvailableModels(presets);\\n      setModelMode('preset');\\n    }\\n  };\\n\\n  const handleModelSelect = (value: string) => {\\n    if (value === 'custom') {\\n      setModelMode('custom');\\n      setForm(prev => ({ ...prev, model: '' }));\\n    } else {\\n      setModelMode('preset');\\n      setForm(prev => ({ ...prev, model: value }));\\n    }\\n  };\\n\\n  const loadLocalModels = async () => {\\n    setModelsLoading(true);\\n    setModelsError(null);\\n    try {\\n      const models = await chatsService.listModels(form);\\n      setAvailableModels(models);\\n      if (!models.includes(form.model)) {\\n        setForm(prev => ({ ...prev, model: '' }));\\n      }\\n    } catch (e) {\\n      setModelsError('Failed to load models from local provider. Is it running?');\\n      toast({ title: 'Failed to load models', description: String(e), variant: 'error' });\\n    } finally {\\n      setModelsLoading(false);\\n    }\\n  };\\n\\n  const onSubmit = (e: React.FormEvent) => {\\n    e.preventDefault();\\n    if (!form.name || !form.provider || !form.apiBaseUrl || !form.model) {\\n      toast({ title: 'Missing fields', description: 'Please provide name, provider, API URL, and model.', variant: 'error' });\\n      return;\\n    }\\n    if (isEdit) {\\n      updateConfig(form.id, { ...form });\\n    } else {\\n      const { id: _omit, ...toAdd } = form;\\n      addConfig(toAdd);\\n    }\\n    onRequestClose();\\n  };\\n\\n  const providerModels = useMemo(() => {\\n    if (form.provider === 'local' || form.provider === 'custom') return availableModels;\\n    return availableModels;\\n  }, [form.provider, availableModels]);\\n\\n  return (\\n    <Modal isOpen={true} onClose={onRequestClose} title={isEdit ? 'Edit LLM Configuration' : 'Add LLM Configuration'}>\\n      <form className=\\\"space-y-3\\\" onSubmit={onSubmit}>\\n        <div>\\n          <label htmlFor=\\\"name\\\" className=\\\"block text-sm font-medium mb-1\\\">Name</label>\\n          <Input id=\\\"name\\\" name=\\\"name\\\" placeholder=\\\"My Provider\\\" value={form.name} onChange={onChange} />\\n        </div>\\n\\n        <div>\\n          <label htmlFor=\\\"provider\\\" className=\\\"block text-sm font-medium mb-1\\\">Provider</label>\\n          <Select value={form.provider} onValueChange={(v) => onProviderChange(v as LLMProviderType)}>\\n            <SelectTrigger id=\\\"provider\\\">\\n              <SelectValue placeholder=\\\"Select provider\\\" />\\n            </SelectTrigger>\\n            <SelectContent>\\n              <SelectItem value=\\\"openai\\\">OpenAI</SelectItem>\\n              <SelectItem value=\\\"anthropic\\\">Anthropic</SelectItem>\\n              <SelectItem value=\\\"gemini\\\">Gemini</SelectItem>\\n              <SelectItem value=\\\"xai\\\">xAI (Grok)</SelectItem>\\n              <SelectItem value=\\\"local\\\">Local (OpenAI-compatible)</SelectItem>\\n              <SelectItem value=\\\"custom\\\">Custom</SelectItem>\\n            </SelectContent>\\n          </Select>\\n        </div>\\n\\n        <div>\\n          <label htmlFor=\\\"apiBaseUrl\\\" className=\\\"block text-sm font-medium mb-1\\\">API Base URL</label>\\n          <Input id=\\\"apiBaseUrl\\\" name=\\\"apiBaseUrl\\\" placeholder=\\\"https://...\\\" value={form.apiBaseUrl} onChange={onChange} />\\n        </div>\\n\\n        <div>\\n          <label htmlFor=\\\"apiKey\\\" className=\\\"block textsm font-medium mb-1\\\">API Key</label>\\n          <Input id=\\\"apiKey\\\" name=\\\"apiKey\\\" placeholder=\\\"sk-...\\\" value={form.apiKey} onChange={onChange} />\\n          <p className=\\\"text-[12px] text-[var(--text-secondary)] mt-1\\\">Some local providers may not require an API key.</p>\\n        </div>\\n\\n        <div>\\n          <div className=\\\"flex items-center justify-between\\\">\\n            <label htmlFor=\\\"model\\\" className=\\\"block text-sm font-medium mb-1\\\">Model</label>\\n            {form.provider === 'local' && (\\n              <Button type=\\\"button\\\" onClick={loadLocalModels} disabled={modelsLoading} variant=\\\"outline\\\">\\n                {modelsLoading ? 'Loading…' : 'Load Available Models'}\\n              </Button>\\n            )}\\n          </div>\\n\\n          {providerModels.length > 0 && (\\n            <Select value={modelMode === 'preset' ? form.model : 'custom'} onValueChange={handleModelSelect}>\\n              <SelectTrigger id=\\\"model\\\">\\n                <SelectValue placeholder=\\\"Select model\\\" />\\n              </SelectTrigger>\\n              <SelectContent>\\n                {providerModels.map(m => (\\n                  <SelectItem key={m} value={m}>{m}</SelectItem>\\n                ))}\\n                <SelectItem value=\\\"custom\\\">Custom</SelectItem>\\n              </SelectContent>\\n            </Select>\\n          )}\\n\\n          {(modelMode === 'custom' || providerModels.length === 0) && (\\n            <Input className=\\\"mt-2\\\" name=\\\"model\\\" placeholder=\\\"model-id\\\" value={form.model} onChange={onChange} />\\n          )}\\n\\n          {modelsError && <p className=\\\"text-red-500 text-sm mt-1\\\">{modelsError}</p>}\\n        </div>\\n\\n        <div className=\\\"flex justify-end gap-2 pt-2\\\">\\n          <Button type=\\\"button\\\" variant=\\\"outline\\\" onClick={onRequestClose}>Cancel</Button>\\n          <Button type=\\\"submit\\\">Save</Button>\\n        </div>\\n      </form>\\n    </Modal>\\n  );\\n}\\n\",\"src/renderer/screens/SettingsView.tsx\":\"import { useState, useCallback } from 'react';\\nimport { Button } from '../components/ui/Button';\\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/Select';\\nimport { Switch } from '../components/ui/Switch';\\nimport { useLLMConfig } from '../hooks/useLLMConfig';\\nimport { useTheme, type Theme } from '../hooks/useTheme';\\nimport CollapsibleSidebar from '../components/ui/CollapsibleSidebar';\\nimport { useNavigator } from '../navigation/Navigator';\\nimport { useAppSettings } from '../hooks/useAppSettings';\\nimport { useProjectSettings } from '../hooks/useProjectSettings';\\nimport { useNotifications } from '../hooks/useNotifications';\\nimport { IconEdit, IconDelete, IconPlus } from '../components/ui/Icons';\\nimport { type ShortcutsModifier, type ShortcutsConfig, type AppSettings, DEFAULT_APP_SETTINGS } from '../../types/settings';\\n\\n// Settings Categories\\nconst CATEGORIES = [\\n  { id: 'visual', label: 'Visual', icon: <span aria-hidden>🎨</span>, accent: 'purple' },\\n  { id: 'llms', label: 'LLMs', icon: <span aria-hidden>🤖</span>, accent: 'teal' },\\n  { id: 'notifications', label: 'Notifications', icon: <span aria-hidden>🔔</span>, accent: 'brand' }\\n];\\n\\ntype CategoryId = typeof CATEGORIES[number]['id'];\\n\\nexport default function SettingsView() {\\n  const { availableThemes, theme, setTheme } = useTheme();\\n  const { isAppSettingsLoaded, appSettings, setNotificationSystemSettings, updateAppSettings } = useAppSettings();\\n  const { projectSettings, setNotificationProjectSettings } = useProjectSettings();\\n  const { enableNotifications } = useNotifications();\\n\\n  const { configs, activeConfigId, removeConfig, setActive } = useLLMConfig();\\n  const { openModal } = useNavigator();\\n\\n  // Layout state\\n  const [activeCategory, setActiveCategory] = useState<CategoryId>('visual');\\n\\n  // Helper: capture a combo from a keydown\\n  const captureCombo = useCallback((e: React.KeyboardEvent<HTMLInputElement>): string => {\\n    const parts: string[] = [];\\n    if (e.metaKey || e.ctrlKey) parts.push('Mod');\\n    if (e.shiftKey) parts.push('Shift');\\n    if (e.altKey) parts.push('Alt');\\n    // Base key\\n    const key = e.key;\\n    // Ignore modifier-only\\n    if (key && key !== 'Shift' && key !== 'Meta' && key !== 'Control' && key !== 'Alt') {\\n      if (key.length === 1) {\\n        parts.push(key.toUpperCase());\\n      } else {\\n        parts.push(key);\\n      }\\n    }\\n    return parts.length ? parts.join('+') : '';\\n  }, []);\\n\\n  const onShortcutChange = async (keyName: keyof ShortcutsConfig, combo: string) => {\\n    const next: AppSettings = await updateAppSettings({ userPreferences: { ...appSettings.userPreferences, shortcuts: { ...appSettings.userPreferences.shortcuts, [keyName]: combo } } });\\n    return next;\\n  };\\n\\n  const resetShortcutsToDefault = async () => {\\n    await updateAppSettings({ userPreferences: { ...appSettings.userPreferences, shortcuts: DEFAULT_APP_SETTINGS.userPreferences.shortcuts } });\\n  };\\n\\n  // Visual Settings content\\n  const renderVisualSection = () => (\\n    <div className=\\\"max-w-3xl\\\">\\n      <h2 className=\\\"text-xl font-semibold mb-3\\\">Appearance</h2>\\n      <div className=\\\"space-y-2\\\">\\n        <label htmlFor=\\\"theme\\\" className=\\\"block text-sm font-medium\\\">Theme</label>\\n        <select\\n          id=\\\"theme\\\"\\n          value={theme}\\n          onChange={(e) => {\\n            setTheme(e.target.value as Theme);\\n          }}\\n          className=\\\"w-64 p-2 border border-gray-300 rounded-md focus:border-brand-600 focus:ring-1 focus:ring-brand-600\\\"\\n        >\\n          {availableThemes.map((t) => (\\n            <option key={t} value={t}>\\n              {t.charAt(0).toUpperCase() + t.slice(1)}\\n            </option>\\n          ))}\\n        </select>\\n      </div>\\n\\n      <div className=\\\"space-y-2 mt-6\\\">\\n        <label htmlFor=\\\"shortcuts-mod\\\" className=\\\"block text-sm font-medium\\\">Shortcuts modifier key</label>\\n        <select\\n          id=\\\"shortcuts-mod\\\"\\n          value={appSettings.userPreferences.shortcutsModifier}\\n          onChange={(e) => updateAppSettings({ userPreferences: { ...appSettings.userPreferences, shortcutsModifier: e.target.value as ShortcutsModifier } })}\\n          className=\\\"w-64 p-2 border border-gray-300 rounded-md focus:border-brand-600 focus:ring-1 focus:ring-brand-600\\\"\\n        >\\n          <option value=\\\"meta\\\">Cmd (⌘) / Meta</option>\\n          <option value=\\\"ctrl\\\">Ctrl</option>\\n        </select>\\n        <div className=\\\"text-[12px] text-[var(--text-secondary)]\\\">\\n          This controls which key acts as the modifier for app shortcuts like Cmd/Ctrl+K and +N.\\n        </div>\\n      </div>\\n\\n      <div className=\\\"space-y-2 mt-8\\\">\\n        <h3 className=\\\"text-lg font-semibold\\\">Keyboard Shortcuts</h3>\\n        <p className=\\\"text-[12px] text-[var(--text-secondary)]\\\">Click a field and press the desired key combination. Mod maps to your selected modifier (Cmd on macOS, Ctrl on Windows/Linux).</p>\\n\\n        <div className=\\\"grid grid-cols-1 sm:grid-cols-2 gap-4 mt-3\\\">\\n          <div>\\n            <label className=\\\"block text-sm font-medium mb-1\\\">Command Menu</label>\\n            <input\\n              type=\\\"text\\\"\\n              value={appSettings.userPreferences.shortcuts.commandMenu}\\n              onChange={() => {}}\\n              onKeyDown={(e) => { e.preventDefault(); const v = captureCombo(e); if (v) onShortcutChange('commandMenu', v); }}\\n              className=\\\"w-full p-2 border border-gray-300 rounded-md\\\"\\n              placeholder=\\\"Press keys...\\\"\\n            />\\n          </div>\\n          <div>\\n            <label className=\\\"block text-sm font-medium mb-1\\\">New Task</label>\\n            <input\\n              type=\\\"text\\\"\\n              value={appSettings.userPreferences.shortcuts.newTask}\\n              onChange={() => {}}\\n              onKeyDown={(e) => { e.preventDefault(); const v = captureCombo(e); if (v) onShortcutChange('newTask', v); }}\\n              className=\\\"w-full p-2 border border-gray-300 rounded-md\\\"\\n              placeholder=\\\"Press keys...\\\"\\n            />\\n          </div>\\n          <div>\\n            <label className=\\\"block text-sm font-medium mb-1\\\">Help Menu</label>\\n            <input\\n              type=\\\"text\\\"\\n              value={appSettings.userPreferences.shortcuts.help}\\n              onChange={() => {}}\\n              onKeyDown={(e) => { e.preventDefault(); const v = captureCombo(e); if (v) onShortcutChange('help', v); }}\\n              className=\\\"w-full p-2 border border-gray-300 rounded-md\\\"\\n              placeholder=\\\"Press keys...\\\"\\n            />\\n          </div>\\n          <div>\\n            <label className=\\\"block text-sm font-medium mb-1\\\">Add Feature to UI Improvements</label>\\n            <input\\n              type=\\\"text\\\"\\n              value={appSettings.userPreferences.shortcuts.addUiFeature}\\n              onChange={() => {}}\\n              onKeyDown={(e) => { e.preventDefault(); const v = captureCombo(e); if (v) onShortcutChange('addUiFeature', v); }}\\n              className=\\\"w-full p-2 border border-gray-300 rounded-md\\\"\\n              placeholder=\\\"Press keys...\\\"\\n            />\\n          </div>\\n        </div>\\n        <div className=\\\"mt-2\\\">\\n          <Button onClick={resetShortcutsToDefault} variant=\\\"outline\\\">Reset to defaults</Button>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n\\n  // LLMs list content\\n  const renderLLMsSection = () => (\\n    <div className=\\\"max-w-4xl\\\">\\n      <div className=\\\"flex items-center justify-between mb-3\\\">\\n        <h2 className=\\\"text-xl font-semibold\\\">LLM Configurations</h2>\\n        <Button onClick={() => openModal({ type: 'llm-config-add' })}><IconPlus/></Button>\\n      </div>\\n      <div className=\\\"border rounded-md divide-y\\\">\\n        {configs.length === 0 && (\\n          <div className=\\\"p-4 text-sm text-gray-600\\\">No configurations yet. Click \\\"Add New Config\\\" to create one.</div>\\n        )}\\n        {configs.map((cfg) => (\\n          <div key={cfg.id} className=\\\"p-3 flex flex-wrap gap-2 md:flex-nowrap md:items-center md:justify-between\\\">\\n            <div className=\\\"min-w-0\\\">\\n              <div className=\\\"font-medium truncate\\\">{cfg.name} {activeConfigId === cfg.id ? <span className=\\\"badge badge--soft badge--done\\\">Active</span> : null}</div>\\n              <div className=\\\"text-sm text-gray-600 truncate\\\">\\n                Provider: {cfg.provider} • Model: {cfg.model || '—'}\\n              </div>\\n            </div>\\n            <div className=\\\"flex items-center gap-2 shrink-0\\\">\\n              {activeConfigId !== cfg.id && (\\n                <Button onClick={() => setActive(cfg.id)}>Set Active</Button>\\n              )}\\n              <Button onClick={() => openModal({ type: 'llm-config-edit', id: cfg.id })} variant=\\\"outline\\\">\\n                <IconEdit className=\\\"w-4 h-4\\\" />\\n              </Button>\\n              <Button onClick={() => removeConfig(cfg.id)} variant=\\\"danger\\\">\\n                <IconDelete className=\\\"w-4 h-4\\\" />\\n              </Button>\\n            </div>\\n          </div>\\n        ))}\\n      </div>\\n      <div className=\\\"text-[12px] text-[var(--text-secondary)] mt-2\\\">\\n        Tip: Local providers must expose an OpenAI-compatible API. Use the Local preset to fill the default URL (http://localhost:1234/v1) and click \\\"Load Available Models\\\" to discover models.\\n      </div>\\n    </div>\\n  );\\n\\n  const renderNotificationsSection = () => (\\n    <div className=\\\"max-w-3xl\\\">\\n      <h2 className=\\\"text-xl font-semibold mb-3\\\">Notification Preferences</h2>\\n      <div className=\\\"space-y-4\\\">\\n        <Switch\\n          checked={appSettings.notificationSystemSettings.osNotificationsEnabled}\\n          onCheckedChange={async (checked) => {\\n            if (checked){\\n              const success = await enableNotifications()\\n              if (success){\\n                setNotificationSystemSettings({ osNotificationsEnabled: true });\\n              }else{\\n                setNotificationSystemSettings({ osNotificationsEnabled: false });\\n              }\\n            }else{\\n                setNotificationSystemSettings({ osNotificationsEnabled: false });\\n            }\\n          }}\\n          label=\\\"Enable OS Notifications\\\"\\n        />\\n        <div>\\n          <h3 className=\\\"font-medium mb-2\\\">Notification Categories</h3>\\n          <div className=\\\"space-y-2\\\">\\n            {Object.entries(projectSettings.notifications.categoriesEnabled).map(([category, enabled]) => (\\n              <Switch\\n                key={category}\\n                checked={enabled ?? true}\\n                onCheckedChange={(checked) => setNotificationProjectSettings({ categoriesEnabled: { ...projectSettings.notifications.categoriesEnabled, [category]: checked } })}\\n                label={category.charAt(0).toUpperCase() + category.slice(1)}\\n              />\\n            ))}\\n          </div>\\n        </div>\\n        <Switch\\n          checked={appSettings.notificationSystemSettings.soundsEnabled}\\n          onCheckedChange={(checked) => setNotificationSystemSettings({ ...appSettings.notificationSystemSettings, soundsEnabled: checked })}\\n          label=\\\"Enable Notification Sounds\\\"\\n        />\\n        <div>\\n          <label className=\\\"block text-sm font-medium mb-1\\\">Notification Display Duration</label>\\n          <Select\\n            value={appSettings.notificationSystemSettings.displayDuration.toString()}\\n            onValueChange={(value) => setNotificationSystemSettings({ ...appSettings.notificationSystemSettings, displayDuration: parseInt(value) })}\\n          >\\n            <SelectTrigger>\\n              <SelectValue placeholder=\\\"Select duration\\\" />\\n            </SelectTrigger>\\n            <SelectContent>\\n              <SelectItem value=\\\"3\\\">3 seconds</SelectItem>\\n              <SelectItem value=\\\"5\\\">5 seconds</SelectItem>\\n              <SelectItem value=\\\"10\\\">10 seconds</SelectItem>\\n              <SelectItem value=\\\"0\\\">Persistent</SelectItem>\\n            </SelectContent>\\n          </Select>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n\\n  return (\\n    <CollapsibleSidebar\\n      items={CATEGORIES}\\n      activeId={activeCategory}\\n      onSelect={(c) => { setActiveCategory(c as CategoryId)}}\\n      storageKey=\\\"settings-panel-collapsed\\\"\\n      headerTitle=\\\"Categories\\\"\\n      headerSubtitle=\\\"\\\"\\n    >\\n      {!isAppSettingsLoaded && <div className=\\\"empty\\\" aria-live=\\\"polite\\\">Loading your preferences…</div>}\\n      {isAppSettingsLoaded && activeCategory === 'visual' && renderVisualSection()}\\n      {isAppSettingsLoaded && activeCategory === 'llms' && renderLLMsSection()}\\n      {isAppSettingsLoaded && activeCategory === 'notifications' && renderNotificationsSection()}\\n    </CollapsibleSidebar>\\n  );\\n}\\n\",\"src/chat/ChatsManager.js\":\"import { ipcMain } from 'electron';\\nimport path from 'path';\\nimport IPC_HANDLER_KEYS from \\\"../ipcHandlersKeys\\\";\\nimport ChatsStorage from './ChatsStorage';\\nimport { LLMProvider } from './LLMProvider'\\nimport { tasksManager, filesManager, projectsManager } from '../managers';\\nimport { buildChatTools } from 'thefactory-tools'\\n\\nconst MESSAGES_TO_SEND = 10\\n\\nexport class ChatsManager {\\n  constructor(projectRoot, window, projectsManager, tasksManager, filesManager) {\\n    this.projectRoot = projectRoot;\\n    this.window = window;\\n    this.storages = {};\\n    this._ipcBound = false;\\n\\n    this.projectsManager = projectsManager\\n    this.tasksManager = tasksManager\\n    this.filesManager = filesManager\\n  }\\n\\n  async __getStorage(projectId) {\\n    if (!this.storages[projectId]) {\\n      const project = await this.projectsManager.getProject(projectId)\\n      if (!project){ return }\\n      const chatsDir = path.join(this.projectsManager.projectsDir, `${projectId}/chats`);\\n      const storage = new ChatsStorage(projectId, chatsDir, this.window);\\n      await storage.init();\\n      this.storages[projectId] = storage;\\n    }\\n    return this.storages[projectId];\\n  }\\n\\n  async init() {\\n    await this.__getStorage('main');\\n\\n    this._registerIpcHandlers();\\n  }\\n\\n  _registerIpcHandlers() {\\n    if (this._ipcBound) return;\\n\\n    const handlers = {};\\n    handlers[IPC_HANDLER_KEYS.CHATS_LIST_MODELS] = async ({ config }) => this.listModels(config);\\n    handlers[IPC_HANDLER_KEYS.CHATS_LIST] = async ({ projectId }) => (await this.__getStorage(projectId))?.listChats();\\n    handlers[IPC_HANDLER_KEYS.CHATS_CREATE] = async ({ projectId }) => (await this.__getStorage(projectId))?.createChat();\\n    handlers[IPC_HANDLER_KEYS.CHATS_GET] = async ({ projectId, id }) => (await this.__getStorage(projectId))?.getChat(id);\\n    handlers[IPC_HANDLER_KEYS.CHATS_DELETE] = async ({ projectId, chatId }) => (await this.__getStorage(projectId))?.deleteChat(chatId);\\n    handlers[IPC_HANDLER_KEYS.CHATS_COMPLETION] = async ({ projectId, chatId, newMessages, config }) => this.getCompletion(projectId, chatId, newMessages, config);\\n\\n    for (const handler of Object.keys(handlers)) {\\n      ipcMain.handle(handler, async (event, args) => {\\n        try {\\n          return await handlers[handler](args);\\n        } catch (e) {\\n          console.error(`${handler} failed`, e);\\n          return { ok: false, error: String(e?.message || e) };\\n        }\\n      });\\n    }\\n\\n    this._ipcBound = true;\\n  }\\n\\n  _withAttachmentsAsMentions(messages) {\\n    // Transform messages with attachments into content that includes @path mentions\\n    return (messages || []).map((m) => {\\n      try {\\n        if (m && Array.isArray(m.attachments) && m.attachments.length) {\\n          const unique = Array.from(new Set(m.attachments.filter(Boolean)));\\n          const attachText = unique.map((p) => `@${p}`).join(\\\"\\\\n\\\");\\n          const sep = m.content && attachText ? \\\"\\\\n\\\\n\\\" : '';\\n          return { ...m, content: `${m.content || ''}${sep}Attached files:\\\\n${attachText}` };\\n        }\\n      } catch {}\\n      return m;\\n    });\\n  }\\n\\n  async _constructSystemPrompt(projectId) {\\n    const project = await this.projectsManager.getProject(projectId);\\n    \\n    const parts = [\\n      'You are a helpful project assistant. Discuss tasks, files, and related topics. Use tools to query project info. If user mentions @path, use read_file.  If user mentions #reference, use get_task_reference. You can create new files using write_file (use .md if it is a markdown note).'\\n    ];\\n\\n    if (project) {\\n      parts.push(`\\\\n#CURRENT PROJECT: ${project.name}`);\\n      if (project.description) {\\n        parts.push(`##DESCRIPTION:\\\\n${project.description}`);\\n      }\\n    }\\n\\n    return parts.join('\\\\n');\\n  }\\n\\n  async getCompletion(projectId, chatId, newMessages, config) {\\n    try {\\n      const storage = await this.__getStorage(projectId)\\n      const chat = await storage.getChat(chatId)\\n      if (!chat) throw new Error(`Couldn't load chat with chatId: ${chatId}`)\\n\\n      const systemPromptContent = await this._constructSystemPrompt(projectId);\\n      const systemPrompt = { role: 'system', content: systemPromptContent };\\n\\n      let messagesHistory = [...chat.messages, ...newMessages];\\n      if (messagesHistory.length > MESSAGES_TO_SEND){\\n        messagesHistory.splice(0, messagesHistory.length - MESSAGES_TO_SEND)\\n      }\\n      // Build provider messages with attachments folded into content for tool discovery\\n      const providerMessages = this._withAttachmentsAsMentions(messagesHistory);\\n      let currentMessages = [systemPrompt, ...providerMessages];\\n\\n      const repoRoot = this.projectRoot\\n      const { tools, callTool } = buildChatTools({ repoRoot, projectId });\\n\\n      const provider = new LLMProvider(config);\\n\\n      let rawResponses = []\\n      while (true) {\\n        const response = await provider.createCompletion({\\n          model: config.model,\\n          messages: currentMessages,\\n          tools: tools.length > 0 ? tools : undefined,\\n          tool_choice: tools.length > 0 ? 'auto' : undefined,\\n          stream: false,\\n        });\\n\\n        const message = response?.choices?.[0]?.message;\\n        if (!message) {\\n          throw new Error('LLM returned an unexpected response format.');\\n        }\\n        rawResponses.push(JSON.stringify(response))\\n\\n        if (!message.tool_calls || message.tool_calls.length === 0) {\\n          return await storage.saveChat(chatId, [...chat.messages, ...newMessages, message], [...(chat.rawResponses ?? []), rawResponses])\\n        }\\n\\n        currentMessages.push(message);\\n\\n        for (const toolCall of message.tool_calls) {\\n          const functionName = toolCall.function.name;\\n          const functionArgs = JSON.parse(toolCall.function.arguments || '{}');\\n          const functionResponse = await callTool(functionName, functionArgs);\\n          currentMessages.push({\\n            role: 'user',\\n            tool_call_id: toolCall.id,\\n            content: JSON.stringify(functionResponse),\\n          });\\n        }\\n      }\\n    } catch (error) {\\n      const details = [\\n        error?.message,\\n        error?.response?.data ? JSON.stringify(error.response.data) : null,\\n        error?.cause?.message || null,\\n      ].filter(Boolean).join('\\\\n');\\n      console.error('Error in chat completion:', details);\\n    }\\n  }\\n\\n  async listModels(config) {\\n    try {\\n      const provider = new LLMProvider(config);\\n      if (typeof provider.listModels === 'function') {\\n        return await provider.listModels();\\n      }\\n      return [];\\n    } catch (error) {\\n      throw error;\\n    }\\n  }\\n}\\n\",\"src/tools/factory/mainOrchestrator.js\":\"import { ipcMain, webContents } from 'electron';\\nimport IPC_HANDLER_KEYS from '../../ipcHandlersKeys.js';\\nimport path from 'node:path';\\nimport fs from 'node:fs';\\nimport { createOrchestrator, createHistoryStore, createPricingManager } from 'thefactory-tools'\\n\\nconst RUN_SUBSCRIBERS = new Map(); // runId -> Set<webContentsId>\\nconst RUNS = new Map(); // runId -> RunHandle\\nconst RUN_META = new Map(); // runId -> metadata snapshot\\nconst RUN_TIMERS = new Map(); // runId -> heartbeat timer\\nconst RUN_MESSAGES = new Map(); // runId -> last messages array or grouped object\\n\\nlet PRICING = null;\\nlet HISTORY = null;\\n\\n// Expose getter for other managers (e.g., LiveData) to access pricing manager\\nexport function getPricingManager() {\\n  return PRICING;\\n}\\n\\nfunction sendEventToWC(wcId, runId, event) {\\n  const wc = webContents.fromId(wcId);\\n  if (wc && !wc.isDestroyed()) {\\n    try {\\n      wc.send(IPC_HANDLER_KEYS.FACTORY_EVENT, { runId, event });\\n    } catch (err) {\\n      console.warn(`[factory] Failed to send event to wc ${wcId} for run ${runId}:`, err?.message || err);\\n    }\\n  }\\n}\\n\\nfunction broadcastEventToSubscribers(runId, event) {\\n  const subscribers = RUN_SUBSCRIBERS.get(runId);\\n  if (!subscribers || subscribers.size === 0) return;\\n  for (const wcId of subscribers) {\\n    sendEventToWC(wcId, runId, event);\\n  }\\n}\\n\\nfunction maskSecrets(obj) {\\n  try {\\n    const o = JSON.parse(JSON.stringify(obj));\\n    if (o && o.llmConfig && typeof o.llmConfig === 'object') {\\n      if ('apiKey' in o.llmConfig) o.llmConfig.apiKey = '***';\\n    }\\n    return o;\\n  } catch {\\n    return obj;\\n  }\\n}\\n\\nfunction nowIso() {\\n  return new Date().toISOString();\\n}\\n\\nfunction persistMeta(runId) {\\n  try {\\n    const meta = RUN_META.get(runId);\\n    if (!meta || !HISTORY) return;\\n    const h = HISTORY;\\n    if (typeof h.addOrUpdateRun === 'function') {\\n      h.addOrUpdateRun(meta);\\n    } else if (typeof h.updateRunMeta === 'function') {\\n      h.updateRunMeta(meta.runId, meta);\\n    } else if (typeof h.upsertRun === 'function') {\\n      h.upsertRun(meta);\\n    } else if (typeof h.addRun === 'function') {\\n      h.addRun(meta);\\n    } else {\\n      // No known persistence API; noop\\n    }\\n  } catch (e) {\\n    console.warn('[factory] persistMeta error', e?.message || e);\\n  }\\n}\\n\\nfunction persistMessages(runId, messages) {\\n  try {\\n    if (!HISTORY || !messages) return;\\n    const h = HISTORY;\\n    if (typeof h.writeMessages === 'function') {\\n      h.writeMessages(runId, messages);\\n    } else if (typeof h.saveMessages === 'function') {\\n      h.saveMessages(runId, messages);\\n    }\\n  } catch (e) {\\n    console.warn('[factory] persistMessages error', e?.message || e);\\n  }\\n}\\n\\nfunction updateMetaFromEvent(runId, e) {\\n  const meta = RUN_META.get(runId);\\n  if (!meta) return;\\n  meta.updatedAt = e?.ts || e?.time || nowIso();\\n  const type = e?.type;\\n  const payload = e?.payload || {};\\n  if (type === 'run/progress' || type === 'run/progress/snapshot') {\\n    if (typeof payload?.progress === 'number') meta.progress = payload.progress;\\n    else if (typeof payload?.percent === 'number') meta.progress = Math.max(0, Math.min(1, payload.percent / 100));\\n    if (payload?.message) meta.message = payload.message;\\n  } else if (type === 'run/usage') {\\n    if (payload?.costUSD != null) meta.costUSD = payload.costUSD;\\n    else if (payload?.costUsd != null) meta.costUSD = payload.costUsd;\\n    else if (payload?.usd != null) meta.costUSD = payload.usd;\\n    if (payload?.promptTokens != null) meta.promptTokens = payload.promptTokens;\\n    if (payload?.completionTokens != null) meta.completionTokens = payload.completionTokens;\\n    if (payload?.provider) meta.provider = payload.provider;\\n    if (payload?.model) meta.model = payload.model;\\n  } else if (type === 'run/start') {\\n    if (payload?.llm?.provider) meta.provider = payload.llm.provider;\\n    if (payload?.llm?.model) meta.model = payload.llm.model;\\n  } else if (type === 'run/error') {\\n    meta.state = 'error';\\n    meta.message = payload?.message || payload?.error || 'Error';\\n  } else if (type === 'run/cancelled') {\\n    meta.state = 'cancelled';\\n    meta.message = payload?.reason || 'Cancelled';\\n  } else if (type === 'run/completed' || type === 'run/complete') {\\n    meta.state = 'completed';\\n    meta.message = payload?.message || payload?.summary || 'Completed';\\n  }\\n  // Persist snapshot on each update\\n  persistMeta(runId);\\n}\\n\\nfunction loadWorkspaceDotenv(projectRoot) {\\n  try {\\n    const dotenv = require('dotenv');\\n    const envPath = path.join(projectRoot, '.env');\\n    if (fs.existsSync(envPath)) {\\n      dotenv.config({ path: envPath });\\n      console.log('[factory] Loaded workspace .env from', envPath);\\n    } else {\\n      console.log('[factory] No .env at', envPath);\\n    }\\n  } catch (e) {\\n    // If dotenv isn't available or fails, ignore silently to avoid crashing Electron main\\n    console.warn('[factory] dotenv not loaded in main process (optional):', e?.message || e);\\n  }\\n}\\n\\n// --- Normalization: convert persisted messages array into feature-keyed logs ---\\nconst DEFAULT_FEATURE_KEY = '__task__';\\nfunction parseFeatureMarker(content) {\\n  if (!content || typeof content !== 'string') return null;\\n  // Matches lines like: --- BEGIN FEATURE <id>: <title> ---\\n  const m = /^---\\\\s*BEGIN\\\\s+FEATURE\\\\s+([^:]+)\\\\s*:/.exec(content);\\n  return m ? String(m[1]).trim() : null;\\n}\\nfunction ensureGroup(map, featureId) {\\n  if (!map[featureId]) {\\n    map[featureId] = { startDate: new Date().toISOString(), featureId, messages: [] };\\n  }\\n  return map[featureId];\\n}\\nfunction normalizeRunMessagesToFeatureLog(messages) {\\n  // If already in the expected shape (object of { featureId: { startDate, messages } }), return as-is\\n  if (messages && !Array.isArray(messages) && typeof messages === 'object') {\\n    return messages;\\n  }\\n  const result = {};\\n  if (!Array.isArray(messages)) {\\n    // Unknown shape -> fallback to empty task bucket\\n    result[DEFAULT_FEATURE_KEY] = { startDate: new Date().toISOString(), featureId: DEFAULT_FEATURE_KEY, messages: [] };\\n    return result;\\n  }\\n  let current = DEFAULT_FEATURE_KEY;\\n  ensureGroup(result, current);\\n  for (const msg of messages) {\\n    try {\\n      const role = msg?.role;\\n      const content = msg?.content;\\n      if (role === 'system') {\\n        const fid = parseFeatureMarker(content);\\n        if (fid) {\\n          current = fid;\\n          ensureGroup(result, current);\\n          // Do not include the marker message in the feature messages\\n          continue;\\n        }\\n      }\\n      const grp = ensureGroup(result, current);\\n      // Push shallow clone to avoid accidental mutations downstream\\n      grp.messages.push({ ...msg });\\n    } catch {}\\n  }\\n  // Assign a simple endDate for groups that have messages\\n  const now = new Date().toISOString();\\n  for (const fid of Object.keys(result)) {\\n    const g = result[fid];\\n    if (g && Array.isArray(g.messages) && g.messages.length > 0) {\\n      g.endDate = now;\\n    }\\n  }\\n  return result;\\n}\\n\\nexport async function registerFactoryIPC(mainWindow, projectRoot) {\\n  console.log('[factory] Registering IPC handlers. projectRoot=', projectRoot);\\n\\n  // Ensure workspace .env is loaded in main process so child processes and libs see credentials\\n  loadWorkspaceDotenv(projectRoot);\\n\\n\\n  try {\\n    const dbPath = path.join(projectRoot, '.factory', 'history.sqlite');\\n    if (typeof createHistoryStore === 'function') {\\n      console.log('[factory] Initializing history store at', dbPath);\\n      HISTORY = createHistoryStore({ dbPath });\\n    } else {\\n      console.log('[factory] History store not available; proceeding without persistence');\\n    }\\n  } catch (err) {\\n    console.warn('[factory] Optional history init failed; continuing without it:', err?.message || err);\\n  }\\n\\n  // Initialize pricing manager and keep reference for IPC operations\\n  try {\\n    PRICING = createPricingManager({ projectRoot });\\n    console.log('[factory] Pricing manager initialized. Loaded', PRICING?.listPrices()?.prices?.length || 0, 'prices.');\\n  } catch (err) {\\n    console.warn('[factory] Failed to initialize pricing manager:', err?.message || err);\\n  }\\n\\n  console.log('[factory] Creating orchestrator');\\n  const orchestrator = createOrchestrator({ projectRoot, history: HISTORY, pricing: PRICING });\\n  console.log('[factory] Orchestrator ready');\\n\\n  function startHeartbeat(runId) {\\n    const prev = RUN_TIMERS.get(runId);\\n    if (prev) clearInterval(prev);\\n    const timer = setInterval(() => {\\n      const meta = RUN_META.get(runId);\\n      if (!meta) return;\\n      // Only heartbeat while running\\n      if (meta.state === 'running') {\\n        const evt = { type: 'run/heartbeat', payload: {}, ts: nowIso() };\\n        updateMetaFromEvent(runId, evt);\\n        broadcastEventToSubscribers(runId, evt);\\n      }\\n    }, 15000);\\n    RUN_TIMERS.set(runId, timer);\\n  }\\n\\n  function stopHeartbeat(runId) {\\n    const t = RUN_TIMERS.get(runId);\\n    if (t) {\\n      clearInterval(t);\\n      RUN_TIMERS.delete(runId);\\n    }\\n  }\\n\\n  function attachRun(runHandle, initMeta) {\\n    console.log('[factory] Attaching run', runHandle?.id);\\n    RUNS.set(runHandle.id, runHandle);\\n    RUN_META.set(runHandle.id, initMeta);\\n    // Persist initial meta\\n    persistMeta(runHandle.id);\\n    startHeartbeat(runHandle.id);\\n\\n    const unsubscribe = runHandle.onEvent((e) => {\\n      try {\\n        // Rich log for visibility; include payload for llm events\\n        const t = e?.type || 'unknown';\\n        if (String(t).startsWith('llm/')) {\\n          console.log('[factory] event', runHandle.id, t, e?.payload ? JSON.parse(JSON.stringify(e.payload)) : undefined);\\n        } else if (t === 'run/log' || t === 'run/progress' || t === 'run/progress/snapshot') {\\n          console.log('[factory] event', runHandle.id, t, e?.payload?.message || '');\\n        } else {\\n          console.log('[factory] event', runHandle.id, t);\\n        }\\n      } catch {}\\n\\n      // Capture and persist messages when provided (init, snapshots, or final)\\n      try {\\n        if ((e?.type === 'llm/messages/snapshot' || e?.type === 'llm/messages/final' || e?.type === 'llm/messages/init') && (e?.payload?.messages || e?.payload?.messageGroups)) {\\n          const toPersist = e?.payload?.messageGroups ?? e?.payload?.messages;\\n          RUN_MESSAGES.set(runHandle.id, toPersist);\\n          persistMessages(runHandle.id, toPersist);\\n        }\\n      } catch (err) {\\n        console.warn('[factory] Failed to persist messages for', runHandle.id, err?.message || err);\\n      }\\n\\n      updateMetaFromEvent(runHandle.id, e);\\n      broadcastEventToSubscribers(runHandle.id, e);\\n\\n      // If we receive a run/cancelled event, proactively flush last messages (if any)\\n      if (e?.type === 'run/cancelled') {\\n        const last = RUN_MESSAGES.get(runHandle.id);\\n        if (last) persistMessages(runHandle.id, last);\\n      }\\n    });\\n\\n    const cleanup = () => {\\n      console.log('[factory] Cleaning up run', runHandle.id);\\n      try { unsubscribe(); } catch {}\\n      stopHeartbeat(runHandle.id);\\n      RUNS.delete(runHandle.id);\\n      RUN_SUBSCRIBERS.delete(runHandle.id);\\n      RUN_MESSAGES.delete(runHandle.id);\\n      // keep RUN_META for a while? Persisted already\\n      RUN_META.delete(runHandle.id);\\n    };\\n\\n    runHandle.onEvent((e) => {\\n      if (e?.type === 'run/cancelled' || e?.type === 'run/completed' || e?.type === 'run/complete' || e?.type === 'run/error') {\\n        cleanup();\\n      }\\n    });\\n  }\\n\\n  // Helper to proactively mark and persist cancellation, even if the run handle doesn't emit an event\\n  function markCancelled(runId, reason) {\\n    const meta = RUN_META.get(runId);\\n    if (!meta) return;\\n    const evt = { type: 'run/cancelled', payload: { reason: reason || 'Cancelled' }, ts: nowIso() };\\n    updateMetaFromEvent(runId, evt);\\n    broadcastEventToSubscribers(runId, evt);\\n    // Persist last known messages if we have any\\n    const last = RUN_MESSAGES.get(runId);\\n    if (last) persistMessages(runId, last);\\n    stopHeartbeat(runId);\\n  }\\n\\n  ipcMain.handle(IPC_HANDLER_KEYS.FACTORY_START_TASK, (_evt, { agentType, projectId, taskId, llmConfig, options }) => {\\n    console.log('[factory] START_TASK', maskSecrets({ agentType, projectId, taskId, llmConfig, options }));\\n    try {\\n      const run = orchestrator.startRun({ agentType, projectId, taskId, llmConfig, options });\\n      console.log('[factory] Run started (task)', run?.id);\\n      const initMeta = {\\n        runId: run.id,\\n        agentType,\\n        projectId,\\n        taskId,\\n        featureId: undefined,\\n        state: 'running',\\n        message: 'Starting agent... ',\\n        progress: undefined,\\n        costUSD: undefined,\\n        promptTokens: undefined,\\n        completionTokens: undefined,\\n        provider: llmConfig?.provider,\\n        model: llmConfig?.model,\\n        startedAt: nowIso(),\\n        updatedAt: nowIso(),\\n      };\\n      attachRun(run, initMeta);\\n      // Emit a synthetic start snapshot\\n      broadcastEventToSubscribers(run.id, { type: 'run/snapshot', payload: initMeta, ts: nowIso() });\\n      return { runId: run.id };\\n    } catch (err) {\\n      console.error('[factory] Failed to start task run', err?.stack || String(err));\\n      throw err;\\n    }\\n  });\\n\\n  ipcMain.handle(IPC_HANDLER_KEYS.FACTORY_START_FEATURE, (_evt, { agentType, projectId, taskId, featureId, llmConfig, options }) => {\\n    console.log('[factory] START_FEATURE', maskSecrets({ agentType, projectId, taskId, featureId, llmConfig, options }));\\n    try {\\n      const run = orchestrator.startRun({ agentType, projectId, taskId, featureId, llmConfig, options });\\n      console.log('[factory] Run started (feature)', run?.id);\\n      const initMeta = {\\n        runId: run.id,\\n        agentType,\\n        projectId,\\n        taskId,\\n        featureId,\\n        state: 'running',\\n        message: 'Starting agent... ',\\n        progress: undefined,\\n        costUSD: undefined,\\n        promptTokens: undefined,\\n        completionTokens: undefined,\\n        provider: llmConfig?.provider,\\n        model: llmConfig?.model,\\n        startedAt: nowIso(),\\n        updatedAt: nowIso(),\\n      };\\n      attachRun(run, initMeta);\\n      // Emit a synthetic start snapshot\\n      broadcastEventToSubscribers(run.id, { type: 'run/snapshot', payload: initMeta, ts: nowIso() });\\n      return { runId: run.id };\\n    } catch (err) {\\n      console.error('[factory] Failed to start feature run', err?.stack || String(err));\\n      throw err;\\n    }\\n  });\\n\\n  ipcMain.handle(IPC_HANDLER_KEYS.FACTORY_CANCEL_RUN, (_evt, { runId, reason }) => {\\n    console.log('[factory] CANCEL_RUN', { runId, reason });\\n    const run = RUNS.get(runId);\\n    // Proactively mark as cancelled for UI/history even if run handle doesn't emit an event\\n    try { markCancelled(runId, reason); } catch {}\\n    if (run) {\\n      try { run.cancel(reason); } catch (err) { console.warn('[factory] Error cancelling run', runId, err?.message || err); }\\n    } else {\\n      console.warn('[factory] Cancel requested for unknown run', runId);\\n    }\\n    return { ok: true };\\n  });\\n\\n  ipcMain.on(IPC_HANDLER_KEYS.FACTORY_SUBSCRIBE, (evt, { runId }) => {\\n    const wcId = evt.sender.id;\\n    console.log('[factory] SUBSCRIBE', { runId, wcId });\\n    let set = RUN_SUBSCRIBERS.get(runId);\\n    if (!set) {\\n      set = new Set();\\n      RUN_SUBSCRIBERS.set(runId, set);\\n    }\\n    set.add(wcId);\\n    evt.sender.once('destroyed', () => {\\n      const s = RUN_SUBSCRIBERS.get(runId);\\n      if (s) {\\n        s.delete(wcId);\\n        console.log('[factory] Unsubscribed (wc destroyed)', { runId, wcId });\\n      }\\n    });\\n\\n    // Immediately send a snapshot to this subscriber to sync current state\\n    const meta = RUN_META.get(runId);\\n    if (meta) {\\n      sendEventToWC(wcId, runId, { type: 'run/snapshot', payload: meta, ts: nowIso() });\\n    }\\n  });\\n\\n  ipcMain.handle(IPC_HANDLER_KEYS.FACTORY_LIST_ACTIVE, () => {\\n    // Return currently running runs (best-effort snapshot)\\n    const list = [];\\n    for (const [runId, meta] of RUN_META.entries()) {\\n      if (meta?.state === 'running') {\\n        list.push({ ...meta, runId });\\n      }\\n    }\\n    return list;\\n  });\\n\\n  // History listing and messages API\\n  ipcMain.handle(IPC_HANDLER_KEYS.FACTORY_HISTORY_LIST, () => {\\n    try {\\n      return HISTORY?.listRuns?.() || [];\\n    } catch (e) {\\n      console.warn('[factory] history:list error', e?.message || e);\\n      return [];\\n    }\\n  });\\n  ipcMain.handle(IPC_HANDLER_KEYS.FACTORY_HISTORY_MESSAGES, (_evt, { runId }) => {\\n    try {\\n      const raw = HISTORY?.getRunMessages?.(runId) || [];\\n      const normalized = normalizeRunMessagesToFeatureLog(raw);\\n      return normalized;\\n    } catch (e) {\\n      console.warn('[factory] history:messages error', e?.message || e);\\n      // Return empty feature log structure to satisfy UI expectations\\n      return { [DEFAULT_FEATURE_KEY]: { startDate: nowIso(), featureId: DEFAULT_FEATURE_KEY, messages: [] } };\\n    }\\n  });\\n  ipcMain.handle(IPC_HANDLER_KEYS.FACTORY_HISTORY_DELETE, (_evt, { runId }) => {\\n    try {\\n      if (HISTORY && typeof HISTORY.deleteRun === 'function') {\\n        HISTORY.deleteRun(runId);\\n        return { ok: true };\\n      }\\n      console.warn('[factory] HISTORY.deleteRun not available');\\n      return { ok: false };\\n    } catch (e) {\\n      console.warn('[factory] history:delete error', e?.message || e);\\n      return { ok: false, error: e?.message || String(e) };\\n    }\\n  });\\n\\n  // Pricing handlers\\n  ipcMain.handle(IPC_HANDLER_KEYS.FACTORY_PRICING_GET, () => {\\n    try {\\n      const state = PRICING?.listPrices();\\n      return state || { updatedAt: nowIso(), prices: [] };\\n    } catch (e) {\\n      return { updatedAt: nowIso(), prices: [] };\\n    }\\n  });\\n\\n  ipcMain.handle(IPC_HANDLER_KEYS.FACTORY_PRICING_REFRESH, async (_evt, { provider, url }) => {\\n    try {\\n      const state = await PRICING?.refresh(provider, url);\\n      return state || { updatedAt: nowIso(), prices: [] };\\n    } catch (e) {\\n      return { updatedAt: nowIso(), prices: [] };\\n    }\\n  });\\n\\n  // Log window lifecycle for context\\n  if (mainWindow && mainWindow.webContents) {\\n    mainWindow.webContents.on('destroyed', () => console.log('[factory] Main window destroyed'));\\n  }\\n}\\n\"}\n\nBegin now.",
        "featureId": "9fb948d2-235d-4322-9462-93a9ca8ce283",
        "agentType": "developer",
        "turn": 0,
        "source": "initial",
        "createdAt": "2025-09-09T15:15:35.665Z"
      }
    ]
  }
}